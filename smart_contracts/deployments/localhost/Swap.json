{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogAddMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "EC20TokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogAddToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogBuyToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogCancelBuyOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogCancelSellOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogCreateBuyOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogCreateSellOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogDepositToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogFulfilBuyOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogFulfilSellOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogSellToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogWithdrawToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        }
      ],
      "name": "addMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "EC20TokenAddress",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "buyTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sellTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "orderIndex",
          "type": "uint256"
        }
      ],
      "name": "cancelBuyOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "buyTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sellTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "orderIndex",
          "type": "uint256"
        }
      ],
      "name": "cancelSellOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllMarkets",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokenBalanceForUser",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokens",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "buyTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sellTokenSymbol",
          "type": "string"
        }
      ],
      "name": "getBuyOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "buyTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sellTokenSymbol",
          "type": "string"
        }
      ],
      "name": "getMarketIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpenOrdersForUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "sellTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "buyTokenSymbol",
          "type": "string"
        }
      ],
      "name": "getSellOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        }
      ],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        }
      ],
      "name": "getTokenBalanceForUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        }
      ],
      "name": "getTokenIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        }
      ],
      "name": "hasToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0594c7e7b1133ddbb0c1a5501dfc8a2159f79d9891e530894ae06c9fd17f0ad5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "4696643",
    "logsBloom": "0x
    "blockHash": "0x7cbba902b0eb037f274cc28cd84f0c94bcffd36d2b662cef701ae6093afe71da",
    "transactionHash": "0x0594c7e7b1133ddbb0c1a5501dfc8a2159f79d9891e530894ae06c9fd17f0ad5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x0594c7e7b1133ddbb0c1a5501dfc8a2159f79d9891e530894ae06c9fd17f0ad5",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7cbba902b0eb037f274cc28cd84f0c94bcffd36d2b662cef701ae6093afe71da"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "4696643",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "474c71c8d6e62771db66c202057662a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogAddMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"EC20TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogAddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogBuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogCancelBuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogCancelSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogCreateBuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogCreateSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogDepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogFulfilBuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogFulfilSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogSellToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"}],\"name\":\"addMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"EC20TokenAddress\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"buyTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"name\":\"cancelBuyOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"buyTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"name\":\"cancelSellOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenBalanceForUser\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokens\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"buyTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellTokenSymbol\",\"type\":\"string\"}],\"name\":\"getBuyOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"buyTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellTokenSymbol\",\"type\":\"string\"}],\"name\":\"getMarketIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenOrdersForUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sellTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"buyTokenSymbol\",\"type\":\"string\"}],\"name\":\"getSellOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"}],\"name\":\"getTokenBalanceForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"}],\"name\":\"getTokenIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"}],\"name\":\"hasToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swap.sol\":\"Swap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\n\\r\\ncontract Swap is Ownable {\\r\\n    //custom data structures for implementing features\\r\\n\\r\\n    //To store token details\\r\\n    struct Token {\\r\\n        address contractAddress;\\r\\n        string symbolName;\\r\\n    }\\r\\n\\r\\n    //to store individual order details\\r\\n    struct Order {\\r\\n        uint256 quantity;\\r\\n        uint256 price;\\r\\n        uint256 timestamp;\\r\\n        address user;\\r\\n        bytes2 status;\\r\\n    }\\r\\n\\r\\n    //to store the whole list of specific types of orders for each market\\r\\n    struct OrderBook {\\r\\n        uint256 orderIndex;\\r\\n        mapping(uint256 => Order) orders;\\r\\n        uint256 ordersCount;\\r\\n        uint256[] ordersQueue;\\r\\n    }\\r\\n\\r\\n    //Each market is made of corresponding buy orderbook and sell orderbook\\r\\n    struct Market {\\r\\n        OrderBook buyOrderBook;\\r\\n        OrderBook sellOrderBook;\\r\\n    }\\r\\n\\r\\n    //Mapping for storage\\r\\n\\r\\n    mapping(uint8 => Token) tokenInfo;\\r\\n    mapping(uint8 => IERC20) tokens;\\r\\n    mapping(address => mapping(uint8 => uint256)) tokenBalanceForAddress;\\r\\n    mapping(uint8 => uint8[]) buyToSell; //mapping of market index to the corresponding buy and sell token for that market\\r\\n    mapping(uint8 => Market) ExchangeMarket;\\r\\n    uint8 tokenIndex; //total types of tokens available\\r\\n    uint8 marketIndex; //total types of markets\\r\\n\\r\\n    constructor() {\\r\\n        tokenIndex = 0;\\r\\n        marketIndex = 0;\\r\\n    }\\r\\n\\r\\n    /* EVENTS */\\r\\n\\r\\n    event LogDepositToken(\\r\\n        string symbolName,\\r\\n        address accountAddress,\\r\\n        uint256 amount,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogWithdrawToken(\\r\\n        string symbolName,\\r\\n        address accountAddress,\\r\\n        uint256 amount,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogAddToken(\\r\\n        uint256 tokenIndex,\\r\\n        string symbolName,\\r\\n        address EC20TokenAddress,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogAddMarket(\\r\\n        uint256 marketIndex,\\r\\n        string symbolName,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogBuyToken(\\r\\n        string symbolName1,\\r\\n        string symbolName2,\\r\\n        uint256 price,\\r\\n        uint256 amount,\\r\\n        address buyer,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogSellToken(\\r\\n        string symbolName1,\\r\\n        string symbolName2,\\r\\n        uint256 price,\\r\\n        uint256 amount,\\r\\n        address buyer,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogCreateBuyOrder(\\r\\n        string symbolName1,\\r\\n        string symbolName2,\\r\\n        uint256 price,\\r\\n        uint256 amount,\\r\\n        address buyer,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogCreateSellOrder(\\r\\n        string symbolName1,\\r\\n        string symbolName2,\\r\\n        uint256 price,\\r\\n        uint256 amount,\\r\\n        address seller,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogFulfilBuyOrder(\\r\\n        string symbolName1,\\r\\n        string symbolName2,\\r\\n        uint256 price,\\r\\n        uint256 orderIndex,\\r\\n        uint256 amount,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogFulfilSellOrder(\\r\\n        string symbolName1,\\r\\n        string symbolName2,\\r\\n        uint256 price,\\r\\n        uint256 orderIndex,\\r\\n        uint256 amount,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogCancelBuyOrder(\\r\\n        string symbolName1,\\r\\n        string symbolName2,\\r\\n        uint256 orderIndex,\\r\\n        address buyer,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event LogCancelSellOrder(\\r\\n        string symbolName1,\\r\\n        string symbolName2,\\r\\n        uint256 orderIndex,\\r\\n        address seller,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    /* FUNCTIONS TO PROVIDE FEATURES */\\r\\n\\r\\n    // Owner's AddToken ability\\r\\n    function addToken(string memory symbolName, address EC20TokenAddress)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(!hasToken(symbolName), \\\"Token already exists\\\");\\r\\n        require(tokenIndex + 1 >= tokenIndex, \\\"Token Index overflow\\\");\\r\\n\\r\\n        tokenIndex++;\\r\\n        tokenInfo[tokenIndex].symbolName = symbolName;\\r\\n        tokenInfo[tokenIndex].contractAddress = EC20TokenAddress;\\r\\n        tokens[tokenIndex] = IERC20(tokenInfo[tokenIndex].contractAddress);\\r\\n\\r\\n        if (tokenIndex > 1) {\\r\\n            addMarket(symbolName);\\r\\n        }\\r\\n\\r\\n        emit LogAddToken(\\r\\n            tokenIndex,\\r\\n            symbolName,\\r\\n            EC20TokenAddress,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //A Market is added with combination with previous tokens so all exchanges are available\\r\\n    function addMarket(string memory symbolName) public onlyOwner {\\r\\n        require(marketIndex + 1 >= marketIndex, \\\"Market Index overflow\\\");\\r\\n\\r\\n        for (uint8 i = 1; i < tokenIndex; i++) {\\r\\n            console.log(\\\"Adding market \\\", tokenIndex, i);\\r\\n            marketIndex++;\\r\\n            uint8[] memory toAdd = new uint8[](2);\\r\\n            toAdd[0] = tokenIndex;\\r\\n            toAdd[1] = i;\\r\\n            buyToSell[marketIndex] = toAdd;\\r\\n        }\\r\\n\\r\\n        console.log(\\\"Total markets \\\", marketIndex);\\r\\n\\r\\n        emit LogAddMarket(marketIndex, symbolName, block.timestamp);\\r\\n    }\\r\\n\\r\\n    // Address's Tokens account management - ability to deposit tokens\\r\\n    function depositToken(string memory symbolName, uint256 amount)\\r\\n        public\\r\\n        returns (uint256 tokenBalance)\\r\\n    {\\r\\n        require(hasToken(symbolName), \\\"Token not present\\\");\\r\\n        require(\\r\\n            getTokenBalanceForUser(symbolName) + amount >=\\r\\n                getTokenBalanceForUser(symbolName),\\r\\n            \\\"Amount overflow\\\"\\r\\n        );\\r\\n        uint8 _tokenIndex = getTokenIndex(symbolName);\\r\\n        tokenBalanceForAddress[msg.sender][_tokenIndex] += amount;\\r\\n        // require(\\r\\n        //     tokens[_tokenIndex].transferFrom(\\r\\n        //         msg.sender,\\r\\n        //         address(this),\\r\\n        //         amount\\r\\n        //     ) == true,\\r\\n        //     \\\"Transfer could not happen\\\"\\r\\n        // );\\r\\n        //need to approve\\r\\n        console.log(\\r\\n            \\\"token balance\\\",\\r\\n            tokenBalanceForAddress[msg.sender][_tokenIndex]\\r\\n        );\\r\\n        emit LogDepositToken(symbolName, msg.sender, amount, block.timestamp);\\r\\n        return getTokenBalanceForUser(symbolName);\\r\\n    }\\r\\n\\r\\n    // Address's Tokens account management - ability to withdraw tokens\\r\\n    function withdrawToken(string memory symbolName, uint256 amount)\\r\\n        public\\r\\n        returns (uint256 tokenBalance)\\r\\n    {\\r\\n        require(hasToken(symbolName));\\r\\n        require(amount <= getTokenBalanceForUser(symbolName));\\r\\n\\r\\n        uint8 _tokenIndex = getTokenIndex(symbolName);\\r\\n        tokenBalanceForAddress[msg.sender][_tokenIndex] -= amount;\\r\\n        require(tokens[_tokenIndex].transfer(msg.sender, amount) == true);\\r\\n\\r\\n        emit LogWithdrawToken(symbolName, msg.sender, amount, block.timestamp);\\r\\n        return getTokenBalanceForUser(symbolName);\\r\\n    }\\r\\n\\r\\n    //User submits market buy order\\r\\n    function buyMarketOrder(\\r\\n        string memory buyTokenSymbol,\\r\\n        string memory sellTokenSymbol,\\r\\n        uint256 quantity\\r\\n    ) private {\\r\\n        require(hasToken(buyTokenSymbol));\\r\\n        require(hasToken(sellTokenSymbol));\\r\\n\\r\\n        uint8 _sellTokenIndex = getTokenIndex(sellTokenSymbol);\\r\\n        uint8 _buyTokenIndex = getTokenIndex(buyTokenSymbol);\\r\\n        uint8 _marketIndex = getMarketIndex(buyTokenSymbol, sellTokenSymbol);\\r\\n        require(\\r\\n            ExchangeMarket[_marketIndex].sellOrderBook.ordersCount > 0,\\r\\n            \\\"Cannot place request\\\"\\r\\n        );\\r\\n        uint256 _buy_qty_balance = quantity;\\r\\n        uint256 _currSellOrdersCount = ExchangeMarket[_marketIndex]\\r\\n            .sellOrderBook\\r\\n            .ordersCount;\\r\\n\\r\\n        uint256 _countSellOrderFulfiled = 0;\\r\\n        for (uint256 i = 0; i < _currSellOrdersCount; i++) {\\r\\n            if (_buy_qty_balance == 0) break;\\r\\n\\r\\n            uint256 _orderIndex = ExchangeMarket[_marketIndex]\\r\\n                .sellOrderBook\\r\\n                .ordersQueue[i];\\r\\n            uint256 _orderPrice = ExchangeMarket[_marketIndex]\\r\\n                .sellOrderBook\\r\\n                .orders[_orderIndex]\\r\\n                .price;\\r\\n            uint256 _orderAmount = ExchangeMarket[_marketIndex]\\r\\n                .sellOrderBook\\r\\n                .orders[_orderIndex]\\r\\n                .quantity;\\r\\n            address _orderOwner = ExchangeMarket[_marketIndex]\\r\\n                .sellOrderBook\\r\\n                .orders[_orderIndex]\\r\\n                .user;\\r\\n            if (_buy_qty_balance >= _orderAmount) {\\r\\n                _buy_qty_balance -= _orderAmount;\\r\\n\\r\\n                ExchangeMarket[_marketIndex]\\r\\n                    .sellOrderBook\\r\\n                    .orders[_orderIndex]\\r\\n                    .quantity = 0;\\r\\n                _countSellOrderFulfiled++;\\r\\n                emit LogFulfilSellOrder(\\r\\n                    sellTokenSymbol,\\r\\n                    buyTokenSymbol,\\r\\n                    _orderIndex,\\r\\n                    _orderPrice,\\r\\n                    _orderAmount,\\r\\n                    block.timestamp\\r\\n                );\\r\\n                tokenBalanceForAddress[msg.sender][_sellTokenIndex] -=\\r\\n                    _orderPrice *\\r\\n                    _orderAmount;\\r\\n                tokenBalanceForAddress[_orderOwner][_sellTokenIndex] +=\\r\\n                    _orderPrice *\\r\\n                    _orderAmount;\\r\\n                tokenBalanceForAddress[msg.sender][\\r\\n                    _buyTokenIndex\\r\\n                ] += _orderAmount;\\r\\n            } else {\\r\\n                ExchangeMarket[_marketIndex]\\r\\n                    .sellOrderBook\\r\\n                    .orders[_orderIndex]\\r\\n                    .quantity -= _buy_qty_balance;\\r\\n                emit LogFulfilSellOrder(\\r\\n                    sellTokenSymbol,\\r\\n                    buyTokenSymbol,\\r\\n                    _orderIndex,\\r\\n                    _orderPrice,\\r\\n                    _orderAmount,\\r\\n                    block.timestamp\\r\\n                );\\r\\n\\r\\n                tokenBalanceForAddress[msg.sender][_sellTokenIndex] -=\\r\\n                    _orderPrice *\\r\\n                    _buy_qty_balance;\\r\\n                tokenBalanceForAddress[_orderOwner][_sellTokenIndex] +=\\r\\n                    _orderPrice *\\r\\n                    _buy_qty_balance;\\r\\n                tokenBalanceForAddress[msg.sender][\\r\\n                    _buyTokenIndex\\r\\n                ] += _buy_qty_balance;\\r\\n\\r\\n                _buy_qty_balance = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // update sellOrderBook - ordersBook and ordersCount\\r\\n        uint256 _newSellOrdersCount = _currSellOrdersCount -\\r\\n            _countSellOrderFulfiled;\\r\\n\\r\\n        uint256[] memory _newSellOrdersQueue = new uint256[](\\r\\n            _newSellOrdersCount\\r\\n        );\\r\\n        for (uint256 i = 0; i < _newSellOrdersCount; i++) {\\r\\n            _newSellOrdersQueue[i] = ExchangeMarket[_marketIndex]\\r\\n                .sellOrderBook\\r\\n                .ordersQueue[i + _countSellOrderFulfiled];\\r\\n        }\\r\\n\\r\\n        ExchangeMarket[_marketIndex]\\r\\n            .sellOrderBook\\r\\n            .ordersCount = _newSellOrdersCount;\\r\\n        ExchangeMarket[_marketIndex]\\r\\n            .sellOrderBook\\r\\n            .ordersQueue = _newSellOrdersQueue;\\r\\n    }\\r\\n\\r\\n    function sellMarketOrder(\\r\\n        string memory buyTokenSymbol,\\r\\n        string memory sellTokenSymbol,\\r\\n        uint256 quantity\\r\\n    ) private {\\r\\n        require(hasToken(buyTokenSymbol));\\r\\n        require(hasToken(sellTokenSymbol));\\r\\n\\r\\n        uint8 _sellTokenIndex = getTokenIndex(sellTokenSymbol);\\r\\n        uint8 _buyTokenIndex = getTokenIndex(buyTokenSymbol);\\r\\n        uint8 _marketIndex = getMarketIndex(sellTokenSymbol, buyTokenSymbol);\\r\\n        require(\\r\\n            ExchangeMarket[_marketIndex].buyOrderBook.ordersCount > 0,\\r\\n            \\\"Cannot place request\\\"\\r\\n        );\\r\\n        uint256 _sell_qty_balance = quantity;\\r\\n        uint256 _currBuyOrdersCount = ExchangeMarket[_marketIndex]\\r\\n            .buyOrderBook\\r\\n            .ordersCount;\\r\\n\\r\\n        uint256 _countBuyOrderFulfiled = 0;\\r\\n        for (uint256 i = 0; i < _currBuyOrdersCount; i++) {\\r\\n            if (_sell_qty_balance == 0) break;\\r\\n\\r\\n            uint256 _orderIndex = ExchangeMarket[_marketIndex]\\r\\n                .buyOrderBook\\r\\n                .ordersQueue[i];\\r\\n            uint256 _orderPrice = ExchangeMarket[_marketIndex]\\r\\n                .buyOrderBook\\r\\n                .orders[_orderIndex]\\r\\n                .price;\\r\\n            uint256 _orderAmount = ExchangeMarket[_marketIndex]\\r\\n                .buyOrderBook\\r\\n                .orders[_orderIndex]\\r\\n                .quantity;\\r\\n            address _orderOwner = ExchangeMarket[_marketIndex]\\r\\n                .buyOrderBook\\r\\n                .orders[_orderIndex]\\r\\n                .user;\\r\\n            if (_sell_qty_balance >= _orderAmount) {\\r\\n                _sell_qty_balance -= _orderAmount;\\r\\n\\r\\n                ExchangeMarket[_marketIndex]\\r\\n                    .buyOrderBook\\r\\n                    .orders[_orderIndex]\\r\\n                    .quantity = 0;\\r\\n                _countBuyOrderFulfiled++;\\r\\n                emit LogFulfilBuyOrder(\\r\\n                    sellTokenSymbol,\\r\\n                    buyTokenSymbol,\\r\\n                    _orderIndex,\\r\\n                    _orderPrice,\\r\\n                    _orderAmount,\\r\\n                    block.timestamp\\r\\n                );\\r\\n                tokenBalanceForAddress[msg.sender][_sellTokenIndex] -=\\r\\n                    _orderPrice *\\r\\n                    _orderAmount;\\r\\n                tokenBalanceForAddress[_orderOwner][_sellTokenIndex] +=\\r\\n                    _orderPrice *\\r\\n                    _orderAmount;\\r\\n                tokenBalanceForAddress[msg.sender][\\r\\n                    _buyTokenIndex\\r\\n                ] += _orderAmount;\\r\\n            } else {\\r\\n                ExchangeMarket[_marketIndex]\\r\\n                    .buyOrderBook\\r\\n                    .orders[_orderIndex]\\r\\n                    .quantity -= _sell_qty_balance;\\r\\n                emit LogFulfilBuyOrder(\\r\\n                    sellTokenSymbol,\\r\\n                    buyTokenSymbol,\\r\\n                    _orderIndex,\\r\\n                    _orderPrice,\\r\\n                    _orderAmount,\\r\\n                    block.timestamp\\r\\n                );\\r\\n\\r\\n                tokenBalanceForAddress[msg.sender][_sellTokenIndex] -=\\r\\n                    _orderPrice *\\r\\n                    _sell_qty_balance;\\r\\n                tokenBalanceForAddress[_orderOwner][_sellTokenIndex] +=\\r\\n                    _orderPrice *\\r\\n                    _sell_qty_balance;\\r\\n                tokenBalanceForAddress[msg.sender][\\r\\n                    _buyTokenIndex\\r\\n                ] += _sell_qty_balance;\\r\\n\\r\\n                _sell_qty_balance = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // update sellOrderBook - ordersBook and ordersCount\\r\\n        uint256 _newBuyOrdersCount = _currBuyOrdersCount -\\r\\n            _countBuyOrderFulfiled;\\r\\n\\r\\n        uint256[] memory _newBuyOrdersQueue = new uint256[](_newBuyOrdersCount);\\r\\n        for (uint256 i = 0; i < _newBuyOrdersCount; i++) {\\r\\n            _newBuyOrdersQueue[i] = ExchangeMarket[_marketIndex]\\r\\n                .buyOrderBook\\r\\n                .ordersQueue[i + _countBuyOrderFulfiled];\\r\\n        }\\r\\n\\r\\n        ExchangeMarket[_marketIndex]\\r\\n            .buyOrderBook\\r\\n            .ordersCount = _newBuyOrdersCount;\\r\\n        ExchangeMarket[_marketIndex]\\r\\n            .buyOrderBook\\r\\n            .ordersQueue = _newBuyOrdersQueue;\\r\\n    }\\r\\n\\r\\n    //User submits limit buy order\\r\\n    function createBuyOrder(\\r\\n        string memory buySymbolName,\\r\\n        string memory sellSymbolName,\\r\\n        uint256 price,\\r\\n        uint256 quantity,\\r\\n        address buyer\\r\\n    ) private {\\r\\n        require(hasToken(buySymbolName), \\\"Token not present\\\");\\r\\n        require(hasToken(sellSymbolName), \\\"Token not present\\\");\\r\\n        uint8 _sellTokenIndex = getTokenIndex(sellSymbolName);\\r\\n        require(\\r\\n            tokenBalanceForAddress[msg.sender][_sellTokenIndex] >=\\r\\n                price * quantity,\\r\\n            \\\"Not enough funds\\\"\\r\\n        );\\r\\n\\r\\n        uint8 _marketIndex = getMarketIndex(buySymbolName, sellSymbolName);\\r\\n        uint256 _buy_qty_balance = quantity;\\r\\n\\r\\n        console.log(\\\"In buy order \\\", _marketIndex, _buy_qty_balance);\\r\\n\\r\\n        // fulfil buyOrder by checking against which sell orders can be fulfil\\r\\n        if (ExchangeMarket[_marketIndex].sellOrderBook.ordersCount > 0) {\\r\\n            _buy_qty_balance = fulfilBuyOrder(\\r\\n                buySymbolName,\\r\\n                sellSymbolName,\\r\\n                _buy_qty_balance,\\r\\n                price\\r\\n            );\\r\\n        }\\r\\n        if (_buy_qty_balance > 0) {\\r\\n            (, uint256[] memory prices, ) = getBuyOrderBook(\\r\\n                buySymbolName,\\r\\n                sellSymbolName\\r\\n            );\\r\\n\\r\\n            uint256 _newOrderIndex = ++ExchangeMarket[_marketIndex]\\r\\n                .buyOrderBook\\r\\n                .orderIndex;\\r\\n            uint256[] memory _newOrdersQueue = new uint256[](_newOrderIndex);\\r\\n            bool _isOrderAdded = false;\\r\\n\\r\\n            if (ExchangeMarket[_marketIndex].buyOrderBook.ordersCount == 0) {\\r\\n                _newOrdersQueue[0] = _newOrderIndex;\\r\\n                _isOrderAdded = true;\\r\\n            } else {\\r\\n                uint256 _newOrdersQueueIndex = 0;\\r\\n                for (\\r\\n                    uint256 i = 0;\\r\\n                    i < ExchangeMarket[_marketIndex].buyOrderBook.ordersCount;\\r\\n                    i++\\r\\n                ) {\\r\\n                    if (!_isOrderAdded && price > prices[i]) {\\r\\n                        _newOrdersQueue[\\r\\n                            _newOrdersQueueIndex++\\r\\n                        ] = _newOrderIndex;\\r\\n                        _isOrderAdded = true;\\r\\n                    }\\r\\n                    _newOrdersQueue[_newOrdersQueueIndex++] = ExchangeMarket[\\r\\n                        _marketIndex\\r\\n                    ].buyOrderBook.ordersQueue[i];\\r\\n                }\\r\\n                if (!_isOrderAdded) {\\r\\n                    _newOrdersQueue[_newOrdersQueueIndex] = _newOrderIndex;\\r\\n                }\\r\\n            }\\r\\n            ExchangeMarket[_marketIndex]\\r\\n                .buyOrderBook\\r\\n                .ordersQueue = _newOrdersQueue;\\r\\n            ExchangeMarket[_marketIndex].buyOrderBook.ordersCount++;\\r\\n            ExchangeMarket[_marketIndex].buyOrderBook.orders[\\r\\n                _newOrderIndex\\r\\n            ] = Order({\\r\\n                quantity: _buy_qty_balance,\\r\\n                price: price,\\r\\n                user: msg.sender,\\r\\n                timestamp: block.timestamp,\\r\\n                status: \\\"A\\\"\\r\\n            });\\r\\n        }\\r\\n        tokenBalanceForAddress[msg.sender][_sellTokenIndex] -=\\r\\n            price *\\r\\n            _buy_qty_balance;\\r\\n\\r\\n        // fire event\\r\\n        emit LogCreateBuyOrder(\\r\\n            buySymbolName,\\r\\n            sellSymbolName,\\r\\n            price,\\r\\n            _buy_qty_balance,\\r\\n            buyer,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //Try if buy order can be immediately fulfilled even if partially\\r\\n    function fulfilBuyOrder(\\r\\n        string memory buyTokenSymbol,\\r\\n        string memory sellTokenSymbol,\\r\\n        uint256 _buy_qty_balance,\\r\\n        uint256 price\\r\\n    ) private returns (uint256) {\\r\\n        uint8 _buyTokenIndex = getTokenIndex(buyTokenSymbol);\\r\\n        uint8 _sellTokenIndex = getTokenIndex(sellTokenSymbol);\\r\\n\\r\\n        uint8 _marketIndex = getMarketIndex(buyTokenSymbol, sellTokenSymbol);\\r\\n        uint256 _currSellOrdersCount = ExchangeMarket[_marketIndex]\\r\\n            .sellOrderBook\\r\\n            .ordersCount;\\r\\n\\r\\n        uint256 _countSellOrderFulfiled = 0;\\r\\n        for (uint256 i = 0; i < _currSellOrdersCount; i++) {\\r\\n            if (_buy_qty_balance == 0) break;\\r\\n\\r\\n            uint256 _orderIndex = ExchangeMarket[_marketIndex]\\r\\n                .sellOrderBook\\r\\n                .ordersQueue[i];\\r\\n            uint256 _orderPrice = ExchangeMarket[_marketIndex]\\r\\n                .sellOrderBook\\r\\n                .orders[_orderIndex]\\r\\n                .price;\\r\\n            uint256 _orderAmount = ExchangeMarket[_marketIndex]\\r\\n                .sellOrderBook\\r\\n                .orders[_orderIndex]\\r\\n                .quantity;\\r\\n            address _orderOwner = ExchangeMarket[_marketIndex]\\r\\n                .sellOrderBook\\r\\n                .orders[_orderIndex]\\r\\n                .user;\\r\\n\\r\\n            if (price < _orderPrice) break;\\r\\n\\r\\n            if (_buy_qty_balance >= _orderAmount) {\\r\\n                _buy_qty_balance -= _orderAmount;\\r\\n\\r\\n                ExchangeMarket[_marketIndex]\\r\\n                    .sellOrderBook\\r\\n                    .orders[_orderIndex]\\r\\n                    .quantity = 0;\\r\\n                _countSellOrderFulfiled++;\\r\\n                emit LogFulfilSellOrder(\\r\\n                    sellTokenSymbol,\\r\\n                    buyTokenSymbol,\\r\\n                    _orderIndex,\\r\\n                    price,\\r\\n                    _orderAmount,\\r\\n                    block.timestamp\\r\\n                );\\r\\n\\r\\n                tokenBalanceForAddress[_orderOwner][_sellTokenIndex] +=\\r\\n                    price *\\r\\n                    _orderAmount;\\r\\n                tokenBalanceForAddress[msg.sender][\\r\\n                    _buyTokenIndex\\r\\n                ] += _orderAmount;\\r\\n            } else {\\r\\n                ExchangeMarket[_marketIndex]\\r\\n                    .sellOrderBook\\r\\n                    .orders[_orderIndex]\\r\\n                    .quantity -= _buy_qty_balance;\\r\\n                emit LogFulfilSellOrder(\\r\\n                    sellTokenSymbol,\\r\\n                    buyTokenSymbol,\\r\\n                    _orderIndex,\\r\\n                    price,\\r\\n                    _orderAmount,\\r\\n                    block.timestamp\\r\\n                );\\r\\n\\r\\n                tokenBalanceForAddress[_orderOwner][_sellTokenIndex] +=\\r\\n                    price *\\r\\n                    _buy_qty_balance;\\r\\n                tokenBalanceForAddress[msg.sender][\\r\\n                    _buyTokenIndex\\r\\n                ] += _buy_qty_balance;\\r\\n\\r\\n                _buy_qty_balance = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // update sellOrderBook - ordersBook and ordersCount\\r\\n        uint256 _newSellOrdersCount = _currSellOrdersCount -\\r\\n            _countSellOrderFulfiled;\\r\\n\\r\\n        uint256[] memory _newSellOrdersQueue = new uint256[](\\r\\n            _newSellOrdersCount\\r\\n        );\\r\\n        for (uint256 i = 0; i < _newSellOrdersCount; i++) {\\r\\n            _newSellOrdersQueue[i] = ExchangeMarket[_marketIndex]\\r\\n                .sellOrderBook\\r\\n                .ordersQueue[i + _countSellOrderFulfiled];\\r\\n        }\\r\\n\\r\\n        ExchangeMarket[_marketIndex]\\r\\n            .sellOrderBook\\r\\n            .ordersCount = _newSellOrdersCount;\\r\\n        ExchangeMarket[_marketIndex]\\r\\n            .sellOrderBook\\r\\n            .ordersQueue = _newSellOrdersQueue;\\r\\n\\r\\n        return _buy_qty_balance;\\r\\n    }\\r\\n\\r\\n    function createSellOrder(\\r\\n        string memory sellTokenSymbol,\\r\\n        string memory buyTokenSymbol,\\r\\n        uint256 price,\\r\\n        uint256 quantity,\\r\\n        address seller\\r\\n    ) private {\\r\\n        require(hasToken(sellTokenSymbol));\\r\\n        require(hasToken(buyTokenSymbol));\\r\\n\\r\\n        uint8 _sellTokenIndex = getTokenIndex(sellTokenSymbol);\\r\\n        require(\\r\\n            tokenBalanceForAddress[msg.sender][_sellTokenIndex] >=\\r\\n                price * quantity\\r\\n        );\\r\\n\\r\\n        uint8 _marketIndex = getMarketIndex(buyTokenSymbol, sellTokenSymbol);\\r\\n        uint256 _sell_qty_balance = quantity;\\r\\n\\r\\n        // fulfil sellOrder by checking against which buy orders can be fulfil\\r\\n        if (ExchangeMarket[_marketIndex].buyOrderBook.ordersCount > 0) {\\r\\n            _sell_qty_balance = fulfilSellOrder(\\r\\n                sellTokenSymbol,\\r\\n                buyTokenSymbol,\\r\\n                _sell_qty_balance,\\r\\n                price\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // check if buyOrder is fully fulfiled\\r\\n        if (_sell_qty_balance > 0) {\\r\\n            // Update ordersQueue of OrderBook\\r\\n            (, uint256[] memory prices, ) = getSellOrderBook(\\r\\n                sellTokenSymbol,\\r\\n                buyTokenSymbol\\r\\n            );\\r\\n            uint256 _newOrderIndex = ++ExchangeMarket[_marketIndex]\\r\\n                .sellOrderBook\\r\\n                .orderIndex;\\r\\n            uint256[] memory _newOrdersQueue = new uint256[](_newOrderIndex);\\r\\n\\r\\n            bool _isOrderAdded = false;\\r\\n            if (ExchangeMarket[_marketIndex].sellOrderBook.ordersCount == 0) {\\r\\n                _newOrdersQueue[0] = _newOrderIndex;\\r\\n                _isOrderAdded = true;\\r\\n            } else {\\r\\n                uint256 _newOrdersQueueIndex = 0;\\r\\n                for (\\r\\n                    uint256 _counter = 0;\\r\\n                    _counter <\\r\\n                    ExchangeMarket[_marketIndex].sellOrderBook.ordersCount;\\r\\n                    _counter++\\r\\n                ) {\\r\\n                    if (!_isOrderAdded && price < prices[_counter]) {\\r\\n                        _newOrdersQueue[\\r\\n                            _newOrdersQueueIndex++\\r\\n                        ] = _newOrderIndex;\\r\\n                        _isOrderAdded = true;\\r\\n                    }\\r\\n                    _newOrdersQueue[_newOrdersQueueIndex++] = ExchangeMarket[\\r\\n                        _marketIndex\\r\\n                    ].sellOrderBook.ordersQueue[_counter];\\r\\n                }\\r\\n                // for the case of the price being lower than the lowest price of the orderbook\\r\\n                if (!_isOrderAdded) {\\r\\n                    _newOrdersQueue[_newOrdersQueueIndex] = _newOrderIndex;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // replace existing orders queue is it's not empty\\r\\n            ExchangeMarket[_marketIndex]\\r\\n                .sellOrderBook\\r\\n                .ordersQueue = _newOrdersQueue;\\r\\n\\r\\n            // Add new order to OrderBook\\r\\n            ExchangeMarket[_marketIndex].sellOrderBook.ordersCount++;\\r\\n            ExchangeMarket[_marketIndex].sellOrderBook.orders[\\r\\n                _newOrderIndex\\r\\n            ] = Order({\\r\\n                timestamp: block.timestamp,\\r\\n                price: price,\\r\\n                quantity: _sell_qty_balance,\\r\\n                user: msg.sender,\\r\\n                status: \\\"A\\\"\\r\\n            });\\r\\n\\r\\n            tokenBalanceForAddress[msg.sender][_sellTokenIndex] -=\\r\\n                price *\\r\\n                _sell_qty_balance;\\r\\n\\r\\n            // fire event\\r\\n            emit LogCreateSellOrder(\\r\\n                sellTokenSymbol,\\r\\n                buyTokenSymbol,\\r\\n                price,\\r\\n                _sell_qty_balance,\\r\\n                seller,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function fulfilSellOrder(\\r\\n        string memory sellTokenSymbol, //wrt sell order\\r\\n        string memory buyTokenSymbol,\\r\\n        uint256 _sell_qty_balance,\\r\\n        uint256 price\\r\\n    ) private returns (uint256) {\\r\\n        uint8 _marketIndex = getMarketIndex(buyTokenSymbol, sellTokenSymbol);\\r\\n        uint8 _buyTokenIndex = getTokenIndex(buyTokenSymbol);\\r\\n        uint8 _sellTokenIndex = getTokenIndex(sellTokenSymbol);\\r\\n        uint256 _currBuyOrdersCount = ExchangeMarket[_marketIndex]\\r\\n            .buyOrderBook\\r\\n            .ordersCount;\\r\\n\\r\\n        uint256 _countBuyOrderFulfiled = 0;\\r\\n\\r\\n        // update buyOrderBook - orders\\r\\n        for (uint256 i = 0; i < _currBuyOrdersCount; i++) {\\r\\n            if (_sell_qty_balance == 0) break;\\r\\n\\r\\n            uint256 _orderIndex = ExchangeMarket[_marketIndex]\\r\\n                .buyOrderBook\\r\\n                .ordersQueue[i];\\r\\n            uint256 _orderPrice = ExchangeMarket[_marketIndex]\\r\\n                .buyOrderBook\\r\\n                .orders[_orderIndex]\\r\\n                .price;\\r\\n            uint256 _orderAmount = ExchangeMarket[_marketIndex]\\r\\n                .buyOrderBook\\r\\n                .orders[_orderIndex]\\r\\n                .quantity;\\r\\n            address _orderOwner = ExchangeMarket[_marketIndex]\\r\\n                .buyOrderBook\\r\\n                .orders[_orderIndex]\\r\\n                .user;\\r\\n\\r\\n            if (price > _orderPrice) break;\\r\\n\\r\\n            if (_sell_qty_balance >= _orderAmount) {\\r\\n                _sell_qty_balance -= _orderAmount;\\r\\n\\r\\n                ExchangeMarket[_marketIndex]\\r\\n                    .buyOrderBook\\r\\n                    .orders[_orderIndex]\\r\\n                    .quantity = 0;\\r\\n                _countBuyOrderFulfiled++;\\r\\n                emit LogFulfilBuyOrder(\\r\\n                    sellTokenSymbol,\\r\\n                    buyTokenSymbol,\\r\\n                    _orderIndex,\\r\\n                    price,\\r\\n                    _orderAmount,\\r\\n                    block.timestamp\\r\\n                );\\r\\n\\r\\n                tokenBalanceForAddress[_orderOwner][\\r\\n                    _sellTokenIndex\\r\\n                ] += _orderAmount;\\r\\n                tokenBalanceForAddress[msg.sender][_buyTokenIndex] +=\\r\\n                    price *\\r\\n                    _orderAmount;\\r\\n            } else {\\r\\n                ExchangeMarket[_marketIndex]\\r\\n                    .buyOrderBook\\r\\n                    .orders[_orderIndex]\\r\\n                    .quantity -= _sell_qty_balance;\\r\\n                emit LogFulfilBuyOrder(\\r\\n                    sellTokenSymbol,\\r\\n                    buyTokenSymbol,\\r\\n                    _orderIndex,\\r\\n                    price,\\r\\n                    _sell_qty_balance,\\r\\n                    block.timestamp\\r\\n                );\\r\\n                tokenBalanceForAddress[_orderOwner][\\r\\n                    _sellTokenIndex\\r\\n                ] += _sell_qty_balance;\\r\\n                tokenBalanceForAddress[msg.sender][_buyTokenIndex] +=\\r\\n                    price *\\r\\n                    _sell_qty_balance;\\r\\n\\r\\n                _sell_qty_balance = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // update buyOrderBook - ordersBook and ordersCount\\r\\n        uint256 _newBuyOrdersCount = _currBuyOrdersCount -\\r\\n            _countBuyOrderFulfiled;\\r\\n\\r\\n        uint256[] memory _newBuyOrdersQueue = new uint256[](_newBuyOrdersCount);\\r\\n        for (uint256 i = 0; i < _newBuyOrdersCount; i++) {\\r\\n            _newBuyOrdersQueue[i] = ExchangeMarket[_marketIndex]\\r\\n                .buyOrderBook\\r\\n                .ordersQueue[i + _countBuyOrderFulfiled];\\r\\n        }\\r\\n\\r\\n        ExchangeMarket[_marketIndex]\\r\\n            .buyOrderBook\\r\\n            .ordersCount = _newBuyOrdersCount;\\r\\n        ExchangeMarket[_marketIndex]\\r\\n            .buyOrderBook\\r\\n            .ordersQueue = _newBuyOrdersQueue;\\r\\n\\r\\n        return _sell_qty_balance;\\r\\n    }\\r\\n\\r\\n    //User's ability to cancel orders that were placed\\r\\n    function cancelBuyOrder(\\r\\n        string memory buyTokenSymbol,\\r\\n        string memory sellTokenSymbol,\\r\\n        uint256 orderIndex\\r\\n    ) public {\\r\\n        require(hasToken(buyTokenSymbol));\\r\\n        require(hasToken(sellTokenSymbol));\\r\\n\\r\\n        uint8 _marketIndex = getMarketIndex(buyTokenSymbol, sellTokenSymbol);\\r\\n        uint8 _sellTokenIndex = getTokenIndex(sellTokenSymbol);\\r\\n\\r\\n        require(ExchangeMarket[_marketIndex].buyOrderBook.ordersCount > 0);\\r\\n\\r\\n        // Check order is in OrderBook\\r\\n        // Create new orderQueue\\r\\n        bool _isOrderInBook = false;\\r\\n        uint256 _newOrderQueueIndex = 0;\\r\\n        uint256[] memory _newOrdersQueue = new uint256[](\\r\\n            ExchangeMarket[_marketIndex].buyOrderBook.ordersCount - 1\\r\\n        );\\r\\n        uint256 _price;\\r\\n        uint256 _quantity;\\r\\n\\r\\n        for (\\r\\n            uint256 _orderQueueIndex = 0;\\r\\n            _orderQueueIndex <\\r\\n            ExchangeMarket[_marketIndex].buyOrderBook.ordersCount;\\r\\n            _orderQueueIndex++\\r\\n        ) {\\r\\n            if (\\r\\n                orderIndex ==\\r\\n                ExchangeMarket[_marketIndex].buyOrderBook.ordersQueue[\\r\\n                    _orderQueueIndex\\r\\n                ]\\r\\n            ) {\\r\\n                _isOrderInBook = true;\\r\\n                _price = ExchangeMarket[_marketIndex]\\r\\n                    .buyOrderBook\\r\\n                    .orders[orderIndex]\\r\\n                    .price;\\r\\n                _quantity = ExchangeMarket[_marketIndex]\\r\\n                    .buyOrderBook\\r\\n                    .orders[orderIndex]\\r\\n                    .quantity;\\r\\n            } else {\\r\\n                _newOrdersQueue[_newOrderQueueIndex] = ExchangeMarket[\\r\\n                    _marketIndex\\r\\n                ].buyOrderBook.ordersQueue[_orderQueueIndex];\\r\\n                _newOrderQueueIndex++;\\r\\n            }\\r\\n        }\\r\\n        require(_isOrderInBook);\\r\\n\\r\\n        // Update OrderBook and OrderQueue\\r\\n        ExchangeMarket[_marketIndex].buyOrderBook.ordersCount--;\\r\\n        ExchangeMarket[_marketIndex].buyOrderBook.ordersQueue = _newOrdersQueue;\\r\\n\\r\\n        // refund ether balance back to user's account\\r\\n        tokenBalanceForAddress[msg.sender][_sellTokenIndex] +=\\r\\n            _price *\\r\\n            _quantity;\\r\\n\\r\\n        emit LogCancelBuyOrder(\\r\\n            buyTokenSymbol,\\r\\n            sellTokenSymbol,\\r\\n            orderIndex,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function cancelSellOrder(\\r\\n        string memory buyTokenSymbol,\\r\\n        string memory sellTokenSymbol,\\r\\n        uint256 orderIndex\\r\\n    ) public {\\r\\n        require(hasToken(buyTokenSymbol));\\r\\n        require(hasToken(sellTokenSymbol));\\r\\n\\r\\n        uint8 _marketIndex = getMarketIndex(buyTokenSymbol, sellTokenSymbol);\\r\\n        uint8 _sellTokenIndex = getTokenIndex(sellTokenSymbol);\\r\\n\\r\\n        require(ExchangeMarket[_marketIndex].sellOrderBook.ordersCount > 0);\\r\\n\\r\\n        // Check order is in OrderBook\\r\\n        // Create new orderQueue\\r\\n        bool _isOrderInBook = false;\\r\\n        uint256 _newOrderQueueIndex = 0;\\r\\n        uint256[] memory _newOrdersQueue = new uint256[](\\r\\n            ExchangeMarket[_marketIndex].sellOrderBook.ordersCount - 1\\r\\n        );\\r\\n        uint256 _quantity;\\r\\n\\r\\n        for (\\r\\n            uint256 _orderQueueIndex = 0;\\r\\n            _orderQueueIndex <\\r\\n            ExchangeMarket[_marketIndex].sellOrderBook.ordersCount;\\r\\n            _orderQueueIndex++\\r\\n        ) {\\r\\n            if (\\r\\n                orderIndex ==\\r\\n                ExchangeMarket[_marketIndex].sellOrderBook.ordersQueue[\\r\\n                    _orderQueueIndex\\r\\n                ]\\r\\n            ) {\\r\\n                _isOrderInBook = true;\\r\\n                _quantity = ExchangeMarket[_marketIndex]\\r\\n                    .sellOrderBook\\r\\n                    .orders[orderIndex]\\r\\n                    .quantity;\\r\\n            } else {\\r\\n                _newOrdersQueue[_newOrderQueueIndex] = ExchangeMarket[\\r\\n                    _marketIndex\\r\\n                ].sellOrderBook.ordersQueue[_orderQueueIndex];\\r\\n                _newOrderQueueIndex++;\\r\\n            }\\r\\n        }\\r\\n        require(_isOrderInBook);\\r\\n\\r\\n        // Update OrderBook and OrderQueue\\r\\n        ExchangeMarket[_marketIndex].sellOrderBook.ordersCount--;\\r\\n        ExchangeMarket[_marketIndex]\\r\\n            .sellOrderBook\\r\\n            .ordersQueue = _newOrdersQueue;\\r\\n\\r\\n        // refund token balance back to user's account\\r\\n        tokenBalanceForAddress[msg.sender][_sellTokenIndex] += _quantity;\\r\\n\\r\\n        emit LogCancelSellOrder(\\r\\n            buyTokenSymbol,\\r\\n            sellTokenSymbol,\\r\\n            orderIndex,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* HELPER FUNCTION */\\r\\n\\r\\n    function hasToken(string memory symbolName) public view returns (bool) {\\r\\n        for (uint8 i = 1; i <= tokenIndex; i++) {\\r\\n            if (\\r\\n                keccak256(abi.encodePacked(symbolName)) ==\\r\\n                keccak256(abi.encodePacked(tokenInfo[i].symbolName))\\r\\n            ) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /* GETTER FUNCTIONS */\\r\\n\\r\\n    function getBuyOrderBook(\\r\\n        string memory buyTokenSymbol,\\r\\n        string memory sellTokenSymbol\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory,\\r\\n            uint256[] memory,\\r\\n            uint256[] memory\\r\\n        )\\r\\n    {\\r\\n        uint8 _marketIndex = getMarketIndex(buyTokenSymbol, sellTokenSymbol);\\r\\n\\r\\n        console.log(_marketIndex);\\r\\n\\r\\n        uint256[] memory indexes = new uint256[](\\r\\n            ExchangeMarket[_marketIndex].buyOrderBook.ordersCount\\r\\n        );\\r\\n        uint256[] memory prices = new uint256[](\\r\\n            ExchangeMarket[_marketIndex].buyOrderBook.ordersCount\\r\\n        );\\r\\n        uint256[] memory quantity = new uint256[](\\r\\n            ExchangeMarket[_marketIndex].buyOrderBook.ordersCount\\r\\n        );\\r\\n\\r\\n        for (\\r\\n            uint256 i = 1;\\r\\n            i <= ExchangeMarket[_marketIndex].buyOrderBook.ordersCount;\\r\\n            i++\\r\\n        ) {\\r\\n            Order memory _order = ExchangeMarket[_marketIndex]\\r\\n                .buyOrderBook\\r\\n                .orders[\\r\\n                    ExchangeMarket[_marketIndex].buyOrderBook.ordersQueue[i - 1]\\r\\n                ];\\r\\n            indexes[i - 1] = ExchangeMarket[_marketIndex]\\r\\n                .buyOrderBook\\r\\n                .ordersQueue[i - 1];\\r\\n            prices[i - 1] = _order.price;\\r\\n            quantity[i - 1] = _order.quantity;\\r\\n        }\\r\\n\\r\\n        return (indexes, prices, quantity);\\r\\n    }\\r\\n\\r\\n    function getSellOrderBook(\\r\\n        string memory sellTokenSymbol,\\r\\n        string memory buyTokenSymbol\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory,\\r\\n            uint256[] memory,\\r\\n            uint256[] memory\\r\\n        )\\r\\n    {\\r\\n        uint8 _marketIndex = getMarketIndex(sellTokenSymbol, buyTokenSymbol);\\r\\n\\r\\n        uint256[] memory indexes = new uint256[](\\r\\n            ExchangeMarket[_marketIndex].sellOrderBook.ordersCount\\r\\n        );\\r\\n        uint256[] memory prices = new uint256[](\\r\\n            ExchangeMarket[_marketIndex].sellOrderBook.ordersCount\\r\\n        );\\r\\n        uint256[] memory quantity = new uint256[](\\r\\n            ExchangeMarket[_marketIndex].sellOrderBook.ordersCount\\r\\n        );\\r\\n\\r\\n        for (\\r\\n            uint256 i = 1;\\r\\n            i <= ExchangeMarket[_marketIndex].sellOrderBook.ordersCount;\\r\\n            i++\\r\\n        ) {\\r\\n            Order memory _order = ExchangeMarket[_marketIndex]\\r\\n                .sellOrderBook\\r\\n                .orders[\\r\\n                    ExchangeMarket[_marketIndex].sellOrderBook.ordersQueue[\\r\\n                        i - 1\\r\\n                    ]\\r\\n                ];\\r\\n            indexes[i - 1] = ExchangeMarket[_marketIndex]\\r\\n                .sellOrderBook\\r\\n                .ordersQueue[i - 1];\\r\\n            prices[i - 1] = _order.price;\\r\\n            quantity[i - 1] = _order.quantity;\\r\\n        }\\r\\n\\r\\n        return (indexes, prices, quantity);\\r\\n    }\\r\\n\\r\\n    function getTokenAddress(string memory symbolName)\\r\\n        public\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        require(hasToken(symbolName));\\r\\n\\r\\n        uint8 _tokenIndex = getTokenIndex(symbolName);\\r\\n\\r\\n        return tokenInfo[_tokenIndex].contractAddress;\\r\\n    }\\r\\n\\r\\n    function getTokenIndex(string memory symbolName)\\r\\n        public\\r\\n        view\\r\\n        returns (uint8)\\r\\n    {\\r\\n        for (uint8 i = 1; i <= tokenIndex; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(symbolName)) ==\\r\\n                keccak256(bytes(tokenInfo[i].symbolName))\\r\\n            ) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getMarketIndex(\\r\\n        string memory buyTokenSymbol,\\r\\n        string memory sellTokenSymbol\\r\\n    ) public view returns (uint8) {\\r\\n        for (uint8 i = 1; i <= marketIndex; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(buyTokenSymbol)) ==\\r\\n                keccak256(bytes(tokenInfo[buyToSell[i][0]].symbolName)) &&\\r\\n                keccak256(bytes(sellTokenSymbol)) ==\\r\\n                keccak256(bytes(tokenInfo[buyToSell[i][1]].symbolName))\\r\\n            ) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getTokenBalanceForUser(string memory symbolName)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return tokenBalanceForAddress[msg.sender][getTokenIndex(symbolName)];\\r\\n    }\\r\\n\\r\\n    function getAllTokenBalanceForUser()\\r\\n        public\\r\\n        view\\r\\n        returns (string[] memory, uint256[] memory)\\r\\n    {\\r\\n        string[] memory symbolNames = new string[](tokenIndex);\\r\\n        uint256[] memory balances = new uint256[](tokenIndex);\\r\\n        for (uint8 i = 1; i <= tokenIndex; i++) {\\r\\n            console.log(\\r\\n                \\\"balance \\\",\\r\\n                getTokenBalanceForUser(tokenInfo[i].symbolName)\\r\\n            );\\r\\n            symbolNames[i - 1] = tokenInfo[i].symbolName;\\r\\n            balances[i - 1] = getTokenBalanceForUser(tokenInfo[i].symbolName);\\r\\n        }\\r\\n        return (symbolNames, balances);\\r\\n    }\\r\\n\\r\\n    //orderIndex, buy/sell tokensymbol, buy or sell, price, quantity\\r\\n    function getOpenOrdersForUser()\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory, /*orderIndex*/\\r\\n            string[] memory, /*buy/sell tokensymbol*/\\r\\n            string[] memory, /*buy/sell tokensymbol*/\\r\\n            string[] memory, /*buy or sell*/\\r\\n            uint256[] memory, /*price*/\\r\\n            uint256[] memory, /*quantity*/\\r\\n            uint8\\r\\n        )\\r\\n    {\\r\\n        uint256[] memory orderIndexes = new uint256[](20); /*orderIndex*/\\r\\n        string[] memory buySymbols = new string[](20); /*buy/sell tokensymbol*/\\r\\n        string[] memory sellSymbols = new string[](20); /*buy/sell tokensymbol*/\\r\\n        string[] memory types = new string[](20); /*buy or sell*/\\r\\n        uint256[] memory prices = new uint256[](20); /*price*/\\r\\n        uint256[] memory quantities = new uint256[](20); /*quantity*/\\r\\n        uint8 count = 0;\\r\\n\\r\\n        for (uint8 i = 1; i <= marketIndex; i++) {\\r\\n            for (\\r\\n                uint256 j = 1;\\r\\n                j <= ExchangeMarket[i].sellOrderBook.ordersCount;\\r\\n                j++\\r\\n            ) {\\r\\n                Order memory _order = ExchangeMarket[i].sellOrderBook.orders[\\r\\n                    ExchangeMarket[i].sellOrderBook.ordersQueue[j - 1]\\r\\n                ];\\r\\n                if (_order.user == msg.sender) {\\r\\n                    count++;\\r\\n                    orderIndexes[count - 1] = ExchangeMarket[i]\\r\\n                        .sellOrderBook\\r\\n                        .ordersQueue[j - 1];\\r\\n                    buySymbols[count - 1] = tokenInfo[buyToSell[i][0]]\\r\\n                        .symbolName;\\r\\n                    sellSymbols[count - 1] = tokenInfo[buyToSell[i][1]]\\r\\n                        .symbolName;\\r\\n                    types[count - 1] = \\\"sell\\\";\\r\\n                    prices[count - 1] = _order.price;\\r\\n                    quantities[count - 1] = _order.quantity;\\r\\n                }\\r\\n            }\\r\\n            for (\\r\\n                uint256 j = 1;\\r\\n                j <= ExchangeMarket[i].buyOrderBook.ordersCount;\\r\\n                j++\\r\\n            ) {\\r\\n                Order memory _order = ExchangeMarket[i].buyOrderBook.orders[\\r\\n                    ExchangeMarket[i].buyOrderBook.ordersQueue[j - 1]\\r\\n                ];\\r\\n                console.log(\\\"open orders\\\", _order.price);\\r\\n                if (_order.user == msg.sender) {\\r\\n                    count++;\\r\\n                    orderIndexes[count - 1] = ExchangeMarket[i]\\r\\n                        .buyOrderBook\\r\\n                        .ordersQueue[j - 1];\\r\\n                    buySymbols[count - 1] = tokenInfo[buyToSell[i][0]]\\r\\n                        .symbolName;\\r\\n                    sellSymbols[count - 1] = tokenInfo[buyToSell[i][1]]\\r\\n                        .symbolName;\\r\\n                    types[count - 1] = \\\"buy\\\";\\r\\n                    prices[count - 1] = _order.price;\\r\\n                    quantities[count - 1] = _order.quantity;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (\\r\\n            orderIndexes,\\r\\n            buySymbols,\\r\\n            sellSymbols,\\r\\n            types,\\r\\n            prices,\\r\\n            quantities,\\r\\n            count\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getAllTokens()\\r\\n        public\\r\\n        view\\r\\n        returns (string[] memory, address[] memory)\\r\\n    {\\r\\n        string[] memory symbolNames = new string[](tokenIndex);\\r\\n        address[] memory addresses = new address[](tokenIndex);\\r\\n\\r\\n        for (uint8 i = 1; i <= tokenIndex; i++) {\\r\\n            symbolNames[i - 1] = tokenInfo[i].symbolName;\\r\\n            addresses[i - 1] = tokenInfo[i].contractAddress;\\r\\n        }\\r\\n\\r\\n        return (symbolNames, addresses);\\r\\n    }\\r\\n\\r\\n    function getMarketIndex() public view returns (uint8) {\\r\\n        return marketIndex;\\r\\n    }\\r\\n\\r\\n    function getAllMarkets()\\r\\n        public\\r\\n        view\\r\\n        returns (string[] memory, string[] memory)\\r\\n    {\\r\\n        string[] memory buySymbols = new string[](marketIndex);\\r\\n        string[] memory sellSymbols = new string[](marketIndex);\\r\\n        console.log(\\\"markets number \\\", marketIndex);\\r\\n\\r\\n        for (uint8 i = 1; i <= marketIndex; i++) {\\r\\n            console.log(\\r\\n                \\\"Market \\\",\\r\\n                tokenInfo[2].symbolName,\\r\\n                tokenInfo[1].symbolName\\r\\n            );\\r\\n            buySymbols[i - 1] = tokenInfo[buyToSell[i][0]].symbolName;\\r\\n            sellSymbols[i - 1] = tokenInfo[buyToSell[i][1]].symbolName;\\r\\n        }\\r\\n\\r\\n        return (buySymbols, sellSymbols);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd2c592df6804a3643088c877cc62f728e1848e3a0ead515e1930b88633b3f36f\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80638ea00818116100b8578063c40912361161007c578063c409123614610355578063c97a413a14610385578063cb803ceb146103b5578063cedd00b1146103d3578063dc1d94c514610403578063f2fde38b1461042757610137565b80638ea008181461029c5780638fb2742c146102cc578063a8854979146102fe578063b0772d0b1461031a578063b0b22c2c1461033957610137565b80635f968767116100ff5780635f968767146101f55780636409d48d14610225578063715018a6146102445780638883b10c1461024e5780638da5cb5b1461027e57610137565b806320977b491461013c5780632a5c792a1461015857806333ad57e41461017757806342fe6695146101a75780634bb5d232146101c3575b600080fd5b61015660048036038101906101519190613f3a565b610443565b005b6101606107c1565b60405161016e9291906141f6565b60405180910390f35b610191600480360381019061018c919061422d565b610a35565b60405161019e9190614298565b60405180910390f35b6101c160048036038101906101bc91906142b3565b610c3b565b005b6101dd60048036038101906101d891906142fc565b610f06565b6040516101ec93929190614432565b60405180910390f35b61020f600480360381019061020a91906142b3565b6112d9565b60405161021c919061449a565b60405180910390f35b61022d611362565b60405161023b9291906144b5565b60405180910390f35b61024c611703565b005b610268600480360381019061026391906142b3565b611717565b6040516102759190614298565b60405180910390f35b61028661177f565b60405161029391906144fb565b60405180910390f35b6102b660048036038101906102b191906142b3565b6117a8565b6040516102c39190614531565b60405180910390f35b6102e660048036038101906102e191906142fc565b611862565b6040516102f593929190614432565b60405180910390f35b61031860048036038101906103139190613f3a565b611c41565b005b610322611f7f565b60405161033092919061454c565b60405180910390f35b610353600480360381019061034e91906145af565b61249c565b005b61036f600480360381019061036a91906142b3565b612762565b60405161037c91906144fb565b60405180910390f35b61039f600480360381019061039a919061422d565b6127c8565b6040516103ac9190614298565b60405180910390f35b6103bd612981565b6040516103ca919061449a565b60405180910390f35b6103ed60048036038101906103e891906142fc565b612998565b6040516103fa919061449a565b60405180910390f35b61040b612afb565b60405161041e979695949392919061460b565b60405180910390f35b610441600480360381019061043c91906146a4565b613830565b005b61044c836117a8565b61045557600080fd5b61045e826117a8565b61046757600080fd5b60006104738484612998565b90506000610480846112d9565b90506000600560008460ff1660ff16815260200190815260200160002060000160020154116104ae57600080fd5b60008060006001600560008760ff1660ff168152602001908152602001600020600001600201546104df9190614700565b67ffffffffffffffff8111156104f8576104f7613dd9565b5b6040519080825280602002602001820160405280156105265781602001602082028036833780820191505090505b50905060008060005b600560008960ff1660ff1681526020019081526020016000206000016002015481101561068a57600560008960ff1660ff168152602001908152602001600020600001600301818154811061058757610586614734565b5b9060005260206000200154890361060d5760019550600560008960ff1660ff16815260200190815260200160002060000160010160008a8152602001908152602001600020600101549250600560008960ff1660ff16815260200190815260200160002060000160010160008a8152602001908152602001600020600001549150610677565b600560008960ff1660ff168152602001908152602001600020600001600301818154811061063e5761063d614734565b5b906000526020600020015484868151811061065c5761065b614734565b5b602002602001018181525050848061067390614763565b9550505b808061068290614763565b91505061052f565b508461069557600080fd5b600560008860ff1660ff16815260200190815260200160002060000160020160008154809291906106c5906147ab565b919050555082600560008960ff1660ff16815260200190815260200160002060000160030190805190602001906106fd929190613c99565b50808261070a91906147d4565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008860ff1660ff168152602001908152602001600020600082825461076f9190614816565b925050819055507f9a61c2300d2dd6e5e6c4d4860206d72177034372cf558a91f14cce7c88fb38dc8a8a8a33426040516107ad959493929190614894565b60405180910390a150505050505050505050565b6060806000600660009054906101000a900460ff1660ff1667ffffffffffffffff8111156107f2576107f1613dd9565b5b60405190808252806020026020018201604052801561082557816020015b60608152602001906001900390816108105790505b5090506000600660009054906101000a900460ff1660ff1667ffffffffffffffff81111561085657610855613dd9565b5b6040519080825280602002602001820160405280156108845781602001602082028036833780820191505090505b5090506000600190505b600660009054906101000a900460ff1660ff168160ff1611610a2857600160008260ff1660ff16815260200190815260200160002060010180546108d190614924565b80601f01602080910402602001604051908101604052809291908181526020018280546108fd90614924565b801561094a5780601f1061091f5761010080835404028352916020019161094a565b820191906000526020600020905b81548152906001019060200180831161092d57829003601f168201915b50505050508360018361095d9190614955565b60ff168151811061097157610970614734565b5b6020026020010181905250600160008260ff1660ff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826001836109c79190614955565b60ff16815181106109db576109da614734565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080610a209061498a565b91505061088e565b5081819350935050509091565b6000610a40836117a8565b610a7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a76906149ff565b60405180910390fd5b610a8883611717565b82610a9285611717565b610a9c9190614816565b1015610add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad490614a6b565b60405180910390fd5b6000610ae8846112d9565b905082600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360ff1660ff1681526020019081526020016000206000828254610b509190614816565b92505081905550610bec6040518060400160405280600d81526020017f746f6b656e2062616c616e636500000000000000000000000000000000000000815250600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460ff1660ff168152602001908152602001600020546138b3565b7f4dbc01516018d27f28f32ddd20595428f662140f1fff79b754484578ac27fc1984338542604051610c219493929190614a8b565b60405180910390a1610c3284611717565b91505092915050565b610c4361394f565b600660019054906101000a900460ff1660ff166001600660019054906101000a900460ff16610c729190614ad7565b60ff161015610cb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cad90614b58565b60405180910390fd5b6000600190505b600660009054906101000a900460ff1660ff168160ff161015610e6757610d2f6040518060400160405280600e81526020017f416464696e67206d61726b657420000000000000000000000000000000000000815250600660009054906101000a900460ff1660ff168360ff166139cd565b6006600181819054906101000a900460ff1680929190610d4e9061498a565b91906101000a81548160ff021916908360ff160217905550506000600267ffffffffffffffff811115610d8457610d83613dd9565b5b604051908082528060200260200182016040528015610db25781602001602082028036833780820191505090505b509050600660009054906101000a900460ff1681600081518110610dd957610dd8614734565b5b602002602001019060ff16908160ff16815250508181600181518110610e0257610e01614734565b5b602002602001019060ff16908160ff16815250508060046000600660019054906101000a900460ff1660ff1660ff1681526020019081526020016000209080519060200190610e52929190613ce6565b50508080610e5f9061498a565b915050610cbd565b50610eb96040518060400160405280600e81526020017f546f74616c206d61726b65747320000000000000000000000000000000000000815250600660019054906101000a900460ff1660ff166138b3565b7f8877b3481be0c4a9d298c35f0e291fd2f61a153f7d22354a14c44c8266a5a754600660019054906101000a900460ff168242604051610efb93929190614bb3565b60405180910390a150565b60608060606000610f178686612998565b90506000600560008360ff1660ff1681526020019081526020016000206004016002015467ffffffffffffffff811115610f5457610f53613dd9565b5b604051908082528060200260200182016040528015610f825781602001602082028036833780820191505090505b5090506000600560008460ff1660ff1681526020019081526020016000206004016002015467ffffffffffffffff811115610fc057610fbf613dd9565b5b604051908082528060200260200182016040528015610fee5781602001602082028036833780820191505090505b5090506000600560008560ff1660ff1681526020019081526020016000206004016002015467ffffffffffffffff81111561102c5761102b613dd9565b5b60405190808252806020026020018201604052801561105a5781602001602082028036833780820191505090505b5090506000600190505b600560008660ff1660ff1681526020019081526020016000206004016002015481116112c4576000600560008760ff1660ff1681526020019081526020016000206004016001016000600560008960ff1660ff1681526020019081526020016000206004016003016001856110d99190614700565b815481106110ea576110e9614734565b5b906000526020600020015481526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460f01b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250509050600560008760ff1660ff1681526020019081526020016000206004016003016001836112099190614700565b8154811061121a57611219614734565b5b9060005260206000200154856001846112339190614700565b8151811061124457611243614734565b5b6020026020010181815250508060200151846001846112639190614700565b8151811061127457611273614734565b5b6020026020010181815250508060000151836001846112939190614700565b815181106112a4576112a3614734565b5b6020026020010181815250505080806112bc90614763565b915050611064565b50828282965096509650505050509250925092565b600080600190505b600660009054906101000a900460ff1660ff168160ff161161135757600160008260ff1660ff1681526020019081526020016000206001016040516113269190614c94565b6040518091039020838051906020012003611344578091505061135d565b808061134f9061498a565b9150506112e1565b50600090505b919050565b6060806000600660009054906101000a900460ff1660ff1667ffffffffffffffff81111561139357611392613dd9565b5b6040519080825280602002602001820160405280156113c657816020015b60608152602001906001900390816113b15790505b5090506000600660009054906101000a900460ff1660ff1667ffffffffffffffff8111156113f7576113f6613dd9565b5b6040519080825280602002602001820160405280156114255781602001602082028036833780820191505090505b5090506000600190505b600660009054906101000a900460ff1660ff168160ff16116116f6576115366040518060400160405280600881526020017f62616c616e636520000000000000000000000000000000000000000000000000815250611531600160008560ff1660ff16815260200190815260200160002060010180546114ae90614924565b80601f01602080910402602001604051908101604052809291908181526020018280546114da90614924565b80156115275780601f106114fc57610100808354040283529160200191611527565b820191906000526020600020905b81548152906001019060200180831161150a57829003601f168201915b5050505050611717565b6138b3565b600160008260ff1660ff168152602001908152602001600020600101805461155d90614924565b80601f016020809104026020016040519081016040528092919081815260200182805461158990614924565b80156115d65780601f106115ab576101008083540402835291602001916115d6565b820191906000526020600020905b8154815290600101906020018083116115b957829003601f168201915b5050505050836001836115e99190614955565b60ff16815181106115fd576115fc614734565b5b60200260200101819052506116b5600160008360ff1660ff168152602001908152602001600020600101805461163290614924565b80601f016020809104026020016040519081016040528092919081815260200182805461165e90614924565b80156116ab5780601f10611680576101008083540402835291602001916116ab565b820191906000526020600020905b81548152906001019060200180831161168e57829003601f168201915b5050505050611717565b826001836116c39190614955565b60ff16815181106116d7576116d6614734565b5b60200260200101818152505080806116ee9061498a565b91505061142f565b5081819350935050509091565b61170b61394f565b6117156000613a6c565b565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000611763846112d9565b60ff1660ff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600190505b600660009054906101000a900460ff1660ff168160ff161161185757600160008260ff1660ff1681526020019081526020016000206001016040516020016117f89190614d4e565b604051602081830303815290604052805190602001208360405160200161181f9190614d96565b604051602081830303815290604052805190602001200361184457600191505061185d565b808061184f9061498a565b9150506117b0565b50600090505b919050565b606080606060006118738686612998565b90506118818160ff16613b30565b6000600560008360ff1660ff1681526020019081526020016000206000016002015467ffffffffffffffff8111156118bc576118bb613dd9565b5b6040519080825280602002602001820160405280156118ea5781602001602082028036833780820191505090505b5090506000600560008460ff1660ff1681526020019081526020016000206000016002015467ffffffffffffffff81111561192857611927613dd9565b5b6040519080825280602002602001820160405280156119565781602001602082028036833780820191505090505b5090506000600560008560ff1660ff1681526020019081526020016000206000016002015467ffffffffffffffff81111561199457611993613dd9565b5b6040519080825280602002602001820160405280156119c25781602001602082028036833780820191505090505b5090506000600190505b600560008660ff1660ff168152602001908152602001600020600001600201548111611c2c576000600560008760ff1660ff1681526020019081526020016000206000016001016000600560008960ff1660ff168152602001908152602001600020600001600301600185611a419190614700565b81548110611a5257611a51614734565b5b906000526020600020015481526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460f01b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250509050600560008760ff1660ff168152602001908152602001600020600001600301600183611b719190614700565b81548110611b8257611b81614734565b5b906000526020600020015485600184611b9b9190614700565b81518110611bac57611bab614734565b5b602002602001018181525050806020015184600184611bcb9190614700565b81518110611bdc57611bdb614734565b5b602002602001018181525050806000015183600184611bfb9190614700565b81518110611c0c57611c0b614734565b5b602002602001018181525050508080611c2490614763565b9150506119cc565b50828282965096509650505050509250925092565b611c4a836117a8565b611c5357600080fd5b611c5c826117a8565b611c6557600080fd5b6000611c718484612998565b90506000611c7e846112d9565b90506000600560008460ff1660ff1681526020019081526020016000206004016002015411611cac57600080fd5b60008060006001600560008760ff1660ff16815260200190815260200160002060040160020154611cdd9190614700565b67ffffffffffffffff811115611cf657611cf5613dd9565b5b604051908082528060200260200182016040528015611d245781602001602082028036833780820191505090505b509050600080600090505b600560008860ff1660ff16815260200190815260200160002060040160020154811015611e5457600560008860ff1660ff1681526020019081526020016000206004016003018181548110611d8757611d86614734565b5b90600052602060002001548803611dd75760019450600560008860ff1660ff1681526020019081526020016000206004016001016000898152602001908152602001600020600001549150611e41565b600560008860ff1660ff1681526020019081526020016000206004016003018181548110611e0857611e07614734565b5b9060005260206000200154838581518110611e2657611e25614734565b5b6020026020010181815250508380611e3d90614763565b9450505b8080611e4c90614763565b915050611d2f565b5083611e5f57600080fd5b600560008760ff1660ff1681526020019081526020016000206004016002016000815480929190611e8f906147ab565b919050555081600560008860ff1660ff1681526020019081526020016000206004016003019080519060200190611ec7929190613c99565b5080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008760ff1660ff1681526020019081526020016000206000828254611f2e9190614816565b925050819055507fc6a6416b415d06b5cea3ff17e447ceb010fa4d602523d17f25cfbc54656a28d08989893342604051611f6c959493929190614894565b60405180910390a1505050505050505050565b6060806000600660019054906101000a900460ff1660ff1667ffffffffffffffff811115611fb057611faf613dd9565b5b604051908082528060200260200182016040528015611fe357816020015b6060815260200190600190039081611fce5790505b5090506000600660019054906101000a900460ff1660ff1667ffffffffffffffff81111561201457612013613dd9565b5b60405190808252806020026020018201604052801561204757816020015b60608152602001906001900390816120325790505b50905061209b6040518060400160405280600f81526020017f6d61726b657473206e756d626572200000000000000000000000000000000000815250600660019054906101000a900460ff1660ff166138b3565b6000600190505b600660019054906101000a900460ff1660ff168160ff161161248f576122426040518060400160405280600781526020017f4d61726b6574200000000000000000000000000000000000000000000000000081525060016000600260ff168152602001908152602001600020600101805461211c90614924565b80601f016020809104026020016040519081016040528092919081815260200182805461214890614924565b80156121955780601f1061216a57610100808354040283529160200191612195565b820191906000526020600020905b81548152906001019060200180831161217857829003601f168201915b505050505060016000600160ff16815260200190815260200160002060010180546121bf90614924565b80601f01602080910402602001604051908101604052809291908181526020018280546121eb90614924565b80156122385780601f1061220d57610100808354040283529160200191612238565b820191906000526020600020905b81548152906001019060200180831161221b57829003601f168201915b5050505050613bc9565b60016000600460008460ff1660ff16815260200190815260200160002060008154811061227257612271614734565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff1660ff16815260200190815260200160002060010180546122b490614924565b80601f01602080910402602001604051908101604052809291908181526020018280546122e090614924565b801561232d5780601f106123025761010080835404028352916020019161232d565b820191906000526020600020905b81548152906001019060200180831161231057829003601f168201915b5050505050836001836123409190614955565b60ff168151811061235457612353614734565b5b602002602001018190525060016000600460008460ff1660ff16815260200190815260200160002060018154811061238f5761238e614734565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff1660ff16815260200190815260200160002060010180546123d190614924565b80601f01602080910402602001604051908101604052809291908181526020018280546123fd90614924565b801561244a5780601f1061241f5761010080835404028352916020019161244a565b820191906000526020600020905b81548152906001019060200180831161242d57829003601f168201915b50505050508260018361245d9190614955565b60ff168151811061247157612470614734565b5b602002602001018190525080806124879061498a565b9150506120a2565b5081819350935050509091565b6124a461394f565b6124ad826117a8565b156124ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e490614df9565b60405180910390fd5b600660009054906101000a900460ff1660ff166001600660009054906101000a900460ff1661251c9190614ad7565b60ff161015612560576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255790614e65565b60405180910390fd5b6006600081819054906101000a900460ff168092919061257f9061498a565b91906101000a81548160ff021916908360ff160217905550508160016000600660009054906101000a900460ff1660ff1660ff16815260200190815260200160002060010190816125d09190615012565b508060016000600660009054906101000a900460ff1660ff1660ff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016000600660009054906101000a900460ff1660ff1660ff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660026000600660009054906101000a900460ff1660ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600660009054906101000a900460ff1660ff1611156127125761271182610c3b565b5b7f1723c709bc871c32c420d3c2d2837cdd4bef40c574088c1d055e1f4f609d2377600660009054906101000a900460ff1683834260405161275694939291906150e4565b60405180910390a15050565b600061276d826117a8565b61277657600080fd5b6000612781836112d9565b9050600160008260ff1660ff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b60006127d3836117a8565b6127dc57600080fd5b6127e583611717565b8211156127f157600080fd5b60006127fc846112d9565b905082600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360ff1660ff16815260200190815260200160002060008282546128649190614700565b9250508190555060011515600260008360ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b81526004016128e3929190615130565b6020604051808303816000875af1158015612902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129269190615185565b15151461293257600080fd5b7fc0a144e0d9af86fa328820e6f7f9e66f6e2a7248ff06a92aa13dc1f01e26934f843385426040516129679493929190614a8b565b60405180910390a161297884611717565b91505092915050565b6000600660019054906101000a900460ff16905090565b600080600190505b600660019054906101000a900460ff1660ff168160ff1611612aef5760016000600460008460ff1660ff1681526020019081526020016000206000815481106129ec576129eb614734565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff1660ff168152602001908152602001600020600101604051612a309190614c94565b60405180910390208480519060200120148015612ace575060016000600460008460ff1660ff168152602001908152602001600020600181548110612a7857612a77614734565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff1660ff168152602001908152602001600020600101604051612abc9190614c94565b60405180910390208380519060200120145b15612adc5780915050612af5565b8080612ae79061498a565b9150506129a0565b50600090505b92915050565b606080606080606080600080601467ffffffffffffffff811115612b2257612b21613dd9565b5b604051908082528060200260200182016040528015612b505781602001602082028036833780820191505090505b5090506000601467ffffffffffffffff811115612b7057612b6f613dd9565b5b604051908082528060200260200182016040528015612ba357816020015b6060815260200190600190039081612b8e5790505b5090506000601467ffffffffffffffff811115612bc357612bc2613dd9565b5b604051908082528060200260200182016040528015612bf657816020015b6060815260200190600190039081612be15790505b5090506000601467ffffffffffffffff811115612c1657612c15613dd9565b5b604051908082528060200260200182016040528015612c4957816020015b6060815260200190600190039081612c345790505b5090506000601467ffffffffffffffff811115612c6957612c68613dd9565b5b604051908082528060200260200182016040528015612c975781602001602082028036833780820191505090505b5090506000601467ffffffffffffffff811115612cb757612cb6613dd9565b5b604051908082528060200260200182016040528015612ce55781602001602082028036833780820191505090505b509050600080600190505b600660019054906101000a900460ff1660ff168160ff161161380a576000600190505b600560008360ff1660ff16815260200190815260200160002060040160020154811161325f576000600560008460ff1660ff1681526020019081526020016000206004016001016000600560008660ff1660ff168152602001908152602001600020600401600301600185612d889190614700565b81548110612d9957612d98614734565b5b906000526020600020015481526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460f01b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505090503373ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff160361324b578380612ece9061498a565b945050600560008460ff1660ff168152602001908152602001600020600401600301600183612efd9190614700565b81548110612f0e57612f0d614734565b5b90600052602060002001548a600186612f279190614955565b60ff1681518110612f3b57612f3a614734565b5b60200260200101818152505060016000600460008660ff1660ff168152602001908152602001600020600081548110612f7757612f76614734565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff1660ff1681526020019081526020016000206001018054612fb990614924565b80601f0160208091040260200160405190810160405280929190818152602001828054612fe590614924565b80156130325780601f1061300757610100808354040283529160200191613032565b820191906000526020600020905b81548152906001019060200180831161301557829003601f168201915b5050505050896001866130459190614955565b60ff168151811061305957613058614734565b5b602002602001018190525060016000600460008660ff1660ff16815260200190815260200160002060018154811061309457613093614734565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff1660ff16815260200190815260200160002060010180546130d690614924565b80601f016020809104026020016040519081016040528092919081815260200182805461310290614924565b801561314f5780601f106131245761010080835404028352916020019161314f565b820191906000526020600020905b81548152906001019060200180831161313257829003601f168201915b5050505050886001866131629190614955565b60ff168151811061317657613175614734565b5b60200260200101819052506040518060400160405280600481526020017f73656c6c00000000000000000000000000000000000000000000000000000000815250876001866131c59190614955565b60ff16815181106131d9576131d8614734565b5b60200260200101819052508060200151866001866131f79190614955565b60ff168151811061320b5761320a614734565b5b60200260200101818152505080600001518560018661322a9190614955565b60ff168151811061323e5761323d614734565b5b6020026020010181815250505b50808061325790614763565b915050612d13565b506000600190505b600560008360ff1660ff1681526020019081526020016000206000016002015481116137f6576000600560008460ff1660ff1681526020019081526020016000206000016001016000600560008660ff1660ff1681526020019081526020016000206000016003016001856132dc9190614700565b815481106132ed576132ec614734565b5b906000526020600020015481526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460f01b7dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505090506134236040518060400160405280600b81526020017f6f70656e206f726465727300000000000000000000000000000000000000000081525082602001516138b3565b3373ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff16036137e25783806134659061498a565b945050600560008460ff1660ff1681526020019081526020016000206000016003016001836134949190614700565b815481106134a5576134a4614734565b5b90600052602060002001548a6001866134be9190614955565b60ff16815181106134d2576134d1614734565b5b60200260200101818152505060016000600460008660ff1660ff16815260200190815260200160002060008154811061350e5761350d614734565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff1660ff168152602001908152602001600020600101805461355090614924565b80601f016020809104026020016040519081016040528092919081815260200182805461357c90614924565b80156135c95780601f1061359e576101008083540402835291602001916135c9565b820191906000526020600020905b8154815290600101906020018083116135ac57829003601f168201915b5050505050896001866135dc9190614955565b60ff16815181106135f0576135ef614734565b5b602002602001018190525060016000600460008660ff1660ff16815260200190815260200160002060018154811061362b5761362a614734565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff1660ff168152602001908152602001600020600101805461366d90614924565b80601f016020809104026020016040519081016040528092919081815260200182805461369990614924565b80156136e65780601f106136bb576101008083540402835291602001916136e6565b820191906000526020600020905b8154815290600101906020018083116136c957829003601f168201915b5050505050886001866136f99190614955565b60ff168151811061370d5761370c614734565b5b60200260200101819052506040518060400160405280600381526020017f62757900000000000000000000000000000000000000000000000000000000008152508760018661375c9190614955565b60ff16815181106137705761376f614734565b5b602002602001018190525080602001518660018661378e9190614955565b60ff16815181106137a2576137a1614734565b5b6020026020010181815250508060000151856001866137c19190614955565b60ff16815181106137d5576137d4614734565b5b6020026020010181815250505b5080806137ee90614763565b915050613267565b5080806138029061498a565b915050612cf0565b50868686868686869d509d509d509d509d509d509d505050505050505090919293949596565b61383861394f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036138a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161389e90615224565b60405180910390fd5b6138b081613a6c565b50565b61394b82826040516024016138c9929190615244565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613c68565b5050565b613957613c91565b73ffffffffffffffffffffffffffffffffffffffff1661397561177f565b73ffffffffffffffffffffffffffffffffffffffff16146139cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139c2906152c0565b60405180910390fd5b565b613a678383836040516024016139e5939291906152e0565b6040516020818303038152906040527fca47c4eb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613c68565b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b613bc681604051602401613b449190614298565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613c68565b50565b613c63838383604051602401613be19392919061531e565b6040516020818303038152906040527f2ced7cef000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613c68565b505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600033905090565b828054828255906000526020600020908101928215613cd5579160200282015b82811115613cd4578251825591602001919060010190613cb9565b5b509050613ce29190613d8d565b5090565b82805482825590600052602060002090601f01602090048101928215613d7c5791602002820160005b83821115613d4d57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302613d0f565b8015613d7a5782816101000a81549060ff0219169055600101602081600001049283019260010302613d4d565b505b509050613d899190613d8d565b5090565b5b80821115613da6576000816000905550600101613d8e565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613e1182613dc8565b810181811067ffffffffffffffff82111715613e3057613e2f613dd9565b5b80604052505050565b6000613e43613daa565b9050613e4f8282613e08565b919050565b600067ffffffffffffffff821115613e6f57613e6e613dd9565b5b613e7882613dc8565b9050602081019050919050565b82818337600083830152505050565b6000613ea7613ea284613e54565b613e39565b905082815260208101848484011115613ec357613ec2613dc3565b5b613ece848285613e85565b509392505050565b600082601f830112613eeb57613eea613dbe565b5b8135613efb848260208601613e94565b91505092915050565b6000819050919050565b613f1781613f04565b8114613f2257600080fd5b50565b600081359050613f3481613f0e565b92915050565b600080600060608486031215613f5357613f52613db4565b5b600084013567ffffffffffffffff811115613f7157613f70613db9565b5b613f7d86828701613ed6565b935050602084013567ffffffffffffffff811115613f9e57613f9d613db9565b5b613faa86828701613ed6565b9250506040613fbb86828701613f25565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561402b578082015181840152602081019050614010565b60008484015250505050565b600061404282613ff1565b61404c8185613ffc565b935061405c81856020860161400d565b61406581613dc8565b840191505092915050565b600061407c8383614037565b905092915050565b6000602082019050919050565b600061409c82613fc5565b6140a68185613fd0565b9350836020820285016140b885613fe1565b8060005b858110156140f457848403895281516140d58582614070565b94506140e083614084565b925060208a019950506001810190506140bc565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061415d82614132565b9050919050565b61416d81614152565b82525050565b600061417f8383614164565b60208301905092915050565b6000602082019050919050565b60006141a382614106565b6141ad8185614111565b93506141b883614122565b8060005b838110156141e95781516141d08882614173565b97506141db8361418b565b9250506001810190506141bc565b5085935050505092915050565b600060408201905081810360008301526142108185614091565b905081810360208301526142248184614198565b90509392505050565b6000806040838503121561424457614243613db4565b5b600083013567ffffffffffffffff81111561426257614261613db9565b5b61426e85828601613ed6565b925050602061427f85828601613f25565b9150509250929050565b61429281613f04565b82525050565b60006020820190506142ad6000830184614289565b92915050565b6000602082840312156142c9576142c8613db4565b5b600082013567ffffffffffffffff8111156142e7576142e6613db9565b5b6142f384828501613ed6565b91505092915050565b6000806040838503121561431357614312613db4565b5b600083013567ffffffffffffffff81111561433157614330613db9565b5b61433d85828601613ed6565b925050602083013567ffffffffffffffff81111561435e5761435d613db9565b5b61436a85828601613ed6565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6143a981613f04565b82525050565b60006143bb83836143a0565b60208301905092915050565b6000602082019050919050565b60006143df82614374565b6143e9818561437f565b93506143f483614390565b8060005b8381101561442557815161440c88826143af565b9750614417836143c7565b9250506001810190506143f8565b5085935050505092915050565b6000606082019050818103600083015261444c81866143d4565b9050818103602083015261446081856143d4565b9050818103604083015261447481846143d4565b9050949350505050565b600060ff82169050919050565b6144948161447e565b82525050565b60006020820190506144af600083018461448b565b92915050565b600060408201905081810360008301526144cf8185614091565b905081810360208301526144e381846143d4565b90509392505050565b6144f581614152565b82525050565b600060208201905061451060008301846144ec565b92915050565b60008115159050919050565b61452b81614516565b82525050565b60006020820190506145466000830184614522565b92915050565b600060408201905081810360008301526145668185614091565b9050818103602083015261457a8184614091565b90509392505050565b61458c81614152565b811461459757600080fd5b50565b6000813590506145a981614583565b92915050565b600080604083850312156145c6576145c5613db4565b5b600083013567ffffffffffffffff8111156145e4576145e3613db9565b5b6145f085828601613ed6565b92505060206146018582860161459a565b9150509250929050565b600060e0820190508181036000830152614625818a6143d4565b905081810360208301526146398189614091565b9050818103604083015261464d8188614091565b905081810360608301526146618187614091565b9050818103608083015261467581866143d4565b905081810360a083015261468981856143d4565b905061469860c083018461448b565b98975050505050505050565b6000602082840312156146ba576146b9613db4565b5b60006146c88482850161459a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061470b82613f04565b915061471683613f04565b925082820390508181111561472e5761472d6146d1565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061476e82613f04565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036147a05761479f6146d1565b5b600182019050919050565b60006147b682613f04565b9150600082036147c9576147c86146d1565b5b600182039050919050565b60006147df82613f04565b91506147ea83613f04565b92508282026147f881613f04565b9150828204841483151761480f5761480e6146d1565b5b5092915050565b600061482182613f04565b915061482c83613f04565b9250828201905080821115614844576148436146d1565b5b92915050565b600082825260208201905092915050565b600061486682613ff1565b614870818561484a565b935061488081856020860161400d565b61488981613dc8565b840191505092915050565b600060a08201905081810360008301526148ae818861485b565b905081810360208301526148c2818761485b565b90506148d16040830186614289565b6148de60608301856144ec565b6148eb6080830184614289565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061493c57607f821691505b60208210810361494f5761494e6148f5565b5b50919050565b60006149608261447e565b915061496b8361447e565b9250828203905060ff811115614984576149836146d1565b5b92915050565b60006149958261447e565b915060ff82036149a8576149a76146d1565b5b600182019050919050565b7f546f6b656e206e6f742070726573656e74000000000000000000000000000000600082015250565b60006149e960118361484a565b91506149f4826149b3565b602082019050919050565b60006020820190508181036000830152614a18816149dc565b9050919050565b7f416d6f756e74206f766572666c6f770000000000000000000000000000000000600082015250565b6000614a55600f8361484a565b9150614a6082614a1f565b602082019050919050565b60006020820190508181036000830152614a8481614a48565b9050919050565b60006080820190508181036000830152614aa5818761485b565b9050614ab460208301866144ec565b614ac16040830185614289565b614ace6060830184614289565b95945050505050565b6000614ae28261447e565b9150614aed8361447e565b9250828201905060ff811115614b0657614b056146d1565b5b92915050565b7f4d61726b657420496e646578206f766572666c6f770000000000000000000000600082015250565b6000614b4260158361484a565b9150614b4d82614b0c565b602082019050919050565b60006020820190508181036000830152614b7181614b35565b9050919050565b6000819050919050565b6000614b9d614b98614b938461447e565b614b78565b613f04565b9050919050565b614bad81614b82565b82525050565b6000606082019050614bc86000830186614ba4565b8181036020830152614bda818561485b565b9050614be96040830184614289565b949350505050565b600081905092915050565b60008190508160005260206000209050919050565b60008154614c1e81614924565b614c288186614bf1565b94506001821660008114614c435760018114614c5857614c8b565b60ff1983168652811515820286019350614c8b565b614c6185614bfc565b60005b83811015614c8357815481890152600182019150602081019050614c64565b838801955050505b50505092915050565b6000614ca08284614c11565b915081905092915050565b600081905092915050565b60008190508160005260206000209050919050565b60008154614cd881614924565b614ce28186614cab565b94506001821660008114614cfd5760018114614d1257614d45565b60ff1983168652811515820286019350614d45565b614d1b85614cb6565b60005b83811015614d3d57815481890152600182019150602081019050614d1e565b838801955050505b50505092915050565b6000614d5a8284614ccb565b915081905092915050565b6000614d7082613ff1565b614d7a8185614cab565b9350614d8a81856020860161400d565b80840191505092915050565b6000614da28284614d65565b915081905092915050565b7f546f6b656e20616c726561647920657869737473000000000000000000000000600082015250565b6000614de360148361484a565b9150614dee82614dad565b602082019050919050565b60006020820190508181036000830152614e1281614dd6565b9050919050565b7f546f6b656e20496e646578206f766572666c6f77000000000000000000000000600082015250565b6000614e4f60148361484a565b9150614e5a82614e19565b602082019050919050565b60006020820190508181036000830152614e7e81614e42565b9050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614ed27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614e95565b614edc8683614e95565b95508019841693508086168417925050509392505050565b6000614f0f614f0a614f0584613f04565b614b78565b613f04565b9050919050565b6000819050919050565b614f2983614ef4565b614f3d614f3582614f16565b848454614ea2565b825550505050565b600090565b614f52614f45565b614f5d818484614f20565b505050565b5b81811015614f8157614f76600082614f4a565b600181019050614f63565b5050565b601f821115614fc657614f9781614cb6565b614fa084614e85565b81016020851015614faf578190505b614fc3614fbb85614e85565b830182614f62565b50505b505050565b600082821c905092915050565b6000614fe960001984600802614fcb565b1980831691505092915050565b60006150028383614fd8565b9150826002028217905092915050565b61501b82613ff1565b67ffffffffffffffff81111561503457615033613dd9565b5b61503e8254614924565b615049828285614f85565b600060209050601f83116001811461507c576000841561506a578287015190505b6150748582614ff6565b8655506150dc565b601f19841661508a86614cb6565b60005b828110156150b25784890151825560018201915060208501945060208101905061508d565b868310156150cf57848901516150cb601f891682614fd8565b8355505b6001600288020188555050505b505050505050565b60006080820190506150f96000830187614ba4565b818103602083015261510b818661485b565b905061511a60408301856144ec565b6151276060830184614289565b95945050505050565b600060408201905061514560008301856144ec565b6151526020830184614289565b9392505050565b61516281614516565b811461516d57600080fd5b50565b60008151905061517f81615159565b92915050565b60006020828403121561519b5761519a613db4565b5b60006151a984828501615170565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061520e60268361484a565b9150615219826151b2565b604082019050919050565b6000602082019050818103600083015261523d81615201565b9050919050565b6000604082019050818103600083015261525e818561485b565b905061526d6020830184614289565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006152aa60208361484a565b91506152b582615274565b602082019050919050565b600060208201905081810360008301526152d98161529d565b9050919050565b600060608201905081810360008301526152fa818661485b565b90506153096020830185614289565b6153166040830184614289565b949350505050565b60006060820190508181036000830152615338818661485b565b9050818103602083015261534c818561485b565b90508181036040830152615360818461485b565b905094935050505056fea2646970667358221220108d17e3830be84c6f49b182d7cd51f5e2be245a84410fea79eeb287a726da6d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Swap.sol:Swap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 263,
        "contract": "contracts/Swap.sol:Swap",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint8,t_struct(Token)227_storage)"
      },
      {
        "astId": 268,
        "contract": "contracts/Swap.sol:Swap",
        "label": "tokens",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint8,t_contract(IERC20)193)"
      },
      {
        "astId": 274,
        "contract": "contracts/Swap.sol:Swap",
        "label": "tokenBalanceForAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 279,
        "contract": "contracts/Swap.sol:Swap",
        "label": "buyToSell",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint8,t_array(t_uint8)dyn_storage)"
      },
      {
        "astId": 284,
        "contract": "contracts/Swap.sol:Swap",
        "label": "ExchangeMarket",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint8,t_struct(Market)258_storage)"
      },
      {
        "astId": 286,
        "contract": "contracts/Swap.sol:Swap",
        "label": "tokenIndex",
        "offset": 0,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 288,
        "contract": "contracts/Swap.sol:Swap",
        "label": "marketIndex",
        "offset": 1,
        "slot": "6",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bytes2": {
        "encoding": "inplace",
        "label": "bytes2",
        "numberOfBytes": "2"
      },
      "t_contract(IERC20)193": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Order)238_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Swap.Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)238_storage"
      },
      "t_mapping(t_uint8,t_array(t_uint8)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint8[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint8)dyn_storage"
      },
      "t_mapping(t_uint8,t_contract(IERC20)193)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => contract IERC20)",
        "numberOfBytes": "32",
        "value": "t_contract(IERC20)193"
      },
      "t_mapping(t_uint8,t_struct(Market)258_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct Swap.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)258_storage"
      },
      "t_mapping(t_uint8,t_struct(Token)227_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct Swap.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)227_storage"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Market)258_storage": {
        "encoding": "inplace",
        "label": "struct Swap.Market",
        "members": [
          {
            "astId": 254,
            "contract": "contracts/Swap.sol:Swap",
            "label": "buyOrderBook",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(OrderBook)251_storage"
          },
          {
            "astId": 257,
            "contract": "contracts/Swap.sol:Swap",
            "label": "sellOrderBook",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(OrderBook)251_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Order)238_storage": {
        "encoding": "inplace",
        "label": "struct Swap.Order",
        "members": [
          {
            "astId": 229,
            "contract": "contracts/Swap.sol:Swap",
            "label": "quantity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 231,
            "contract": "contracts/Swap.sol:Swap",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 233,
            "contract": "contracts/Swap.sol:Swap",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 235,
            "contract": "contracts/Swap.sol:Swap",
            "label": "user",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 237,
            "contract": "contracts/Swap.sol:Swap",
            "label": "status",
            "offset": 20,
            "slot": "3",
            "type": "t_bytes2"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(OrderBook)251_storage": {
        "encoding": "inplace",
        "label": "struct Swap.OrderBook",
        "members": [
          {
            "astId": 240,
            "contract": "contracts/Swap.sol:Swap",
            "label": "orderIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 245,
            "contract": "contracts/Swap.sol:Swap",
            "label": "orders",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(Order)238_storage)"
          },
          {
            "astId": 247,
            "contract": "contracts/Swap.sol:Swap",
            "label": "ordersCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 250,
            "contract": "contracts/Swap.sol:Swap",
            "label": "ordersQueue",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Token)227_storage": {
        "encoding": "inplace",
        "label": "struct Swap.Token",
        "members": [
          {
            "astId": 224,
            "contract": "contracts/Swap.sol:Swap",
            "label": "contractAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 226,
            "contract": "contracts/Swap.sol:Swap",
            "label": "symbolName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}