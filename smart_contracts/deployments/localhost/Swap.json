{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogAddMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "EC20TokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogAddToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogBuyToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogCancelBuyOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogCancelSellOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogCreateBuyOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogCreateSellOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogDepositToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "typeOfOrder",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "symbolName1",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "symbolName2",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogFulfillOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogSellToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogWithdrawToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        }
      ],
      "name": "addMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "EC20TokenAddress",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "typeOfOrder",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "buyTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sellTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "orderIndex",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "typeOfOrder",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "buySymbolName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sellSymbolName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllMarkets",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokenBalanceForUser",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokens",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "buyTokenIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "sellTokenIndex",
          "type": "uint8"
        }
      ],
      "name": "getMarketIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "buyTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sellTokenSymbol",
          "type": "string"
        }
      ],
      "name": "getMarketIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "buyTokenIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "sellTokenIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "type_of_order",
          "type": "uint8"
        }
      ],
      "name": "getOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        }
      ],
      "name": "getTokenBalanceForUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        }
      ],
      "name": "getTokenIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        }
      ],
      "name": "hasToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x41d025e8d40dc3f928ca9b242e7212de06c568e25cacb24a32cb9cbaba948dcd",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "4807970",
    "logsBloom": "0x
    "blockHash": "0x658546ed3694b224dda2c793b0a63139991a984d38a5213b9419373c701627c6",
    "transactionHash": "0x41d025e8d40dc3f928ca9b242e7212de06c568e25cacb24a32cb9cbaba948dcd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x41d025e8d40dc3f928ca9b242e7212de06c568e25cacb24a32cb9cbaba948dcd",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x658546ed3694b224dda2c793b0a63139991a984d38a5213b9419373c701627c6"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "4807970",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d428a8e1fa10a72d6ce300caa15aad52",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogAddMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"EC20TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogAddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogBuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogCancelBuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogCancelSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogCreateBuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogCreateSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogDepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"typeOfOrder\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"symbolName1\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"symbolName2\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogFulfillOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogSellToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"}],\"name\":\"addMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"EC20TokenAddress\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"typeOfOrder\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"buyTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"typeOfOrder\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"buySymbolName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellSymbolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenBalanceForUser\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokens\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"buyTokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTokenIndex\",\"type\":\"uint8\"}],\"name\":\"getMarketIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"buyTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellTokenSymbol\",\"type\":\"string\"}],\"name\":\"getMarketIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"buyTokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"type_of_order\",\"type\":\"uint8\"}],\"name\":\"getOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"}],\"name\":\"getTokenBalanceForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"}],\"name\":\"getTokenIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"}],\"name\":\"hasToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swap.sol\":\"Swap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\n\\r\\ncontract Swap is Ownable {\\r\\n    //custom data structures for implementing features\\r\\n\\r\\n    //To store token details\\r\\n    struct Token {\\r\\n        address contractAddress;\\r\\n        string symbolName;\\r\\n    }\\r\\n\\r\\n    //to store individual order details\\r\\n    struct Order {\\r\\n        uint256 quantity;\\r\\n        uint256 price;\\r\\n        uint256 timestamp;\\r\\n        address user;\\r\\n    }\\r\\n\\r\\n    //to store the whole list of specific types of orders for each market\\r\\n    struct OrderBook {\\r\\n        uint256 orderIndex;\\r\\n        mapping(uint256 => Order) orders;\\r\\n        uint256 ordersCount;\\r\\n        uint256[] ordersQueue;\\r\\n    }\\r\\n\\r\\n    //Each market is made of corresponding buy orderbook and sell orderbook\\r\\n    struct Market {\\r\\n        mapping(uint8 => OrderBook) Orders;\\r\\n    }\\r\\n\\r\\n    //Mapping for storage\\r\\n\\r\\n    mapping(uint8 => Token) tokenInfo;\\r\\n    mapping(address => mapping(uint8 => uint256)) tokenBalanceForAddress;\\r\\n    mapping(uint8 => uint8[]) buyToSell; //mapping of market index to the corresponding buy and sell token for that market\\r\\n    mapping(uint8 => Market) ExchangeMarket;\\r\\n    uint8 tokenIndex; //total types of tokens available\\r\\n    uint8 marketIndex; //total types of markets\\r\\n\\r\\n    constructor() {\\r\\n        tokenIndex = 0;\\r\\n        marketIndex = 0;\\r\\n    }\\r\\n\\r\\n    /* EVENTS */\\r\\n\\r\\n    event LogDepositToken(\\r\\n        string symbolName,\\r\\n        address accountAddress,\\r\\n        uint256 amount,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogWithdrawToken(\\r\\n        string symbolName,\\r\\n        address accountAddress,\\r\\n        uint256 amount,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogAddToken(\\r\\n        uint256 tokenIndex,\\r\\n        string symbolName,\\r\\n        address EC20TokenAddress,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogAddMarket(\\r\\n        uint256 marketIndex,\\r\\n        string symbolName,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogBuyToken(\\r\\n        string symbolName1,\\r\\n        string symbolName2,\\r\\n        uint256 price,\\r\\n        uint256 amount,\\r\\n        address buyer,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogSellToken(\\r\\n        string symbolName1,\\r\\n        string symbolName2,\\r\\n        uint256 price,\\r\\n        uint256 amount,\\r\\n        address buyer,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogCreateBuyOrder(\\r\\n        string symbolName1,\\r\\n        string symbolName2,\\r\\n        uint256 price,\\r\\n        uint256 amount,\\r\\n        address buyer,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogCreateSellOrder(\\r\\n        string symbolName1,\\r\\n        string symbolName2,\\r\\n        uint256 price,\\r\\n        uint256 amount,\\r\\n        address seller,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogFulfillOrder(\\r\\n        uint8 typeOfOrder,\\r\\n        uint8 symbolName1,\\r\\n        uint8 symbolName2,\\r\\n        uint256 price,\\r\\n        uint256 amount,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event LogCancelBuyOrder(\\r\\n        string symbolName1,\\r\\n        string symbolName2,\\r\\n        uint256 orderIndex,\\r\\n        address buyer,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event LogCancelSellOrder(\\r\\n        string symbolName1,\\r\\n        string symbolName2,\\r\\n        uint256 orderIndex,\\r\\n        address seller,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    /* FUNCTIONS TO PROVIDE FEATURES */\\r\\n\\r\\n    // Owner's AddToken ability\\r\\n    function addToken(string memory symbolName, address EC20TokenAddress)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(!hasToken(symbolName), \\\"Token already exists\\\");\\r\\n        require(tokenIndex + 1 >= tokenIndex, \\\"Token Index overflow\\\");\\r\\n\\r\\n        tokenIndex++;\\r\\n        tokenInfo[tokenIndex].symbolName = symbolName;\\r\\n        tokenInfo[tokenIndex].contractAddress = EC20TokenAddress;\\r\\n\\r\\n        if (tokenIndex > 1) {\\r\\n            addMarket(symbolName);\\r\\n        }\\r\\n\\r\\n        emit LogAddToken(\\r\\n            tokenIndex,\\r\\n            symbolName,\\r\\n            EC20TokenAddress,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //A Market is added with combination with previous tokens so all exchanges are available\\r\\n    function addMarket(string memory symbolName) public onlyOwner {\\r\\n        require(marketIndex + 1 >= marketIndex, \\\"Market Index overflow\\\");\\r\\n\\r\\n        for (uint8 i = 1; i < tokenIndex; i++) {\\r\\n            console.log(\\\"Adding market \\\", tokenIndex, i);\\r\\n            marketIndex++;\\r\\n            uint8[] memory toAdd = new uint8[](2);\\r\\n            toAdd[0] = tokenIndex;\\r\\n            toAdd[1] = i;\\r\\n            buyToSell[marketIndex] = toAdd;\\r\\n        }\\r\\n\\r\\n        console.log(\\\"Total markets \\\", marketIndex);\\r\\n\\r\\n        emit LogAddMarket(marketIndex, symbolName, block.timestamp);\\r\\n    }\\r\\n\\r\\n    // Address's Tokens account management - ability to deposit tokens\\r\\n    function depositToken(string memory symbolName, uint256 amount)\\r\\n        public\\r\\n        returns (uint256 tokenBalance)\\r\\n    {\\r\\n        require(hasToken(symbolName), \\\"Token not present\\\");\\r\\n        require(\\r\\n            getTokenBalanceForUser(symbolName) + amount >=\\r\\n                getTokenBalanceForUser(symbolName),\\r\\n            \\\"Amount overflow\\\"\\r\\n        );\\r\\n        uint8 _tokenIndex = getTokenIndex(symbolName);\\r\\n        tokenBalanceForAddress[msg.sender][_tokenIndex] += amount;\\r\\n        // IERC20 token = IERC20(tokenInfo[_tokenIndex].contractAddress);\\r\\n        //require(\\r\\n        //     tokens[_tokenIndex].transferFrom(\\r\\n        //         msg.sender,\\r\\n        //         address(this),\\r\\n        //         amount\\r\\n        //     ) == true,\\r\\n        //     \\\"Transfer could not happen\\\"\\r\\n        // );\\r\\n        //need to approve\\r\\n        console.log(\\r\\n            \\\"token balance\\\",\\r\\n            tokenBalanceForAddress[msg.sender][_tokenIndex]\\r\\n        );\\r\\n        emit LogDepositToken(symbolName, msg.sender, amount, block.timestamp);\\r\\n        return getTokenBalanceForUser(symbolName);\\r\\n    }\\r\\n\\r\\n    // Address's Tokens account management - ability to withdraw tokens\\r\\n    function withdrawToken(string memory symbolName, uint256 amount)\\r\\n        public\\r\\n        returns (uint256 tokenBalance)\\r\\n    {\\r\\n        require(hasToken(symbolName));\\r\\n        require(amount <= getTokenBalanceForUser(symbolName));\\r\\n\\r\\n        uint8 _tokenIndex = getTokenIndex(symbolName);\\r\\n        tokenBalanceForAddress[msg.sender][_tokenIndex] -= amount;\\r\\n        IERC20 token = IERC20(tokenInfo[_tokenIndex].contractAddress);\\r\\n        require(token.transfer(msg.sender, amount) == true);\\r\\n\\r\\n        emit LogWithdrawToken(symbolName, msg.sender, amount, block.timestamp);\\r\\n        return getTokenBalanceForUser(symbolName);\\r\\n    }\\r\\n\\r\\n    //User submits market buy order\\r\\n    // function buyMarketOrder(\\r\\n    //     string memory buyTokenSymbol,\\r\\n    //     string memory sellTokenSymbol,\\r\\n    //     uint256 quantity\\r\\n    // ) private {\\r\\n    //     require(hasToken(buyTokenSymbol));\\r\\n    //     require(hasToken(sellTokenSymbol));\\r\\n\\r\\n    //     uint8 _sellTokenIndex = getTokenIndex(sellTokenSymbol);\\r\\n    //     uint8 _buyTokenIndex = getTokenIndex(buyTokenSymbol);\\r\\n    //     uint8 _marketIndex = getMarketIndex(buyTokenSymbol, sellTokenSymbol);\\r\\n    //     require(\\r\\n    //         ExchangeMarket[_marketIndex][typeOfOrder].ordersCount > 0,\\r\\n    //         \\\"Cannot place request\\\"\\r\\n    //     );\\r\\n    //     uint256 _buy_qty_balance = quantity;\\r\\n    //     uint256 _currSellOrdersCount = ExchangeMarket[_marketIndex]\\r\\n    //         [typeOfOrder]\\r\\n    //         .ordersCount;\\r\\n\\r\\n    //     uint256 _countSellOrderFulfiled = 0;\\r\\n    //     for (uint256 i = 0; i < _currSellOrdersCount; i++) {\\r\\n    //         if (_buy_qty_balance == 0) break;\\r\\n\\r\\n    //         uint256 _orderIndex = ExchangeMarket[_marketIndex]\\r\\n    //             [typeOfOrder]\\r\\n    //             .ordersQueue[i];\\r\\n    //         uint256 _orderPrice = ExchangeMarket[_marketIndex]\\r\\n    //             [typeOfOrder]\\r\\n    //             .orders[_orderIndex]\\r\\n    //             .price;\\r\\n    //         uint256 _orderAmount = ExchangeMarket[_marketIndex]\\r\\n    //             [typeOfOrder]\\r\\n    //             .orders[_orderIndex]\\r\\n    //             .quantity;\\r\\n    //         address _orderOwner = ExchangeMarket[_marketIndex]\\r\\n    //             [typeOfOrder]\\r\\n    //             .orders[_orderIndex]\\r\\n    //             .user;\\r\\n    //         if (_buy_qty_balance >= _orderAmount) {\\r\\n    //             _buy_qty_balance -= _orderAmount;\\r\\n\\r\\n    //             ExchangeMarket[_marketIndex]\\r\\n    //                 [typeOfOrder]\\r\\n    //                 .orders[_orderIndex]\\r\\n    //                 .quantity = 0;\\r\\n    //             _countSellOrderFulfiled++;\\r\\n    //             emit LogFulfilSellOrder(\\r\\n    //                 sellTokenSymbol,\\r\\n    //                 buyTokenSymbol,\\r\\n    //                 _orderPrice,\\r\\n    //                 _orderAmount,\\r\\n    //                 block.timestamp\\r\\n    //             );\\r\\n    //             tokenBalanceForAddress[msg.sender][_sellTokenIndex] -=\\r\\n    //                 _orderPrice *\\r\\n    //                 _orderAmount;\\r\\n    //             tokenBalanceForAddress[_orderOwner][_sellTokenIndex] +=\\r\\n    //                 _orderPrice *\\r\\n    //                 _orderAmount;\\r\\n    //             tokenBalanceForAddress[msg.sender][\\r\\n    //                 _buyTokenIndex\\r\\n    //             ] += _orderAmount;\\r\\n    //         } else {\\r\\n    //             ExchangeMarket[_marketIndex]\\r\\n    //                 [typeOfOrder]\\r\\n    //                 .orders[_orderIndex]\\r\\n    //                 .quantity -= _buy_qty_balance;\\r\\n    //             emit LogFulfilSellOrder(\\r\\n    //                 sellTokenSymbol,\\r\\n    //                 buyTokenSymbol,\\r\\n    //                 _orderPrice,\\r\\n    //                 _orderAmount,\\r\\n    //                 block.timestamp\\r\\n    //             );\\r\\n\\r\\n    //             tokenBalanceForAddress[msg.sender][_sellTokenIndex] -=\\r\\n    //                 _orderPrice *\\r\\n    //                 _buy_qty_balance;\\r\\n    //             tokenBalanceForAddress[_orderOwner][_sellTokenIndex] +=\\r\\n    //                 _orderPrice *\\r\\n    //                 _buy_qty_balance;\\r\\n    //             tokenBalanceForAddress[msg.sender][\\r\\n    //                 _buyTokenIndex\\r\\n    //             ] += _buy_qty_balance;\\r\\n\\r\\n    //             _buy_qty_balance = 0;\\r\\n    //         }\\r\\n    //     }\\r\\n\\r\\n    //     // update sellOrderBook - ordersBook and ordersCount\\r\\n    //     uint256 _newSellOrdersCount = _currSellOrdersCount -\\r\\n    //         _countSellOrderFulfiled;\\r\\n\\r\\n    //     uint256[] memory _newSellOrdersQueue = new uint256[](\\r\\n    //         _newSellOrdersCount\\r\\n    //     );\\r\\n    //     for (uint256 i = 0; i < _newSellOrdersCount; i++) {\\r\\n    //         _newSellOrdersQueue[i] = ExchangeMarket[_marketIndex]\\r\\n    //             [typeOfOrder]\\r\\n    //             .ordersQueue[i + _countSellOrderFulfiled];\\r\\n    //     }\\r\\n\\r\\n    //     ExchangeMarket[_marketIndex]\\r\\n    //         [typeOfOrder]\\r\\n    //         .ordersCount = _newSellOrdersCount;\\r\\n    //     ExchangeMarket[_marketIndex]\\r\\n    //         [typeOfOrder]\\r\\n    //         .ordersQueue = _newSellOrdersQueue;\\r\\n    // }\\r\\n\\r\\n    // function sellMarketOrder(\\r\\n    //     string memory buyTokenSymbol,\\r\\n    //     string memory sellTokenSymbol,\\r\\n    //     uint256 quantity\\r\\n    // ) private {\\r\\n    //     require(hasToken(buyTokenSymbol));\\r\\n    //     require(hasToken(sellTokenSymbol));\\r\\n\\r\\n    //     uint8 _sellTokenIndex = getTokenIndex(sellTokenSymbol);\\r\\n    //     uint8 _buyTokenIndex = getTokenIndex(buyTokenSymbol);\\r\\n    //     uint8 _marketIndex = getMarketIndex(sellTokenSymbol, buyTokenSymbol);\\r\\n    //     require(\\r\\n    //         ExchangeMarket[_marketIndex][typeOfOrder].ordersCount > 0,\\r\\n    //         \\\"Cannot place request\\\"\\r\\n    //     );\\r\\n    //     uint256 _sell_qty_balance = quantity;\\r\\n    //     uint256 _currBuyOrdersCount = ExchangeMarket[_marketIndex]\\r\\n    //         [typeOfOrder]\\r\\n    //         .ordersCount;\\r\\n\\r\\n    //     uint256 _countBuyOrderFulfiled = 0;\\r\\n    //     for (uint256 i = 0; i < _currBuyOrdersCount; i++) {\\r\\n    //         if (_sell_qty_balance == 0) break;\\r\\n\\r\\n    //         uint256 _orderIndex = ExchangeMarket[_marketIndex]\\r\\n    //             [typeOfOrder]\\r\\n    //             .ordersQueue[i];\\r\\n    //         uint256 _orderPrice = ExchangeMarket[_marketIndex]\\r\\n    //             [typeOfOrder]\\r\\n    //             .orders[_orderIndex]\\r\\n    //             .price;\\r\\n    //         uint256 _orderAmount = ExchangeMarket[_marketIndex]\\r\\n    //             [typeOfOrder]\\r\\n    //             .orders[_orderIndex]\\r\\n    //             .quantity;\\r\\n    //         address _orderOwner = ExchangeMarket[_marketIndex]\\r\\n    //             [typeOfOrder]\\r\\n    //             .orders[_orderIndex]\\r\\n    //             .user;\\r\\n    //         if (_sell_qty_balance >= _orderAmount) {\\r\\n    //             _sell_qty_balance -= _orderAmount;\\r\\n\\r\\n    //             ExchangeMarket[_marketIndex]\\r\\n    //                 [typeOfOrder]\\r\\n    //                 .orders[_orderIndex]\\r\\n    //                 .quantity = 0;\\r\\n    //             _countBuyOrderFulfiled++;\\r\\n    //             emit LogFulfilBuyOrder(\\r\\n    //                 sellTokenSymbol,\\r\\n    //                 buyTokenSymbol,\\r\\n    //                 _orderPrice,\\r\\n    //                 _orderAmount,\\r\\n    //                 block.timestamp\\r\\n    //             );\\r\\n    //             tokenBalanceForAddress[msg.sender][_sellTokenIndex] -=\\r\\n    //                 _orderPrice *\\r\\n    //                 _orderAmount;\\r\\n    //             tokenBalanceForAddress[_orderOwner][_sellTokenIndex] +=\\r\\n    //                 _orderPrice *\\r\\n    //                 _orderAmount;\\r\\n    //             tokenBalanceForAddress[msg.sender][\\r\\n    //                 _buyTokenIndex\\r\\n    //             ] += _orderAmount;\\r\\n    //         } else {\\r\\n    //             ExchangeMarket[_marketIndex]\\r\\n    //                 [typeOfOrder]\\r\\n    //                 .orders[_orderIndex]\\r\\n    //                 .quantity -= _sell_qty_balance;\\r\\n    //             emit LogFulfilBuyOrder(\\r\\n    //                 sellTokenSymbol,\\r\\n    //                 buyTokenSymbol,\\r\\n    //                 _orderPrice,\\r\\n    //                 _orderAmount,\\r\\n    //                 block.timestamp\\r\\n    //             );\\r\\n\\r\\n    //             tokenBalanceForAddress[msg.sender][_sellTokenIndex] -=\\r\\n    //                 _orderPrice *\\r\\n    //                 _sell_qty_balance;\\r\\n    //             tokenBalanceForAddress[_orderOwner][_sellTokenIndex] +=\\r\\n    //                 _orderPrice *\\r\\n    //                 _sell_qty_balance;\\r\\n    //             tokenBalanceForAddress[msg.sender][\\r\\n    //                 _buyTokenIndex\\r\\n    //             ] += _sell_qty_balance;\\r\\n\\r\\n    //             _sell_qty_balance = 0;\\r\\n    //         }\\r\\n    //     }\\r\\n\\r\\n    //     // update sellOrderBook - ordersBook and ordersCount\\r\\n    //     uint256 _newBuyOrdersCount = _currBuyOrdersCount -\\r\\n    //         _countBuyOrderFulfiled;\\r\\n\\r\\n    //     uint256[] memory _newBuyOrdersQueue = new uint256[](_newBuyOrdersCount);\\r\\n    //     for (uint256 i = 0; i < _newBuyOrdersCount; i++) {\\r\\n    //         _newBuyOrdersQueue[i] = ExchangeMarket[_marketIndex]\\r\\n    //             [typeOfOrder]\\r\\n    //             .ordersQueue[i + _countBuyOrderFulfiled];\\r\\n    //     }\\r\\n\\r\\n    //     ExchangeMarket[_marketIndex]\\r\\n    //         [typeOfOrder]\\r\\n    //         .ordersCount = _newBuyOrdersCount;\\r\\n    //     ExchangeMarket[_marketIndex]\\r\\n    //         [typeOfOrder]\\r\\n    //         .ordersQueue = _newBuyOrdersQueue;\\r\\n    // }\\r\\n\\r\\n    function addOrder(\\r\\n        uint8 tokenIndex1,\\r\\n        uint8 tokenIndex2,\\r\\n        uint8 typeOfOrder,\\r\\n        Order memory toAdd\\r\\n    ) private {\\r\\n        (, uint256[] memory prices, ) = getOrderBook(\\r\\n            tokenIndex1,\\r\\n            tokenIndex2,\\r\\n            typeOfOrder\\r\\n        );\\r\\n        uint8 _marketIndex = getMarketIndex(tokenIndex1, tokenIndex2);\\r\\n        uint256 _newOrderIndex = ++ExchangeMarket[_marketIndex]\\r\\n            .Orders[typeOfOrder]\\r\\n            .orderIndex;\\r\\n        uint256[] memory _newOrdersQueue = new uint256[](_newOrderIndex);\\r\\n        bool _isOrderAdded = false;\\r\\n\\r\\n        if (ExchangeMarket[_marketIndex].Orders[typeOfOrder].ordersCount == 0) {\\r\\n            _newOrdersQueue[0] = _newOrderIndex;\\r\\n            _isOrderAdded = true;\\r\\n        } else {\\r\\n            uint256 _newOrdersQueueIndex = 0;\\r\\n            for (\\r\\n                uint256 i = 0;\\r\\n                i <\\r\\n                ExchangeMarket[_marketIndex].Orders[typeOfOrder].ordersCount;\\r\\n                i++\\r\\n            ) {\\r\\n                if (!_isOrderAdded && toAdd.price > prices[i]) {\\r\\n                    _newOrdersQueue[_newOrdersQueueIndex++] = _newOrderIndex;\\r\\n                    _isOrderAdded = true;\\r\\n                }\\r\\n                _newOrdersQueue[_newOrdersQueueIndex++] = ExchangeMarket[\\r\\n                    _marketIndex\\r\\n                ].Orders[typeOfOrder].ordersQueue[i];\\r\\n            }\\r\\n            if (!_isOrderAdded) {\\r\\n                _newOrdersQueue[_newOrdersQueueIndex] = _newOrderIndex;\\r\\n            }\\r\\n        }\\r\\n        ExchangeMarket[_marketIndex]\\r\\n            .Orders[typeOfOrder]\\r\\n            .ordersQueue = _newOrdersQueue;\\r\\n        ExchangeMarket[_marketIndex].Orders[typeOfOrder].ordersCount++;\\r\\n        ExchangeMarket[_marketIndex].Orders[typeOfOrder].orders[\\r\\n            _newOrderIndex\\r\\n        ] = Order({\\r\\n            quantity: toAdd.quantity,\\r\\n            price: toAdd.price,\\r\\n            user: msg.sender,\\r\\n            timestamp: block.timestamp\\r\\n        });\\r\\n    }\\r\\n\\r\\n    //0 - buy, 1- sell\\r\\n    function createOrder(\\r\\n        uint8 typeOfOrder, //A/B\\r\\n        string memory buySymbolName, //B\\r\\n        string memory sellSymbolName, //A\\r\\n        uint256 price,\\r\\n        uint256 quantity\\r\\n    ) public {\\r\\n        console.log(\\\"creating order\\\");\\r\\n        require(hasToken(buySymbolName), \\\"Token not present\\\");\\r\\n        require(hasToken(sellSymbolName), \\\"Token not present\\\");\\r\\n        console.log(\\\"creating buy order\\\");\\r\\n        uint8 _primaryTokenIndex;\\r\\n        uint8 _secondaryTokenIndex;\\r\\n        uint8 _marketIndex;\\r\\n        uint256 _qty_balance = quantity;\\r\\n\\r\\n        if (typeOfOrder == 0) {\\r\\n            _primaryTokenIndex = getTokenIndex(buySymbolName);\\r\\n            _secondaryTokenIndex = getTokenIndex(sellSymbolName);\\r\\n            require(\\r\\n                tokenBalanceForAddress[msg.sender][_secondaryTokenIndex] >=\\r\\n                    price * quantity,\\r\\n                \\\"Not enough funds\\\"\\r\\n            );\\r\\n        } else {\\r\\n            _primaryTokenIndex = getTokenIndex(sellSymbolName); //A\\r\\n            _secondaryTokenIndex = getTokenIndex(buySymbolName); //B\\r\\n            require(\\r\\n                tokenBalanceForAddress[msg.sender][_primaryTokenIndex] >=\\r\\n                    price * quantity,\\r\\n                \\\"Not enough funds\\\"\\r\\n            );\\r\\n        }\\r\\n        _marketIndex = getMarketIndex(_primaryTokenIndex, _secondaryTokenIndex);\\r\\n        uint8 index = typeOfOrder == 0 ? 1 : 0;\\r\\n        // _orderCount = ExchangeMarket[_marketIndex].Orders[index].ordersCount;\\r\\n\\r\\n        if (ExchangeMarket[_marketIndex].Orders[index].ordersCount > 0) {\\r\\n            // fulfil buyOrder by checking against which sell orders can be fulfil\\r\\n            //update\\r\\n            _qty_balance = fulfillOrder(\\r\\n                typeOfOrder,\\r\\n                _primaryTokenIndex,\\r\\n                _secondaryTokenIndex,\\r\\n                Order({\\r\\n                    quantity: quantity,\\r\\n                    price: price,\\r\\n                    timestamp: block.timestamp,\\r\\n                    user: msg.sender\\r\\n                })\\r\\n            );\\r\\n        }\\r\\n        if (_qty_balance > 0) {\\r\\n            Order memory toAdd = Order({\\r\\n                quantity: _qty_balance,\\r\\n                price: price,\\r\\n                timestamp: block.timestamp,\\r\\n                user: msg.sender\\r\\n            });\\r\\n            addOrder(\\r\\n                _primaryTokenIndex,\\r\\n                _secondaryTokenIndex,\\r\\n                typeOfOrder,\\r\\n                toAdd\\r\\n            );\\r\\n        }\\r\\n        if (typeOfOrder == 0) {\\r\\n            tokenBalanceForAddress[msg.sender][_primaryTokenIndex] -=\\r\\n                price *\\r\\n                _qty_balance;\\r\\n        } else {\\r\\n            tokenBalanceForAddress[msg.sender][_secondaryTokenIndex] -=\\r\\n                price *\\r\\n                _qty_balance;\\r\\n        }\\r\\n\\r\\n        // fire event\\r\\n        emit LogCreateBuyOrder(\\r\\n            buySymbolName,\\r\\n            sellSymbolName,\\r\\n            price,\\r\\n            _qty_balance,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //Try if buy order can be immediately fulfilled even if partially\\r\\n    function fulfillOrder(\\r\\n        uint8 typeOfOrder, //A/B\\r\\n        uint8 _primaryTokenIndex, //B\\r\\n        uint8 _secondaryTokenIndex, //A\\r\\n        Order memory toFulfill\\r\\n    ) private returns (uint256) {\\r\\n        uint8 _marketIndex;\\r\\n        //uint256 _qty_balance = quantity;\\r\\n\\r\\n        uint256 _currOrdersCount = ExchangeMarket[_marketIndex]\\r\\n            .Orders[typeOfOrder]\\r\\n            .ordersCount;\\r\\n\\r\\n        uint256 _countOrderFulfiled = 0;\\r\\n        for (uint256 i = 0; i < _currOrdersCount; i++) {\\r\\n            if (toFulfill.quantity == 0) break;\\r\\n\\r\\n            uint256 _orderIndex = ExchangeMarket[_marketIndex]\\r\\n                .Orders[typeOfOrder]\\r\\n                .ordersQueue[i];\\r\\n\\r\\n            uint256 _orderAmount = ExchangeMarket[_marketIndex]\\r\\n                .Orders[typeOfOrder]\\r\\n                .orders[_orderIndex]\\r\\n                .quantity;\\r\\n            address _orderOwner = ExchangeMarket[_marketIndex]\\r\\n                .Orders[typeOfOrder]\\r\\n                .orders[_orderIndex]\\r\\n                .user;\\r\\n\\r\\n            if (\\r\\n                typeOfOrder == 0 &&\\r\\n                toFulfill.price <\\r\\n                ExchangeMarket[_marketIndex]\\r\\n                    .Orders[typeOfOrder]\\r\\n                    .orders[_orderIndex]\\r\\n                    .price\\r\\n            ) break;\\r\\n            else if (\\r\\n                typeOfOrder == 1 &&\\r\\n                toFulfill.price >\\r\\n                ExchangeMarket[_marketIndex]\\r\\n                    .Orders[typeOfOrder]\\r\\n                    .orders[_orderIndex]\\r\\n                    .price\\r\\n            ) break;\\r\\n\\r\\n            if (toFulfill.quantity >= _orderAmount) {\\r\\n                toFulfill.quantity -= _orderAmount;\\r\\n\\r\\n                ExchangeMarket[_marketIndex]\\r\\n                    .Orders[typeOfOrder]\\r\\n                    .orders[_orderIndex]\\r\\n                    .quantity = 0;\\r\\n                _countOrderFulfiled++;\\r\\n                emit LogFulfillOrder(\\r\\n                    typeOfOrder,\\r\\n                    _primaryTokenIndex,\\r\\n                    _secondaryTokenIndex,\\r\\n                    toFulfill.price,\\r\\n                    _orderAmount,\\r\\n                    block.timestamp\\r\\n                );\\r\\n                if (typeOfOrder == 0) {\\r\\n                    tokenBalanceForAddress[_orderOwner][_secondaryTokenIndex] +=\\r\\n                        toFulfill.price *\\r\\n                        _orderAmount;\\r\\n                    tokenBalanceForAddress[msg.sender][\\r\\n                        _primaryTokenIndex\\r\\n                    ] += _orderAmount;\\r\\n                } else {\\r\\n                    tokenBalanceForAddress[_orderOwner][_primaryTokenIndex] +=\\r\\n                        toFulfill.price *\\r\\n                        _orderAmount;\\r\\n                    tokenBalanceForAddress[msg.sender][\\r\\n                        _secondaryTokenIndex\\r\\n                    ] += _orderAmount;\\r\\n                }\\r\\n            } else {\\r\\n                ExchangeMarket[_marketIndex]\\r\\n                    .Orders[typeOfOrder]\\r\\n                    .orders[_orderIndex]\\r\\n                    .quantity -= toFulfill.quantity;\\r\\n                emit LogFulfillOrder(\\r\\n                    typeOfOrder,\\r\\n                    _primaryTokenIndex,\\r\\n                    _secondaryTokenIndex,\\r\\n                    toFulfill.price,\\r\\n                    _orderAmount,\\r\\n                    block.timestamp\\r\\n                );\\r\\n\\r\\n                if (typeOfOrder == 0) {\\r\\n                    tokenBalanceForAddress[_orderOwner][_secondaryTokenIndex] +=\\r\\n                        toFulfill.price *\\r\\n                        toFulfill.quantity;\\r\\n                    tokenBalanceForAddress[msg.sender][\\r\\n                        _primaryTokenIndex\\r\\n                    ] += _orderAmount;\\r\\n                } else {\\r\\n                    tokenBalanceForAddress[_orderOwner][_primaryTokenIndex] +=\\r\\n                        toFulfill.price *\\r\\n                        toFulfill.quantity;\\r\\n                    tokenBalanceForAddress[msg.sender][\\r\\n                        _secondaryTokenIndex\\r\\n                    ] += _orderAmount;\\r\\n                }\\r\\n\\r\\n                toFulfill.quantity = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // update sellOrderBook - ordersBook and ordersCount\\r\\n        updateOrderBook(\\r\\n            _currOrdersCount,\\r\\n            _countOrderFulfiled,\\r\\n            typeOfOrder,\\r\\n            _marketIndex\\r\\n        );\\r\\n\\r\\n        return toFulfill.quantity;\\r\\n    }\\r\\n\\r\\n    function updateOrderBook(\\r\\n        uint256 _currOrdersCount,\\r\\n        uint256 _countOrderFulfiled,\\r\\n        uint8 typeOfOrder,\\r\\n        uint8 _marketIndex\\r\\n    ) private {\\r\\n        uint256 _newOrdersCount = _currOrdersCount - _countOrderFulfiled;\\r\\n\\r\\n        uint256[] memory _newSellOrdersQueue = new uint256[](_newOrdersCount);\\r\\n        for (uint256 i = 0; i < _newOrdersCount; i++) {\\r\\n            _newSellOrdersQueue[i] = ExchangeMarket[_marketIndex]\\r\\n                .Orders[typeOfOrder]\\r\\n                .ordersQueue[i + _countOrderFulfiled];\\r\\n        }\\r\\n\\r\\n        ExchangeMarket[_marketIndex]\\r\\n            .Orders[typeOfOrder]\\r\\n            .ordersCount = _newOrdersCount;\\r\\n        ExchangeMarket[_marketIndex]\\r\\n            .Orders[typeOfOrder]\\r\\n            .ordersQueue = _newSellOrdersQueue;\\r\\n    }\\r\\n\\r\\n    //User's ability to cancel orders that were placed\\r\\n    function cancelOrder(\\r\\n        uint8 typeOfOrder,\\r\\n        string memory buyTokenSymbol,\\r\\n        string memory sellTokenSymbol,\\r\\n        uint256 orderIndex\\r\\n    ) public {\\r\\n        require(hasToken(buyTokenSymbol));\\r\\n        require(hasToken(sellTokenSymbol));\\r\\n\\r\\n        uint8 _primaryTokenIndex;\\r\\n        uint8 _secondaryTokenIndex;\\r\\n        uint8 _marketIndex;\\r\\n\\r\\n        if (typeOfOrder == 0) {\\r\\n            _primaryTokenIndex = getTokenIndex(buyTokenSymbol);\\r\\n            _secondaryTokenIndex = getTokenIndex(sellTokenSymbol);\\r\\n        } else {\\r\\n            _primaryTokenIndex = getTokenIndex(sellTokenSymbol); //A\\r\\n            _secondaryTokenIndex = getTokenIndex(buyTokenSymbol); //B\\r\\n            // string memory temp = buySymbolName;\\r\\n            // buySymbolName = sellSymbolName; //A\\r\\n            // sellSymbolName = temp; //B\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            ExchangeMarket[_marketIndex].Orders[typeOfOrder].ordersCount > 0\\r\\n        );\\r\\n\\r\\n        // Check order is in OrderBook\\r\\n        // Create new orderQueue\\r\\n        bool _isOrderInBook = false;\\r\\n        uint256 _newOrderQueueIndex = 0;\\r\\n        uint256[] memory _newOrdersQueue = new uint256[](\\r\\n            ExchangeMarket[_marketIndex].Orders[typeOfOrder].ordersCount - 1\\r\\n        );\\r\\n        uint256 _price;\\r\\n        uint256 _quantity;\\r\\n\\r\\n        for (\\r\\n            uint256 _orderQueueIndex = 0;\\r\\n            _orderQueueIndex <\\r\\n            ExchangeMarket[_marketIndex].Orders[typeOfOrder].ordersCount;\\r\\n            _orderQueueIndex++\\r\\n        ) {\\r\\n            if (\\r\\n                orderIndex ==\\r\\n                ExchangeMarket[_marketIndex].Orders[typeOfOrder].ordersQueue[\\r\\n                    _orderQueueIndex\\r\\n                ]\\r\\n            ) {\\r\\n                _isOrderInBook = true;\\r\\n                _price = ExchangeMarket[_marketIndex]\\r\\n                    .Orders[typeOfOrder]\\r\\n                    .orders[orderIndex]\\r\\n                    .price;\\r\\n                _quantity = ExchangeMarket[_marketIndex]\\r\\n                    .Orders[typeOfOrder]\\r\\n                    .orders[orderIndex]\\r\\n                    .quantity;\\r\\n            } else {\\r\\n                _newOrdersQueue[_newOrderQueueIndex] = ExchangeMarket[\\r\\n                    _marketIndex\\r\\n                ].Orders[typeOfOrder].ordersQueue[_orderQueueIndex];\\r\\n                _newOrderQueueIndex++;\\r\\n            }\\r\\n        }\\r\\n        require(_isOrderInBook);\\r\\n\\r\\n        // Update OrderBook and OrderQueue\\r\\n        ExchangeMarket[_marketIndex].Orders[typeOfOrder].ordersCount--;\\r\\n        ExchangeMarket[_marketIndex]\\r\\n            .Orders[typeOfOrder]\\r\\n            .ordersQueue = _newOrdersQueue;\\r\\n\\r\\n        // refund ether balance back to user's account\\r\\n        if (typeOfOrder == 0) {\\r\\n            tokenBalanceForAddress[msg.sender][_secondaryTokenIndex] +=\\r\\n                _price *\\r\\n                _quantity;\\r\\n        } else {\\r\\n            tokenBalanceForAddress[msg.sender][_primaryTokenIndex] +=\\r\\n                _price *\\r\\n                _quantity;\\r\\n        }\\r\\n\\r\\n        emit LogCancelBuyOrder(\\r\\n            buyTokenSymbol,\\r\\n            sellTokenSymbol,\\r\\n            orderIndex,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* HELPER FUNCTION */\\r\\n\\r\\n    function hasToken(string memory symbolName) public view returns (bool) {\\r\\n        for (uint8 i = 1; i <= tokenIndex; i++) {\\r\\n            if (\\r\\n                keccak256(abi.encodePacked(symbolName)) ==\\r\\n                keccak256(abi.encodePacked(tokenInfo[i].symbolName))\\r\\n            ) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /* GETTER FUNCTIONS */\\r\\n\\r\\n    function getOrderBook(\\r\\n        uint8 buyTokenIndex,\\r\\n        uint8 sellTokenIndex,\\r\\n        uint8 type_of_order\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256[] memory,\\r\\n            uint256[] memory,\\r\\n            uint256[] memory\\r\\n        )\\r\\n    {\\r\\n        uint8 _marketIndex = getMarketIndex(buyTokenIndex, sellTokenIndex);\\r\\n\\r\\n        OrderBook storage order_book = ExchangeMarket[_marketIndex].Orders[\\r\\n            type_of_order\\r\\n        ];\\r\\n\\r\\n        console.log(_marketIndex);\\r\\n\\r\\n        uint256[] memory indexes = new uint256[](order_book.ordersCount);\\r\\n        uint256[] memory prices = new uint256[](order_book.ordersCount);\\r\\n        uint256[] memory quantity = new uint256[](order_book.ordersCount);\\r\\n\\r\\n        for (uint256 i = 1; i <= order_book.ordersCount; i++) {\\r\\n            Order memory _order = order_book.orders[\\r\\n                order_book.ordersQueue[i - 1]\\r\\n            ];\\r\\n            indexes[i - 1] = order_book.ordersQueue[i - 1];\\r\\n            prices[i - 1] = _order.price;\\r\\n            quantity[i - 1] = _order.quantity;\\r\\n        }\\r\\n\\r\\n        return (indexes, prices, quantity);\\r\\n    }\\r\\n\\r\\n    function getTokenIndex(string memory symbolName)\\r\\n        public\\r\\n        view\\r\\n        returns (uint8)\\r\\n    {\\r\\n        for (uint8 i = 1; i <= tokenIndex; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(symbolName)) ==\\r\\n                keccak256(bytes(tokenInfo[i].symbolName))\\r\\n            ) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getMarketIndex(\\r\\n        string memory buyTokenSymbol,\\r\\n        string memory sellTokenSymbol\\r\\n    ) public view returns (uint8) {\\r\\n        for (uint8 i = 1; i <= marketIndex; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(buyTokenSymbol)) ==\\r\\n                keccak256(bytes(tokenInfo[buyToSell[i][0]].symbolName)) &&\\r\\n                keccak256(bytes(sellTokenSymbol)) ==\\r\\n                keccak256(bytes(tokenInfo[buyToSell[i][1]].symbolName))\\r\\n            ) {\\r\\n                console.log(\\\"Returning market index \\\", i);\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n        console.log(\\\"Returning market index \\\", 0);\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getMarketIndex(uint8 buyTokenIndex, uint8 sellTokenIndex)\\r\\n        public\\r\\n        view\\r\\n        returns (uint8)\\r\\n    {\\r\\n        for (uint8 i = 1; i <= marketIndex; i++) {\\r\\n            if (\\r\\n                buyTokenIndex == buyToSell[i][0] &&\\r\\n                sellTokenIndex == buyToSell[i][1]\\r\\n            ) {\\r\\n                console.log(\\\"Returning market index \\\", i);\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n        console.log(\\\"Returning market index \\\", 0);\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getTokenBalanceForUser(string memory symbolName)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return tokenBalanceForAddress[msg.sender][getTokenIndex(symbolName)];\\r\\n    }\\r\\n\\r\\n    function getAllTokenBalanceForUser()\\r\\n        public\\r\\n        view\\r\\n        returns (string[] memory, uint256[] memory)\\r\\n    {\\r\\n        string[] memory symbolNames = new string[](tokenIndex);\\r\\n        uint256[] memory balances = new uint256[](tokenIndex);\\r\\n        for (uint8 i = 1; i <= tokenIndex; i++) {\\r\\n            console.log(\\r\\n                \\\"balance \\\",\\r\\n                getTokenBalanceForUser(tokenInfo[i].symbolName)\\r\\n            );\\r\\n            symbolNames[i - 1] = tokenInfo[i].symbolName;\\r\\n            balances[i - 1] = getTokenBalanceForUser(tokenInfo[i].symbolName);\\r\\n        }\\r\\n        return (symbolNames, balances);\\r\\n    }\\r\\n\\r\\n    function getAllTokens()\\r\\n        public\\r\\n        view\\r\\n        returns (string[] memory, address[] memory)\\r\\n    {\\r\\n        string[] memory symbolNames = new string[](tokenIndex);\\r\\n        address[] memory addresses = new address[](tokenIndex);\\r\\n\\r\\n        for (uint8 i = 1; i <= tokenIndex; i++) {\\r\\n            symbolNames[i - 1] = tokenInfo[i].symbolName;\\r\\n            addresses[i - 1] = tokenInfo[i].contractAddress;\\r\\n        }\\r\\n\\r\\n        return (symbolNames, addresses);\\r\\n    }\\r\\n\\r\\n    function getMarketIndex() public view returns (uint8) {\\r\\n        return marketIndex;\\r\\n    }\\r\\n\\r\\n    function getAllMarkets()\\r\\n        public\\r\\n        view\\r\\n        returns (string[] memory, string[] memory)\\r\\n    {\\r\\n        string[] memory buySymbols = new string[](marketIndex);\\r\\n        string[] memory sellSymbols = new string[](marketIndex);\\r\\n        console.log(\\\"markets number \\\", marketIndex);\\r\\n\\r\\n        for (uint8 i = 1; i <= marketIndex; i++) {\\r\\n            console.log(\\r\\n                \\\"Market \\\",\\r\\n                tokenInfo[2].symbolName,\\r\\n                tokenInfo[1].symbolName\\r\\n            );\\r\\n            buySymbols[i - 1] = tokenInfo[buyToSell[i][0]].symbolName;\\r\\n            sellSymbols[i - 1] = tokenInfo[buyToSell[i][1]].symbolName;\\r\\n        }\\r\\n\\r\\n        return (buySymbols, sellSymbols);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x506c6a2862d659d5675440c09fade98c42e23bde44bfba9a5a285b920448ac10\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063c97a413a11610071578063c97a413a14610321578063cb803ceb14610351578063cedd00b11461036f578063f2fde38b1461039f578063f7499762146103bb57610121565b80638da5cb5b1461027c5780638ea008181461029a578063b0772d0b146102ca578063b0b22c2c146102e9578063b13bd79d1461030557610121565b806361a6d43a116100f457806361a6d43a146101c15780636409d48d146101f3578063715018a61461021257806384cde3691461021c5780638883b10c1461024c57610121565b80632a5c792a1461012657806333ad57e41461014557806342fe6695146101755780635f96876714610191575b600080fd5b61012e6103d7565b60405161013c929190613fb0565b60405180910390f35b61015f600480360381019061015a9190614166565b61064b565b60405161016c91906141d1565b60405180910390f35b61018f600480360381019061018a91906141ec565b610851565b005b6101ab60048036038101906101a691906141ec565b610b1c565b6040516101b89190614251565b60405180910390f35b6101db60048036038101906101d69190614298565b610ba5565b6040516101ea939291906143a9565b60405180910390f35b6101fb610ea8565b6040516102099291906143f5565b60405180910390f35b61021a611249565b005b6102366004803603810190610231919061442c565b61125d565b6040516102439190614251565b60405180910390f35b610266600480360381019061026191906141ec565b6113e0565b60405161027391906141d1565b60405180910390f35b610284611448565b604051610291919061447b565b60405180910390f35b6102b460048036038101906102af91906141ec565b611471565b6040516102c191906144b1565b60405180910390f35b6102d261152b565b6040516102e09291906144cc565b60405180910390f35b61030360048036038101906102fe919061452f565b611a48565b005b61031f600480360381019061031a919061458b565b611c5c565b005b61033b60048036038101906103369190614166565b61213e565b60405161034891906141d1565b60405180910390f35b610359612300565b6040516103669190614251565b60405180910390f35b6103896004803603810190610384919061463e565b612317565b6040516103969190614251565b60405180910390f35b6103b960048036038101906103b491906146b6565b6124fc565b005b6103d560048036038101906103d091906146e3565b61257f565b005b6060806000600560009054906101000a900460ff1660ff1667ffffffffffffffff81111561040857610407614005565b5b60405190808252806020026020018201604052801561043b57816020015b60608152602001906001900390816104265790505b5090506000600560009054906101000a900460ff1660ff1667ffffffffffffffff81111561046c5761046b614005565b5b60405190808252806020026020018201604052801561049a5781602001602082028036833780820191505090505b5090506000600190505b600560009054906101000a900460ff1660ff168160ff161161063e57600160008260ff1660ff16815260200190815260200160002060010180546104e7906147b1565b80601f0160208091040260200160405190810160405280929190818152602001828054610513906147b1565b80156105605780601f1061053557610100808354040283529160200191610560565b820191906000526020600020905b81548152906001019060200180831161054357829003601f168201915b5050505050836001836105739190614811565b60ff168151811061058757610586614846565b5b6020026020010181905250600160008260ff1660ff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826001836105dd9190614811565b60ff16815181106105f1576105f0614846565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061063690614875565b9150506104a4565b5081819350935050509091565b600061065683611471565b610695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068c906148fb565b60405180910390fd5b61069e836113e0565b826106a8856113e0565b6106b2919061491b565b10156106f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ea9061499b565b60405180910390fd5b60006106fe84610b1c565b905082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360ff1660ff1681526020019081526020016000206000828254610766919061491b565b925050819055506108026040518060400160405280600d81526020017f746f6b656e2062616c616e636500000000000000000000000000000000000000815250600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460ff1660ff16815260200190815260200160002054612a7d565b7f4dbc01516018d27f28f32ddd20595428f662140f1fff79b754484578ac27fc198433854260405161083794939291906149f4565b60405180910390a1610848846113e0565b91505092915050565b610859612b19565b600560019054906101000a900460ff1660ff166001600560019054906101000a900460ff166108889190614a40565b60ff1610156108cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c390614ac1565b60405180910390fd5b6000600190505b600560009054906101000a900460ff1660ff168160ff161015610a7d576109456040518060400160405280600e81526020017f416464696e67206d61726b657420000000000000000000000000000000000000815250600560009054906101000a900460ff1660ff168360ff16612b97565b6005600181819054906101000a900460ff168092919061096490614875565b91906101000a81548160ff021916908360ff160217905550506000600267ffffffffffffffff81111561099a57610999614005565b5b6040519080825280602002602001820160405280156109c85781602001602082028036833780820191505090505b509050600560009054906101000a900460ff16816000815181106109ef576109ee614846565b5b602002602001019060ff16908160ff16815250508181600181518110610a1857610a17614846565b5b602002602001019060ff16908160ff16815250508060036000600560019054906101000a900460ff1660ff1660ff1681526020019081526020016000209080519060200190610a68929190613c5d565b50508080610a7590614875565b9150506108d3565b50610acf6040518060400160405280600e81526020017f546f74616c206d61726b65747320000000000000000000000000000000000000815250600560019054906101000a900460ff1660ff16612a7d565b7f8877b3481be0c4a9d298c35f0e291fd2f61a153f7d22354a14c44c8266a5a754600560019054906101000a900460ff168242604051610b1193929190614b1c565b60405180910390a150565b600080600190505b600560009054906101000a900460ff1660ff168160ff1611610b9a57600160008260ff1660ff168152602001908152602001600020600101604051610b699190614bfd565b6040518091039020838051906020012003610b875780915050610ba0565b8080610b9290614875565b915050610b24565b50600090505b919050565b60608060606000610bb6878761125d565b90506000600460008360ff1660ff16815260200190815260200160002060000160008760ff1660ff1681526020019081526020016000209050610bfb8260ff16612c36565b6000816002015467ffffffffffffffff811115610c1b57610c1a614005565b5b604051908082528060200260200182016040528015610c495781602001602082028036833780820191505090505b5090506000826002015467ffffffffffffffff811115610c6c57610c6b614005565b5b604051908082528060200260200182016040528015610c9a5781602001602082028036833780820191505090505b5090506000836002015467ffffffffffffffff811115610cbd57610cbc614005565b5b604051908082528060200260200182016040528015610ceb5781602001602082028036833780820191505090505b5090506000600190505b84600201548111610e9057600085600101600087600301600185610d199190614c14565b81548110610d2a57610d29614846565b5b906000526020600020015481526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905085600301600183610dd59190614c14565b81548110610de657610de5614846565b5b906000526020600020015485600184610dff9190614c14565b81518110610e1057610e0f614846565b5b602002602001018181525050806020015184600184610e2f9190614c14565b81518110610e4057610e3f614846565b5b602002602001018181525050806000015183600184610e5f9190614c14565b81518110610e7057610e6f614846565b5b602002602001018181525050508080610e8890614c48565b915050610cf5565b50828282975097509750505050505093509350939050565b6060806000600560009054906101000a900460ff1660ff1667ffffffffffffffff811115610ed957610ed8614005565b5b604051908082528060200260200182016040528015610f0c57816020015b6060815260200190600190039081610ef75790505b5090506000600560009054906101000a900460ff1660ff1667ffffffffffffffff811115610f3d57610f3c614005565b5b604051908082528060200260200182016040528015610f6b5781602001602082028036833780820191505090505b5090506000600190505b600560009054906101000a900460ff1660ff168160ff161161123c5761107c6040518060400160405280600881526020017f62616c616e636520000000000000000000000000000000000000000000000000815250611077600160008560ff1660ff1681526020019081526020016000206001018054610ff4906147b1565b80601f0160208091040260200160405190810160405280929190818152602001828054611020906147b1565b801561106d5780601f106110425761010080835404028352916020019161106d565b820191906000526020600020905b81548152906001019060200180831161105057829003601f168201915b50505050506113e0565b612a7d565b600160008260ff1660ff16815260200190815260200160002060010180546110a3906147b1565b80601f01602080910402602001604051908101604052809291908181526020018280546110cf906147b1565b801561111c5780601f106110f15761010080835404028352916020019161111c565b820191906000526020600020905b8154815290600101906020018083116110ff57829003601f168201915b50505050508360018361112f9190614811565b60ff168151811061114357611142614846565b5b60200260200101819052506111fb600160008360ff1660ff1681526020019081526020016000206001018054611178906147b1565b80601f01602080910402602001604051908101604052809291908181526020018280546111a4906147b1565b80156111f15780601f106111c6576101008083540402835291602001916111f1565b820191906000526020600020905b8154815290600101906020018083116111d457829003601f168201915b50505050506113e0565b826001836112099190614811565b60ff168151811061121d5761121c614846565b5b602002602001018181525050808061123490614875565b915050610f75565b5081819350935050509091565b611251612b19565b61125b6000612ccf565b565b600080600190505b600560019054906101000a900460ff1660ff168160ff161161139457600360008260ff1660ff1681526020019081526020016000206000815481106112ad576112ac614846565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff168460ff161480156113315750600360008260ff1660ff16815260200190815260200160002060018154811061130857611307614846565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff168360ff16145b15611381576113786040518060400160405280601781526020017f52657475726e696e67206d61726b657420696e646578200000000000000000008152508260ff16612a7d565b809150506113da565b808061138c90614875565b915050611265565b506113d56040518060400160405280601781526020017f52657475726e696e67206d61726b657420696e646578200000000000000000008152506000612a7d565b600090505b92915050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061142c84610b1c565b60ff1660ff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600190505b600560009054906101000a900460ff1660ff168160ff161161152057600160008260ff1660ff1681526020019081526020016000206001016040516020016114c19190614d33565b60405160208183030381529060405280519060200120836040516020016114e89190614d7b565b604051602081830303815290604052805190602001200361150d576001915050611526565b808061151890614875565b915050611479565b50600090505b919050565b6060806000600560019054906101000a900460ff1660ff1667ffffffffffffffff81111561155c5761155b614005565b5b60405190808252806020026020018201604052801561158f57816020015b606081526020019060019003908161157a5790505b5090506000600560019054906101000a900460ff1660ff1667ffffffffffffffff8111156115c0576115bf614005565b5b6040519080825280602002602001820160405280156115f357816020015b60608152602001906001900390816115de5790505b5090506116476040518060400160405280600f81526020017f6d61726b657473206e756d626572200000000000000000000000000000000000815250600560019054906101000a900460ff1660ff16612a7d565b6000600190505b600560019054906101000a900460ff1660ff168160ff1611611a3b576117ee6040518060400160405280600781526020017f4d61726b6574200000000000000000000000000000000000000000000000000081525060016000600260ff16815260200190815260200160002060010180546116c8906147b1565b80601f01602080910402602001604051908101604052809291908181526020018280546116f4906147b1565b80156117415780601f1061171657610100808354040283529160200191611741565b820191906000526020600020905b81548152906001019060200180831161172457829003601f168201915b505050505060016000600160ff168152602001908152602001600020600101805461176b906147b1565b80601f0160208091040260200160405190810160405280929190818152602001828054611797906147b1565b80156117e45780601f106117b9576101008083540402835291602001916117e4565b820191906000526020600020905b8154815290600101906020018083116117c757829003601f168201915b5050505050612d93565b60016000600360008460ff1660ff16815260200190815260200160002060008154811061181e5761181d614846565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff1660ff1681526020019081526020016000206001018054611860906147b1565b80601f016020809104026020016040519081016040528092919081815260200182805461188c906147b1565b80156118d95780601f106118ae576101008083540402835291602001916118d9565b820191906000526020600020905b8154815290600101906020018083116118bc57829003601f168201915b5050505050836001836118ec9190614811565b60ff1681518110611900576118ff614846565b5b602002602001018190525060016000600360008460ff1660ff16815260200190815260200160002060018154811061193b5761193a614846565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff1660ff168152602001908152602001600020600101805461197d906147b1565b80601f01602080910402602001604051908101604052809291908181526020018280546119a9906147b1565b80156119f65780601f106119cb576101008083540402835291602001916119f6565b820191906000526020600020905b8154815290600101906020018083116119d957829003601f168201915b505050505082600183611a099190614811565b60ff1681518110611a1d57611a1c614846565b5b60200260200101819052508080611a3390614875565b91505061164e565b5081819350935050509091565b611a50612b19565b611a5982611471565b15611a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9090614dde565b60405180910390fd5b600560009054906101000a900460ff1660ff166001600560009054906101000a900460ff16611ac89190614a40565b60ff161015611b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0390614e4a565b60405180910390fd5b6005600081819054906101000a900460ff1680929190611b2b90614875565b91906101000a81548160ff021916908360ff160217905550508160016000600560009054906101000a900460ff1660ff1660ff1681526020019081526020016000206001019081611b7c9190614ff7565b508060016000600560009054906101000a900460ff1660ff1660ff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600560009054906101000a900460ff1660ff161115611c0c57611c0b82610851565b5b7f1723c709bc871c32c420d3c2d2837cdd4bef40c574088c1d055e1f4f609d2377600560009054906101000a900460ff16838342604051611c5094939291906150c9565b60405180910390a15050565b611c9a6040518060400160405280600e81526020017f6372656174696e67206f72646572000000000000000000000000000000000000815250612e32565b611ca384611471565b611ce2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd9906148fb565b60405180910390fd5b611ceb83611471565b611d2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d21906148fb565b60405180910390fd5b611d686040518060400160405280601281526020017f6372656174696e6720627579206f726465720000000000000000000000000000815250612e32565b60008060008084905060008960ff1603611e3b57611d8588610b1c565b9350611d9087610b1c565b92508486611d9e9190615115565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008560ff1660ff168152602001908152602001600020541015611e36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2d906151a3565b60405180910390fd5b611ef6565b611e4487610b1c565b9350611e4f88610b1c565b92508486611e5d9190615115565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008660ff1660ff168152602001908152602001600020541015611ef5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eec906151a3565b60405180910390fd5b5b611f00848461125d565b91506000808a60ff1614611f15576000611f18565b60015b90506000600460008560ff1660ff16815260200190815260200160002060000160008360ff1660ff168152602001908152602001600020600201541115611f9e57611f9b8a868660405180608001604052808b81526020018c81526020014281526020013373ffffffffffffffffffffffffffffffffffffffff16815250612ecb565b91505b6000821115611ff057600060405180608001604052808481526020018981526020014281526020013373ffffffffffffffffffffffffffffffffffffffff168152509050611fee86868d84613696565b505b60008a60ff16036120785781876120079190615115565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008760ff1660ff168152602001908152602001600020600082825461206c9190614c14565b925050819055506120f1565b81876120849190615115565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008660ff1660ff16815260200190815260200160002060008282546120e99190614c14565b925050819055505b7f11340760e313c90226d3979be72d7e5c52ef1aa822d8e8acf10e1c0dc73c0a2089898985334260405161212a969594939291906151c3565b60405180910390a150505050505050505050565b600061214983611471565b61215257600080fd5b61215b836113e0565b82111561216757600080fd5b600061217284610b1c565b905082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360ff1660ff16815260200190815260200160002060008282546121da9190614c14565b925050819055506000600160008360ff1660ff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600115158173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876040518363ffffffff1660e01b8152600401612261929190615232565b6020604051808303816000875af1158015612280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a49190615287565b1515146122b057600080fd5b7fc0a144e0d9af86fa328820e6f7f9e66f6e2a7248ff06a92aa13dc1f01e26934f853386426040516122e594939291906149f4565b60405180910390a16122f6856113e0565b9250505092915050565b6000600560019054906101000a900460ff16905090565b600080600190505b600560019054906101000a900460ff1660ff168160ff16116124b05760016000600360008460ff1660ff16815260200190815260200160002060008154811061236b5761236a614846565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff1660ff1681526020019081526020016000206001016040516123af9190614bfd565b6040518091039020848051906020012014801561244d575060016000600360008460ff1660ff1681526020019081526020016000206001815481106123f7576123f6614846565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff1660ff16815260200190815260200160002060010160405161243b9190614bfd565b60405180910390208380519060200120145b1561249d576124946040518060400160405280601781526020017f52657475726e696e67206d61726b657420696e646578200000000000000000008152508260ff16612a7d565b809150506124f6565b80806124a890614875565b91505061231f565b506124f16040518060400160405280601781526020017f52657475726e696e67206d61726b657420696e646578200000000000000000008152506000612a7d565b600090505b92915050565b612504612b19565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256a90615326565b60405180910390fd5b61257c81612ccf565b50565b61258883611471565b61259157600080fd5b61259a82611471565b6125a357600080fd5b6000806000808760ff16036125cd576125bb86610b1c565b92506125c685610b1c565b91506125e4565b6125d685610b1c565b92506125e186610b1c565b91505b6000600460008360ff1660ff16815260200190815260200160002060000160008960ff1660ff168152602001908152602001600020600201541161262757600080fd5b60008060006001600460008660ff1660ff16815260200190815260200160002060000160008c60ff1660ff1681526020019081526020016000206002015461266f9190614c14565b67ffffffffffffffff81111561268857612687614005565b5b6040519080825280602002602001820160405280156126b65781602001602082028036833780820191505090505b50905060008060005b600460008860ff1660ff16815260200190815260200160002060000160008e60ff1660ff1681526020019081526020016000206002015481101561288d57600460008860ff1660ff16815260200190815260200160002060000160008e60ff1660ff168152602001908152602001600020600301818154811061274557612744614846565b5b90600052602060002001548a036127f95760019550600460008860ff1660ff16815260200190815260200160002060000160008e60ff1660ff16815260200190815260200160002060010160008b8152602001908152602001600020600101549250600460008860ff1660ff16815260200190815260200160002060000160008e60ff1660ff16815260200190815260200160002060010160008b815260200190815260200160002060000154915061287a565b600460008860ff1660ff16815260200190815260200160002060000160008e60ff1660ff168152602001908152602001600020600301818154811061284157612840614846565b5b906000526020600020015484868151811061285f5761285e614846565b5b602002602001018181525050848061287690614c48565b9550505b808061288590614c48565b9150506126bf565b508461289857600080fd5b600460008760ff1660ff16815260200190815260200160002060000160008d60ff1660ff16815260200190815260200160002060020160008154809291906128df90615346565b919050555082600460008860ff1660ff16815260200190815260200160002060000160008e60ff1660ff168152602001908152602001600020600301908051906020019061292e929190613d04565b5060008c60ff16036129b75780826129469190615115565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960ff1660ff16815260200190815260200160002060008282546129ab919061491b565b92505081905550612a30565b80826129c39190615115565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a60ff1660ff1681526020019081526020016000206000828254612a28919061491b565b925050819055505b7f9a61c2300d2dd6e5e6c4d4860206d72177034372cf558a91f14cce7c88fb38dc8b8b8b3342604051612a6795949392919061536f565b60405180910390a1505050505050505050505050565b612b158282604051602401612a939291906153d0565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613aa5565b5050565b612b21613ace565b73ffffffffffffffffffffffffffffffffffffffff16612b3f611448565b73ffffffffffffffffffffffffffffffffffffffff1614612b95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8c9061544c565b60405180910390fd5b565b612c31838383604051602401612baf9392919061546c565b6040516020818303038152906040527fca47c4eb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613aa5565b505050565b612ccc81604051602401612c4a91906141d1565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613aa5565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612e2d838383604051602401612dab939291906154aa565b6040516020818303038152906040527f2ced7cef000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613aa5565b505050565b612ec881604051602401612e4691906154f6565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613aa5565b50565b6000806000600460008360ff1660ff16815260200190815260200160002060000160008860ff1660ff1681526020019081526020016000206002015490506000805b8281101561367757600086600001510315613677576000600460008660ff1660ff16815260200190815260200160002060000160008b60ff1660ff1681526020019081526020016000206003018281548110612f6c57612f6b614846565b5b906000526020600020015490506000600460008760ff1660ff16815260200190815260200160002060000160008c60ff1660ff16815260200190815260200160002060010160008381526020019081526020016000206000015490506000600460008860ff1660ff16815260200190815260200160002060000160008d60ff1660ff168152602001908152602001600020600101600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008c60ff161480156130975750600460008860ff1660ff16815260200190815260200160002060000160008d60ff1660ff1681526020019081526020016000206001016000848152602001908152602001600020600101548960200151105b156130a457505050613677565b60018c60ff161480156131045750600460008860ff1660ff16815260200190815260200160002060000160008d60ff1660ff1681526020019081526020016000206001016000848152602001908152602001600020600101548960200151115b1561311157505050613677565b818960000151106133c057818960000181815161312e9190614c14565b915081815250506000600460008960ff1660ff16815260200190815260200160002060000160008e60ff1660ff168152602001908152602001600020600101600085815260200190815260200160002060000181905550848061319090614c48565b9550507f8e0f1287f1f458f620409868b99eada1c8f01cf7a235aa33543d4c29b230bde08c8c8c8c6020015186426040516131d096959493929190615518565b60405180910390a160008c60ff16036132d1578189602001516131f39190615115565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c60ff1660ff1681526020019081526020016000206000828254613258919061491b565b9250508190555081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d60ff1660ff16815260200190815260200160002060008282546132c5919061491b565b925050819055506133bb565b8189602001516132e19190615115565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d60ff1660ff1681526020019081526020016000206000828254613346919061491b565b9250508190555081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c60ff1660ff16815260200190815260200160002060008282546133b3919061491b565b925050819055505b613661565b8860000151600460008960ff1660ff16815260200190815260200160002060000160008e60ff1660ff1681526020019081526020016000206001016000858152602001908152602001600020600001600082825461341e9190614c14565b925050819055507f8e0f1287f1f458f620409868b99eada1c8f01cf7a235aa33543d4c29b230bde08c8c8c8c60200151864260405161346296959493929190615518565b60405180910390a160008c60ff160361356757886000015189602001516134899190615115565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c60ff1660ff16815260200190815260200160002060008282546134ee919061491b565b9250508190555081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d60ff1660ff168152602001908152602001600020600082825461355b919061491b565b92505081905550613655565b8860000151896020015161357b9190615115565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d60ff1660ff16815260200190815260200160002060008282546135e0919061491b565b9250508190555081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c60ff1660ff168152602001908152602001600020600082825461364d919061491b565b925050819055505b60008960000181815250505b505050808061366f90614c48565b915050612f0d565b5061368482828a86613ad6565b84600001519350505050949350505050565b60006136a3858585610ba5565b5091505060006136b3868661125d565b90506000600460008360ff1660ff16815260200190815260200160002060000160008660ff1660ff168152602001908152602001600020600001600081546136fa90614c48565b919050819055905060008167ffffffffffffffff81111561371e5761371d614005565b5b60405190808252806020026020018201604052801561374c5781602001602082028036833780820191505090505b509050600080600460008660ff1660ff16815260200190815260200160002060000160008960ff1660ff16815260200190815260200160002060020154036137b85782826000815181106137a3576137a2614846565b5b60200260200101818152505060019050613915565b6000805b600460008760ff1660ff16815260200190815260200160002060000160008a60ff1660ff168152602001908152602001600020600201548110156138ec5782158015613825575086818151811061381657613815614846565b5b60200260200101518860200151115b1561385b578484838061383790614c48565b94508151811061384a57613849614846565b5b602002602001018181525050600192505b600460008760ff1660ff16815260200190815260200160002060000160008a60ff1660ff16815260200190815260200160002060030181815481106138a3576138a2614846565b5b90600052602060002001548483806138ba90614c48565b9450815181106138cd576138cc614846565b5b60200260200101818152505080806138e490614c48565b9150506137bc565b5081613913578383828151811061390657613905614846565b5b6020026020010181815250505b505b81600460008660ff1660ff16815260200190815260200160002060000160008960ff1660ff168152602001908152602001600020600301908051906020019061395f929190613d04565b50600460008560ff1660ff16815260200190815260200160002060000160008860ff1660ff16815260200190815260200160002060020160008154809291906139a790614c48565b9190505550604051806080016040528087600001518152602001876020015181526020014281526020013373ffffffffffffffffffffffffffffffffffffffff16815250600460008660ff1660ff16815260200190815260200160002060000160008960ff1660ff168152602001908152602001600020600101600085815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050505050505050505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600033905090565b60008385613ae49190614c14565b905060008167ffffffffffffffff811115613b0257613b01614005565b5b604051908082528060200260200182016040528015613b305781602001602082028036833780820191505090505b50905060005b82811015613bce57600460008560ff1660ff16815260200190815260200160002060000160008660ff1660ff1681526020019081526020016000206003018682613b80919061491b565b81548110613b9157613b90614846565b5b9060005260206000200154828281518110613baf57613bae614846565b5b6020026020010181815250508080613bc690614c48565b915050613b36565b5081600460008560ff1660ff16815260200190815260200160002060000160008660ff1660ff1681526020019081526020016000206002018190555080600460008560ff1660ff16815260200190815260200160002060000160008660ff1660ff1681526020019081526020016000206003019080519060200190613c54929190613d04565b50505050505050565b82805482825590600052602060002090601f01602090048101928215613cf35791602002820160005b83821115613cc457835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302613c86565b8015613cf15782816101000a81549060ff0219169055600101602081600001049283019260010302613cc4565b505b509050613d009190613d51565b5090565b828054828255906000526020600020908101928215613d40579160200282015b82811115613d3f578251825591602001919060010190613d24565b5b509050613d4d9190613d51565b5090565b5b80821115613d6a576000816000905550600101613d52565b5090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613dd4578082015181840152602081019050613db9565b60008484015250505050565b6000601f19601f8301169050919050565b6000613dfc82613d9a565b613e068185613da5565b9350613e16818560208601613db6565b613e1f81613de0565b840191505092915050565b6000613e368383613df1565b905092915050565b6000602082019050919050565b6000613e5682613d6e565b613e608185613d79565b935083602082028501613e7285613d8a565b8060005b85811015613eae5784840389528151613e8f8582613e2a565b9450613e9a83613e3e565b925060208a01995050600181019050613e76565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613f1782613eec565b9050919050565b613f2781613f0c565b82525050565b6000613f398383613f1e565b60208301905092915050565b6000602082019050919050565b6000613f5d82613ec0565b613f678185613ecb565b9350613f7283613edc565b8060005b83811015613fa3578151613f8a8882613f2d565b9750613f9583613f45565b925050600181019050613f76565b5085935050505092915050565b60006040820190508181036000830152613fca8185613e4b565b90508181036020830152613fde8184613f52565b90509392505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61403d82613de0565b810181811067ffffffffffffffff8211171561405c5761405b614005565b5b80604052505050565b600061406f613fe7565b905061407b8282614034565b919050565b600067ffffffffffffffff82111561409b5761409a614005565b5b6140a482613de0565b9050602081019050919050565b82818337600083830152505050565b60006140d36140ce84614080565b614065565b9050828152602081018484840111156140ef576140ee614000565b5b6140fa8482856140b1565b509392505050565b600082601f83011261411757614116613ffb565b5b81356141278482602086016140c0565b91505092915050565b6000819050919050565b61414381614130565b811461414e57600080fd5b50565b6000813590506141608161413a565b92915050565b6000806040838503121561417d5761417c613ff1565b5b600083013567ffffffffffffffff81111561419b5761419a613ff6565b5b6141a785828601614102565b92505060206141b885828601614151565b9150509250929050565b6141cb81614130565b82525050565b60006020820190506141e660008301846141c2565b92915050565b60006020828403121561420257614201613ff1565b5b600082013567ffffffffffffffff8111156142205761421f613ff6565b5b61422c84828501614102565b91505092915050565b600060ff82169050919050565b61424b81614235565b82525050565b60006020820190506142666000830184614242565b92915050565b61427581614235565b811461428057600080fd5b50565b6000813590506142928161426c565b92915050565b6000806000606084860312156142b1576142b0613ff1565b5b60006142bf86828701614283565b93505060206142d086828701614283565b92505060406142e186828701614283565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61432081614130565b82525050565b60006143328383614317565b60208301905092915050565b6000602082019050919050565b6000614356826142eb565b61436081856142f6565b935061436b83614307565b8060005b8381101561439c5781516143838882614326565b975061438e8361433e565b92505060018101905061436f565b5085935050505092915050565b600060608201905081810360008301526143c3818661434b565b905081810360208301526143d7818561434b565b905081810360408301526143eb818461434b565b9050949350505050565b6000604082019050818103600083015261440f8185613e4b565b90508181036020830152614423818461434b565b90509392505050565b6000806040838503121561444357614442613ff1565b5b600061445185828601614283565b925050602061446285828601614283565b9150509250929050565b61447581613f0c565b82525050565b6000602082019050614490600083018461446c565b92915050565b60008115159050919050565b6144ab81614496565b82525050565b60006020820190506144c660008301846144a2565b92915050565b600060408201905081810360008301526144e68185613e4b565b905081810360208301526144fa8184613e4b565b90509392505050565b61450c81613f0c565b811461451757600080fd5b50565b60008135905061452981614503565b92915050565b6000806040838503121561454657614545613ff1565b5b600083013567ffffffffffffffff81111561456457614563613ff6565b5b61457085828601614102565b92505060206145818582860161451a565b9150509250929050565b600080600080600060a086880312156145a7576145a6613ff1565b5b60006145b588828901614283565b955050602086013567ffffffffffffffff8111156145d6576145d5613ff6565b5b6145e288828901614102565b945050604086013567ffffffffffffffff81111561460357614602613ff6565b5b61460f88828901614102565b935050606061462088828901614151565b925050608061463188828901614151565b9150509295509295909350565b6000806040838503121561465557614654613ff1565b5b600083013567ffffffffffffffff81111561467357614672613ff6565b5b61467f85828601614102565b925050602083013567ffffffffffffffff8111156146a05761469f613ff6565b5b6146ac85828601614102565b9150509250929050565b6000602082840312156146cc576146cb613ff1565b5b60006146da8482850161451a565b91505092915050565b600080600080608085870312156146fd576146fc613ff1565b5b600061470b87828801614283565b945050602085013567ffffffffffffffff81111561472c5761472b613ff6565b5b61473887828801614102565b935050604085013567ffffffffffffffff81111561475957614758613ff6565b5b61476587828801614102565b925050606061477687828801614151565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806147c957607f821691505b6020821081036147dc576147db614782565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061481c82614235565b915061482783614235565b9250828203905060ff8111156148405761483f6147e2565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061488082614235565b915060ff8203614893576148926147e2565b5b600182019050919050565b600082825260208201905092915050565b7f546f6b656e206e6f742070726573656e74000000000000000000000000000000600082015250565b60006148e560118361489e565b91506148f0826148af565b602082019050919050565b60006020820190508181036000830152614914816148d8565b9050919050565b600061492682614130565b915061493183614130565b9250828201905080821115614949576149486147e2565b5b92915050565b7f416d6f756e74206f766572666c6f770000000000000000000000000000000000600082015250565b6000614985600f8361489e565b91506149908261494f565b602082019050919050565b600060208201905081810360008301526149b481614978565b9050919050565b60006149c682613d9a565b6149d0818561489e565b93506149e0818560208601613db6565b6149e981613de0565b840191505092915050565b60006080820190508181036000830152614a0e81876149bb565b9050614a1d602083018661446c565b614a2a60408301856141c2565b614a3760608301846141c2565b95945050505050565b6000614a4b82614235565b9150614a5683614235565b9250828201905060ff811115614a6f57614a6e6147e2565b5b92915050565b7f4d61726b657420496e646578206f766572666c6f770000000000000000000000600082015250565b6000614aab60158361489e565b9150614ab682614a75565b602082019050919050565b60006020820190508181036000830152614ada81614a9e565b9050919050565b6000819050919050565b6000614b06614b01614afc84614235565b614ae1565b614130565b9050919050565b614b1681614aeb565b82525050565b6000606082019050614b316000830186614b0d565b8181036020830152614b4381856149bb565b9050614b5260408301846141c2565b949350505050565b600081905092915050565b60008190508160005260206000209050919050565b60008154614b87816147b1565b614b918186614b5a565b94506001821660008114614bac5760018114614bc157614bf4565b60ff1983168652811515820286019350614bf4565b614bca85614b65565b60005b83811015614bec57815481890152600182019150602081019050614bcd565b838801955050505b50505092915050565b6000614c098284614b7a565b915081905092915050565b6000614c1f82614130565b9150614c2a83614130565b9250828203905081811115614c4257614c416147e2565b5b92915050565b6000614c5382614130565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614c8557614c846147e2565b5b600182019050919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154614cbd816147b1565b614cc78186614c90565b94506001821660008114614ce25760018114614cf757614d2a565b60ff1983168652811515820286019350614d2a565b614d0085614c9b565b60005b83811015614d2257815481890152600182019150602081019050614d03565b838801955050505b50505092915050565b6000614d3f8284614cb0565b915081905092915050565b6000614d5582613d9a565b614d5f8185614c90565b9350614d6f818560208601613db6565b80840191505092915050565b6000614d878284614d4a565b915081905092915050565b7f546f6b656e20616c726561647920657869737473000000000000000000000000600082015250565b6000614dc860148361489e565b9150614dd382614d92565b602082019050919050565b60006020820190508181036000830152614df781614dbb565b9050919050565b7f546f6b656e20496e646578206f766572666c6f77000000000000000000000000600082015250565b6000614e3460148361489e565b9150614e3f82614dfe565b602082019050919050565b60006020820190508181036000830152614e6381614e27565b9050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614eb77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614e7a565b614ec18683614e7a565b95508019841693508086168417925050509392505050565b6000614ef4614eef614eea84614130565b614ae1565b614130565b9050919050565b6000819050919050565b614f0e83614ed9565b614f22614f1a82614efb565b848454614e87565b825550505050565b600090565b614f37614f2a565b614f42818484614f05565b505050565b5b81811015614f6657614f5b600082614f2f565b600181019050614f48565b5050565b601f821115614fab57614f7c81614c9b565b614f8584614e6a565b81016020851015614f94578190505b614fa8614fa085614e6a565b830182614f47565b50505b505050565b600082821c905092915050565b6000614fce60001984600802614fb0565b1980831691505092915050565b6000614fe78383614fbd565b9150826002028217905092915050565b61500082613d9a565b67ffffffffffffffff81111561501957615018614005565b5b61502382546147b1565b61502e828285614f6a565b600060209050601f831160018114615061576000841561504f578287015190505b6150598582614fdb565b8655506150c1565b601f19841661506f86614c9b565b60005b8281101561509757848901518255600182019150602085019450602081019050615072565b868310156150b457848901516150b0601f891682614fbd565b8355505b6001600288020188555050505b505050505050565b60006080820190506150de6000830187614b0d565b81810360208301526150f081866149bb565b90506150ff604083018561446c565b61510c60608301846141c2565b95945050505050565b600061512082614130565b915061512b83614130565b925082820261513981614130565b915082820484148315176151505761514f6147e2565b5b5092915050565b7f4e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b600061518d60108361489e565b915061519882615157565b602082019050919050565b600060208201905081810360008301526151bc81615180565b9050919050565b600060c08201905081810360008301526151dd81896149bb565b905081810360208301526151f181886149bb565b905061520060408301876141c2565b61520d60608301866141c2565b61521a608083018561446c565b61522760a08301846141c2565b979650505050505050565b6000604082019050615247600083018561446c565b61525460208301846141c2565b9392505050565b61526481614496565b811461526f57600080fd5b50565b6000815190506152818161525b565b92915050565b60006020828403121561529d5761529c613ff1565b5b60006152ab84828501615272565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061531060268361489e565b915061531b826152b4565b604082019050919050565b6000602082019050818103600083015261533f81615303565b9050919050565b600061535182614130565b915060008203615364576153636147e2565b5b600182039050919050565b600060a082019050818103600083015261538981886149bb565b9050818103602083015261539d81876149bb565b90506153ac60408301866141c2565b6153b9606083018561446c565b6153c660808301846141c2565b9695505050505050565b600060408201905081810360008301526153ea81856149bb565b90506153f960208301846141c2565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061543660208361489e565b915061544182615400565b602082019050919050565b6000602082019050818103600083015261546581615429565b9050919050565b6000606082019050818103600083015261548681866149bb565b905061549560208301856141c2565b6154a260408301846141c2565b949350505050565b600060608201905081810360008301526154c481866149bb565b905081810360208301526154d881856149bb565b905081810360408301526154ec81846149bb565b9050949350505050565b6000602082019050818103600083015261551081846149bb565b905092915050565b600060c08201905061552d6000830189614242565b61553a6020830188614242565b6155476040830187614242565b61555460608301866141c2565b61556160808301856141c2565b61556e60a08301846141c2565b97965050505050505056fea2646970667358221220d2dd54c2517c24f3aa2f85ce660ab3d5a4777953ff255aa5c94a0de62dd05b2c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Swap.sol:Swap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 260,
        "contract": "contracts/Swap.sol:Swap",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint8,t_struct(Token)227_storage)"
      },
      {
        "astId": 266,
        "contract": "contracts/Swap.sol:Swap",
        "label": "tokenBalanceForAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 271,
        "contract": "contracts/Swap.sol:Swap",
        "label": "buyToSell",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint8,t_array(t_uint8)dyn_storage)"
      },
      {
        "astId": 276,
        "contract": "contracts/Swap.sol:Swap",
        "label": "ExchangeMarket",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint8,t_struct(Market)255_storage)"
      },
      {
        "astId": 278,
        "contract": "contracts/Swap.sol:Swap",
        "label": "tokenIndex",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 280,
        "contract": "contracts/Swap.sol:Swap",
        "label": "marketIndex",
        "offset": 1,
        "slot": "5",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Order)236_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Swap.Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)236_storage"
      },
      "t_mapping(t_uint8,t_array(t_uint8)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint8[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint8)dyn_storage"
      },
      "t_mapping(t_uint8,t_struct(Market)255_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct Swap.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)255_storage"
      },
      "t_mapping(t_uint8,t_struct(OrderBook)249_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct Swap.OrderBook)",
        "numberOfBytes": "32",
        "value": "t_struct(OrderBook)249_storage"
      },
      "t_mapping(t_uint8,t_struct(Token)227_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct Swap.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)227_storage"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Market)255_storage": {
        "encoding": "inplace",
        "label": "struct Swap.Market",
        "members": [
          {
            "astId": 254,
            "contract": "contracts/Swap.sol:Swap",
            "label": "Orders",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint8,t_struct(OrderBook)249_storage)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Order)236_storage": {
        "encoding": "inplace",
        "label": "struct Swap.Order",
        "members": [
          {
            "astId": 229,
            "contract": "contracts/Swap.sol:Swap",
            "label": "quantity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 231,
            "contract": "contracts/Swap.sol:Swap",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 233,
            "contract": "contracts/Swap.sol:Swap",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 235,
            "contract": "contracts/Swap.sol:Swap",
            "label": "user",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(OrderBook)249_storage": {
        "encoding": "inplace",
        "label": "struct Swap.OrderBook",
        "members": [
          {
            "astId": 238,
            "contract": "contracts/Swap.sol:Swap",
            "label": "orderIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 243,
            "contract": "contracts/Swap.sol:Swap",
            "label": "orders",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(Order)236_storage)"
          },
          {
            "astId": 245,
            "contract": "contracts/Swap.sol:Swap",
            "label": "ordersCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 248,
            "contract": "contracts/Swap.sol:Swap",
            "label": "ordersQueue",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Token)227_storage": {
        "encoding": "inplace",
        "label": "struct Swap.Token",
        "members": [
          {
            "astId": 224,
            "contract": "contracts/Swap.sol:Swap",
            "label": "contractAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 226,
            "contract": "contracts/Swap.sol:Swap",
            "label": "symbolName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}