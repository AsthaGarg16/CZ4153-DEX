{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogAddMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "EC20TokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogAddToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogBuyToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogCancelBuyOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogCancelSellOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogCreateBuyOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogCreateSellOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogDepositToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "typeOfOrder",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "symbolName1",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "symbolName2",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogFulfillOrder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName1",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName2",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogSellToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LogWithdrawToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        }
      ],
      "name": "addMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "EC20TokenAddress",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "typeOfOrder",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "buyTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sellTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "orderIndex",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "typeOfOrder",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "buySymbolName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sellSymbolName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isMarketOrder",
          "type": "bool"
        }
      ],
      "name": "createOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllMarkets",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokenBalanceForUser",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokens",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "buyTokenIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "sellTokenIndex",
          "type": "uint8"
        }
      ],
      "name": "getMarketIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "buyTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sellTokenSymbol",
          "type": "string"
        }
      ],
      "name": "getMarketIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "buyTokenIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "sellTokenIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "type_of_order",
          "type": "uint8"
        }
      ],
      "name": "getOrderBook",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        }
      ],
      "name": "getTokenBalanceForUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        }
      ],
      "name": "getTokenIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        }
      ],
      "name": "hasToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbolName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8318d643b1880e76f7c0ef321894efde9d9a82517b30977bfd8ceae385355271",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "5357485",
    "logsBloom": "0x
    "blockHash": "0x4156685219d4f4c1a5cdd52cefc566e7a080ef3e8dc0f20fd51184a851de4762",
    "transactionHash": "0x8318d643b1880e76f7c0ef321894efde9d9a82517b30977bfd8ceae385355271",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x8318d643b1880e76f7c0ef321894efde9d9a82517b30977bfd8ceae385355271",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4156685219d4f4c1a5cdd52cefc566e7a080ef3e8dc0f20fd51184a851de4762"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "5357485",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "347291694ce061beae53a25db435bea8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogAddMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"EC20TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogAddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogBuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogCancelBuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogCancelSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogCreateBuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogCreateSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogDepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"typeOfOrder\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"symbolName1\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"symbolName2\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogFulfillOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName1\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName2\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogSellToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"}],\"name\":\"addMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"EC20TokenAddress\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"typeOfOrder\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"buyTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"typeOfOrder\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"buySymbolName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellSymbolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMarketOrder\",\"type\":\"bool\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenBalanceForUser\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokens\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"buyTokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTokenIndex\",\"type\":\"uint8\"}],\"name\":\"getMarketIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"buyTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sellTokenSymbol\",\"type\":\"string\"}],\"name\":\"getMarketIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"buyTokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"type_of_order\",\"type\":\"uint8\"}],\"name\":\"getOrderBook\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"}],\"name\":\"getTokenBalanceForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"}],\"name\":\"getTokenIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"}],\"name\":\"hasToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swap.sol\":\"Swap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ncontract Swap is Ownable {\\n    //custom data structures for implementing features\\n\\n    //To store token details\\n    struct Token {\\n        address contractAddress;\\n        string symbolName;\\n    }\\n\\n    //to store individual order details\\n    struct Order {\\n        uint256 quantity;\\n        uint256 price;\\n        uint256 timestamp;\\n        address user;\\n    }\\n\\n    //to store the whole list of specific types of orders for each market\\n    struct OrderBook {\\n        uint256 orderIndex;\\n        mapping(uint256 => Order) orders;\\n        uint256 ordersCount;\\n        uint256[] ordersQueue;\\n    }\\n\\n    //Each market is made of corresponding buy orderbook and sell orderbook\\n    struct Market {\\n        mapping(uint8 => OrderBook) Orders;\\n    }\\n\\n    //Mapping for storage\\n\\n    mapping(uint8 => Token) tokenInfo;\\n    mapping(address => mapping(uint8 => uint256)) tokenBalanceForAddress;\\n    mapping(uint8 => uint8[]) buyToSell; //mapping of market index to the corresponding buy and sell token for that market\\n    mapping(uint8 => Market) ExchangeMarket;\\n    uint8 tokenIndex; //total types of tokens available\\n    uint8 marketIndex; //total types of markets\\n\\n    constructor() {\\n        tokenIndex = 0;\\n        marketIndex = 0;\\n    }\\n\\n    /* EVENTS */\\n\\n    event LogDepositToken(\\n        string symbolName,\\n        address accountAddress,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    event LogWithdrawToken(\\n        string symbolName,\\n        address accountAddress,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    event LogAddToken(\\n        uint256 tokenIndex,\\n        string symbolName,\\n        address EC20TokenAddress,\\n        uint256 timestamp\\n    );\\n\\n    event LogAddMarket(\\n        uint256 marketIndex,\\n        string symbolName,\\n        uint256 timestamp\\n    );\\n\\n    event LogBuyToken(\\n        string symbolName1,\\n        string symbolName2,\\n        uint256 price,\\n        uint256 amount,\\n        address buyer,\\n        uint256 timestamp\\n    );\\n\\n    event LogSellToken(\\n        string symbolName1,\\n        string symbolName2,\\n        uint256 price,\\n        uint256 amount,\\n        address buyer,\\n        uint256 timestamp\\n    );\\n\\n    event LogCreateBuyOrder(\\n        string symbolName1,\\n        string symbolName2,\\n        uint256 price,\\n        uint256 amount,\\n        address buyer,\\n        uint256 timestamp\\n    );\\n\\n    event LogCreateSellOrder(\\n        string symbolName1,\\n        string symbolName2,\\n        uint256 price,\\n        uint256 amount,\\n        address seller,\\n        uint256 timestamp\\n    );\\n\\n    event LogFulfillOrder(\\n        uint8 typeOfOrder,\\n        uint8 symbolName1,\\n        uint8 symbolName2,\\n        uint256 price,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    event LogCancelBuyOrder(\\n        string symbolName1,\\n        string symbolName2,\\n        uint256 orderIndex,\\n        address buyer,\\n        uint256 timestamp\\n    );\\n    event LogCancelSellOrder(\\n        string symbolName1,\\n        string symbolName2,\\n        uint256 orderIndex,\\n        address seller,\\n        uint256 timestamp\\n    );\\n\\n    /* FUNCTIONS TO PROVIDE FEATURES */\\n\\n    // Owner's AddToken ability\\n    function addToken(string memory symbolName, address EC20TokenAddress)\\n        public\\n        onlyOwner\\n    {\\n        require(!hasToken(symbolName), \\\"Token already exists\\\");\\n        require(tokenIndex + 1 >= tokenIndex, \\\"Token Index overflow\\\");\\n\\n        tokenIndex++;\\n        tokenInfo[tokenIndex].symbolName = symbolName;\\n        tokenInfo[tokenIndex].contractAddress = EC20TokenAddress;\\n\\n        if (tokenIndex > 1) {\\n            addMarket(symbolName);\\n        }\\n\\n        emit LogAddToken(\\n            tokenIndex,\\n            symbolName,\\n            EC20TokenAddress,\\n            block.timestamp\\n        );\\n    }\\n\\n    //A Market is added with combination with previous tokens so all exchanges are available\\n    function addMarket(string memory symbolName) public onlyOwner {\\n        require(marketIndex + 1 >= marketIndex, \\\"Market Index overflow\\\");\\n\\n        for (uint8 i = 1; i < tokenIndex; i++) {\\n            console.log(\\\"Adding market \\\", tokenIndex, i);\\n            marketIndex++;\\n            uint8[] memory toAdd = new uint8[](2);\\n            toAdd[0] = tokenIndex;\\n            toAdd[1] = i;\\n            buyToSell[marketIndex] = toAdd;\\n        }\\n\\n        console.log(\\\"Total markets \\\", marketIndex);\\n\\n        emit LogAddMarket(marketIndex, symbolName, block.timestamp);\\n    }\\n\\n    // Address's Tokens account management - ability to deposit tokens\\n    function depositToken(string memory symbolName, uint256 amount)\\n        public\\n        returns (uint256 tokenBalance)\\n    {\\n        require(hasToken(symbolName), \\\"Token not present\\\");\\n        require(\\n            getTokenBalanceForUser(symbolName) + amount >=\\n                getTokenBalanceForUser(symbolName),\\n            \\\"Amount overflow\\\"\\n        );\\n        uint8 _tokenIndex = getTokenIndex(symbolName);\\n        tokenBalanceForAddress[msg.sender][_tokenIndex] += amount;\\n        // IERC20 token = IERC20(tokenInfo[_tokenIndex].contractAddress);\\n        //require(\\n        //     tokens[_tokenIndex].transferFrom(\\n        //         msg.sender,\\n        //         address(this),\\n        //         amount\\n        //     ) == true,\\n        //     \\\"Transfer could not happen\\\"\\n        // );\\n        //need to approve\\n        console.log(\\n            \\\"token balance\\\",\\n            tokenBalanceForAddress[msg.sender][_tokenIndex]\\n        );\\n        emit LogDepositToken(symbolName, msg.sender, amount, block.timestamp);\\n        return getTokenBalanceForUser(symbolName);\\n    }\\n\\n    // Address's Tokens account management - ability to withdraw tokens\\n    function withdrawToken(string memory symbolName, uint256 amount)\\n        public\\n        returns (uint256 tokenBalance)\\n    {\\n        require(hasToken(symbolName));\\n        require(amount <= getTokenBalanceForUser(symbolName));\\n\\n        uint8 _tokenIndex = getTokenIndex(symbolName);\\n        tokenBalanceForAddress[msg.sender][_tokenIndex] -= amount;\\n        IERC20 token = IERC20(tokenInfo[_tokenIndex].contractAddress);\\n        require(token.transfer(msg.sender, amount) == true);\\n\\n        emit LogWithdrawToken(symbolName, msg.sender, amount, block.timestamp);\\n        return getTokenBalanceForUser(symbolName);\\n    }\\n\\n    //User submits market buy order\\n    // function buyMarketOrder(\\n    //     string memory buyTokenSymbol,\\n    //     string memory sellTokenSymbol,\\n    //     uint256 quantity\\n    // ) private {\\n    //     require(hasToken(buyTokenSymbol));\\n    //     require(hasToken(sellTokenSymbol));\\n\\n    //     uint8 _sellTokenIndex = getTokenIndex(sellTokenSymbol);\\n    //     uint8 _buyTokenIndex = getTokenIndex(buyTokenSymbol);\\n    //     uint8 _marketIndex = getMarketIndex(buyTokenSymbol, sellTokenSymbol);\\n    //     require(\\n    //         ExchangeMarket[_marketIndex][typeOfOrder].ordersCount > 0,\\n    //         \\\"Cannot place request\\\"\\n    //     );\\n    //     uint256 _buy_qty_balance = quantity;\\n    //     uint256 _currSellOrdersCount = ExchangeMarket[_marketIndex]\\n    //         [typeOfOrder]\\n    //         .ordersCount;\\n\\n    //     uint256 _countSellOrderFulfiled = 0;\\n    //     for (uint256 i = 0; i < _currSellOrdersCount; i++) {\\n    //         if (_buy_qty_balance == 0) break;\\n\\n    //         uint256 _orderIndex = ExchangeMarket[_marketIndex]\\n    //             [typeOfOrder]\\n    //             .ordersQueue[i];\\n    //         uint256 _orderPrice = ExchangeMarket[_marketIndex]\\n    //             [typeOfOrder]\\n    //             .orders[_orderIndex]\\n    //             .price;\\n    //         uint256 _orderAmount = ExchangeMarket[_marketIndex]\\n    //             [typeOfOrder]\\n    //             .orders[_orderIndex]\\n    //             .quantity;\\n    //         address _orderOwner = ExchangeMarket[_marketIndex]\\n    //             [typeOfOrder]\\n    //             .orders[_orderIndex]\\n    //             .user;\\n    //         if (_buy_qty_balance >= _orderAmount) {\\n    //             _buy_qty_balance -= _orderAmount;\\n\\n    //             ExchangeMarket[_marketIndex]\\n    //                 [typeOfOrder]\\n    //                 .orders[_orderIndex]\\n    //                 .quantity = 0;\\n    //             _countSellOrderFulfiled++;\\n    //             emit LogFulfilSellOrder(\\n    //                 sellTokenSymbol,\\n    //                 buyTokenSymbol,\\n    //                 _orderPrice,\\n    //                 _orderAmount,\\n    //                 block.timestamp\\n    //             );\\n    //             tokenBalanceForAddress[msg.sender][_sellTokenIndex] -=\\n    //                 _orderPrice *\\n    //                 _orderAmount;\\n    //             tokenBalanceForAddress[_orderOwner][_sellTokenIndex] +=\\n    //                 _orderPrice *\\n    //                 _orderAmount;\\n    //             tokenBalanceForAddress[msg.sender][\\n    //                 _buyTokenIndex\\n    //             ] += _orderAmount;\\n    //         } else {\\n    //             ExchangeMarket[_marketIndex]\\n    //                 [typeOfOrder]\\n    //                 .orders[_orderIndex]\\n    //                 .quantity -= _buy_qty_balance;\\n    //             emit LogFulfilSellOrder(\\n    //                 sellTokenSymbol,\\n    //                 buyTokenSymbol,\\n    //                 _orderPrice,\\n    //                 _orderAmount,\\n    //                 block.timestamp\\n    //             );\\n\\n    //             tokenBalanceForAddress[msg.sender][_sellTokenIndex] -=\\n    //                 _orderPrice *\\n    //                 _buy_qty_balance;\\n    //             tokenBalanceForAddress[_orderOwner][_sellTokenIndex] +=\\n    //                 _orderPrice *\\n    //                 _buy_qty_balance;\\n    //             tokenBalanceForAddress[msg.sender][\\n    //                 _buyTokenIndex\\n    //             ] += _buy_qty_balance;\\n\\n    //             _buy_qty_balance = 0;\\n    //         }\\n    //     }\\n\\n    //     // update sellOrderBook - ordersBook and ordersCount\\n    //     uint256 _newSellOrdersCount = _currSellOrdersCount -\\n    //         _countSellOrderFulfiled;\\n\\n    //     uint256[] memory _newSellOrdersQueue = new uint256[](\\n    //         _newSellOrdersCount\\n    //     );\\n    //     for (uint256 i = 0; i < _newSellOrdersCount; i++) {\\n    //         _newSellOrdersQueue[i] = ExchangeMarket[_marketIndex]\\n    //             [typeOfOrder]\\n    //             .ordersQueue[i + _countSellOrderFulfiled];\\n    //     }\\n\\n    //     ExchangeMarket[_marketIndex]\\n    //         [typeOfOrder]\\n    //         .ordersCount = _newSellOrdersCount;\\n    //     ExchangeMarket[_marketIndex]\\n    //         [typeOfOrder]\\n    //         .ordersQueue = _newSellOrdersQueue;\\n    // }\\n\\n    // function sellMarketOrder(\\n    //     string memory buyTokenSymbol,\\n    //     string memory sellTokenSymbol,\\n    //     uint256 quantity\\n    // ) private {\\n    //     require(hasToken(buyTokenSymbol));\\n    //     require(hasToken(sellTokenSymbol));\\n\\n    //     uint8 _sellTokenIndex = getTokenIndex(sellTokenSymbol);\\n    //     uint8 _buyTokenIndex = getTokenIndex(buyTokenSymbol);\\n    //     uint8 _marketIndex = getMarketIndex(sellTokenSymbol, buyTokenSymbol);\\n    //     require(\\n    //         ExchangeMarket[_marketIndex][typeOfOrder].ordersCount > 0,\\n    //         \\\"Cannot place request\\\"\\n    //     );\\n    //     uint256 _sell_qty_balance = quantity;\\n    //     uint256 _currBuyOrdersCount = ExchangeMarket[_marketIndex]\\n    //         [typeOfOrder]\\n    //         .ordersCount;\\n\\n    //     uint256 _countBuyOrderFulfiled = 0;\\n    //     for (uint256 i = 0; i < _currBuyOrdersCount; i++) {\\n    //         if (_sell_qty_balance == 0) break;\\n\\n    //         uint256 _orderIndex = ExchangeMarket[_marketIndex]\\n    //             [typeOfOrder]\\n    //             .ordersQueue[i];\\n    //         uint256 _orderPrice = ExchangeMarket[_marketIndex]\\n    //             [typeOfOrder]\\n    //             .orders[_orderIndex]\\n    //             .price;\\n    //         uint256 _orderAmount = ExchangeMarket[_marketIndex]\\n    //             [typeOfOrder]\\n    //             .orders[_orderIndex]\\n    //             .quantity;\\n    //         address _orderOwner = ExchangeMarket[_marketIndex]\\n    //             [typeOfOrder]\\n    //             .orders[_orderIndex]\\n    //             .user;\\n    //         if (_sell_qty_balance >= _orderAmount) {\\n    //             _sell_qty_balance -= _orderAmount;\\n\\n    //             ExchangeMarket[_marketIndex]\\n    //                 [typeOfOrder]\\n    //                 .orders[_orderIndex]\\n    //                 .quantity = 0;\\n    //             _countBuyOrderFulfiled++;\\n    //             emit LogFulfilBuyOrder(\\n    //                 sellTokenSymbol,\\n    //                 buyTokenSymbol,\\n    //                 _orderPrice,\\n    //                 _orderAmount,\\n    //                 block.timestamp\\n    //             );\\n    //             tokenBalanceForAddress[msg.sender][_sellTokenIndex] -=\\n    //                 _orderPrice *\\n    //                 _orderAmount;\\n    //             tokenBalanceForAddress[_orderOwner][_sellTokenIndex] +=\\n    //                 _orderPrice *\\n    //                 _orderAmount;\\n    //             tokenBalanceForAddress[msg.sender][\\n    //                 _buyTokenIndex\\n    //             ] += _orderAmount;\\n    //         } else {\\n    //             ExchangeMarket[_marketIndex]\\n    //                 [typeOfOrder]\\n    //                 .orders[_orderIndex]\\n    //                 .quantity -= _sell_qty_balance;\\n    //             emit LogFulfilBuyOrder(\\n    //                 sellTokenSymbol,\\n    //                 buyTokenSymbol,\\n    //                 _orderPrice,\\n    //                 _orderAmount,\\n    //                 block.timestamp\\n    //             );\\n\\n    //             tokenBalanceForAddress[msg.sender][_sellTokenIndex] -=\\n    //                 _orderPrice *\\n    //                 _sell_qty_balance;\\n    //             tokenBalanceForAddress[_orderOwner][_sellTokenIndex] +=\\n    //                 _orderPrice *\\n    //                 _sell_qty_balance;\\n    //             tokenBalanceForAddress[msg.sender][\\n    //                 _buyTokenIndex\\n    //             ] += _sell_qty_balance;\\n\\n    //             _sell_qty_balance = 0;\\n    //         }\\n    //     }\\n\\n    //     // update sellOrderBook - ordersBook and ordersCount\\n    //     uint256 _newBuyOrdersCount = _currBuyOrdersCount -\\n    //         _countBuyOrderFulfiled;\\n\\n    //     uint256[] memory _newBuyOrdersQueue = new uint256[](_newBuyOrdersCount);\\n    //     for (uint256 i = 0; i < _newBuyOrdersCount; i++) {\\n    //         _newBuyOrdersQueue[i] = ExchangeMarket[_marketIndex]\\n    //             [typeOfOrder]\\n    //             .ordersQueue[i + _countBuyOrderFulfiled];\\n    //     }\\n\\n    //     ExchangeMarket[_marketIndex]\\n    //         [typeOfOrder]\\n    //         .ordersCount = _newBuyOrdersCount;\\n    //     ExchangeMarket[_marketIndex]\\n    //         [typeOfOrder]\\n    //         .ordersQueue = _newBuyOrdersQueue;\\n    // }\\n\\n    function addOrder(\\n        uint8 tokenIndex1,\\n        uint8 tokenIndex2,\\n        uint8 typeOfOrder,\\n        Order memory toAdd\\n    ) private {\\n        console.log(\\\"In add order\\\");\\n        (, uint256[] memory prices, ) = getOrderBook(\\n            tokenIndex1,\\n            tokenIndex2,\\n            typeOfOrder\\n        );\\n\\n        uint8 _marketIndex = getMarketIndex(tokenIndex1, tokenIndex2);\\n        uint256 _newOrderIndex = ++ExchangeMarket[_marketIndex]\\n            .Orders[typeOfOrder]\\n            .orderIndex;\\n        uint256[] memory _newOrdersQueue = new uint256[](_newOrderIndex);\\n        bool _isOrderAdded = false;\\n\\n        if (ExchangeMarket[_marketIndex].Orders[typeOfOrder].ordersCount == 0) {\\n            _newOrdersQueue[0] = _newOrderIndex;\\n            _isOrderAdded = true;\\n        } else {\\n            uint256 _newOrdersQueueIndex = 0;\\n            for (\\n                uint256 i = 0;\\n                i <\\n                ExchangeMarket[_marketIndex].Orders[typeOfOrder].ordersCount;\\n                i++\\n            ) {\\n                if (!_isOrderAdded && toAdd.price > prices[i]) {\\n                    _newOrdersQueue[_newOrdersQueueIndex++] = _newOrderIndex;\\n                    _isOrderAdded = true;\\n                }\\n                _newOrdersQueue[_newOrdersQueueIndex++] = ExchangeMarket[\\n                    _marketIndex\\n                ].Orders[typeOfOrder].ordersQueue[i];\\n            }\\n            if (!_isOrderAdded) {\\n                _newOrdersQueue[_newOrdersQueueIndex] = _newOrderIndex;\\n            }\\n        }\\n        ExchangeMarket[_marketIndex]\\n            .Orders[typeOfOrder]\\n            .ordersQueue = _newOrdersQueue;\\n        ExchangeMarket[_marketIndex].Orders[typeOfOrder].ordersCount++;\\n        ExchangeMarket[_marketIndex].Orders[typeOfOrder].orders[\\n            _newOrderIndex\\n        ] = Order({\\n            quantity: toAdd.quantity,\\n            price: toAdd.price,\\n            user: msg.sender,\\n            timestamp: block.timestamp\\n        });\\n\\n        console.log(\\\"is order added\\\", _isOrderAdded);\\n    }\\n\\n    //0 - buy, 1- sell\\n    function createOrder(\\n        uint8 typeOfOrder, //A/B\\n        string memory buySymbolName, //A\\n        string memory sellSymbolName, //\\n        uint256 price,\\n        uint256 quantity,\\n        bool isMarketOrder\\n    ) public {\\n        console.log(\\\"creating order\\\");\\n        require(hasToken(buySymbolName), \\\"Token not present\\\");\\n        require(hasToken(sellSymbolName), \\\"Token not present\\\");\\n        console.log(\\\"creating order\\\", typeOfOrder);\\n        uint8 _primaryTokenIndex;\\n        uint8 _secondaryTokenIndex;\\n        uint8 _marketIndex;\\n        uint256 _qty_balance = quantity;\\n\\n        if (typeOfOrder == 0) {\\n            _primaryTokenIndex = getTokenIndex(buySymbolName);\\n            _secondaryTokenIndex = getTokenIndex(sellSymbolName);\\n            require(\\n                (!isMarketOrder &&\\n                    tokenBalanceForAddress[msg.sender][_secondaryTokenIndex] >=\\n                    price * quantity) || isMarketOrder,\\n                \\\"Not enough funds\\\"\\n            );\\n        } else {\\n            _primaryTokenIndex = getTokenIndex(sellSymbolName); //A\\n            _secondaryTokenIndex = getTokenIndex(buySymbolName); //B\\n            require(\\n                (!isMarketOrder &&\\n                    tokenBalanceForAddress[msg.sender][_primaryTokenIndex] >=\\n                    price * quantity) || isMarketOrder,\\n                \\\"Not enough funds\\\"\\n            );\\n        }\\n        _marketIndex = getMarketIndex(_primaryTokenIndex, _secondaryTokenIndex);\\n        uint8 index = typeOfOrder == 0 ? 1 : 0;\\n        console.log(\\\"index\\\", index);\\n        // _orderCount = ExchangeMarket[_marketIndex].Orders[index].ordersCount;\\n\\n        if (ExchangeMarket[_marketIndex].Orders[index].ordersCount > 0) {\\n            // fulfil buyOrder by checking against which sell orders can be fulfil\\n            //update\\n            _qty_balance = fulfillOrder(\\n                index,\\n                _primaryTokenIndex,\\n                _secondaryTokenIndex,\\n                Order({\\n                    quantity: quantity,\\n                    price: price,\\n                    timestamp: block.timestamp,\\n                    user: msg.sender\\n                }),\\n                isMarketOrder\\n            );\\n        }\\n        if (_qty_balance > 0) {\\n            Order memory toAdd = Order({\\n                quantity: _qty_balance,\\n                price: price,\\n                timestamp: block.timestamp,\\n                user: msg.sender\\n            });\\n            if (!isMarketOrder) {\\n                addOrder(\\n                    _primaryTokenIndex,\\n                    _secondaryTokenIndex,\\n                    typeOfOrder,\\n                    toAdd\\n                );\\n            }\\n        }\\n        if (typeOfOrder == 0) {\\n            tokenBalanceForAddress[msg.sender][_secondaryTokenIndex] -=\\n                price *\\n                _qty_balance;\\n        } else {\\n            tokenBalanceForAddress[msg.sender][_primaryTokenIndex] -=\\n                price *\\n                _qty_balance;\\n        }\\n\\n        // fire event\\n        emit LogCreateBuyOrder(\\n            buySymbolName,\\n            sellSymbolName,\\n            price,\\n            _qty_balance,\\n            msg.sender,\\n            block.timestamp\\n        );\\n    }\\n\\n    //Try if buy order can be immediately fulfilled even if partially\\n    function fulfillOrder(\\n        uint8 typeOfOrder, //A/B\\n        uint8 _primaryTokenIndex, //A\\n        uint8 _secondaryTokenIndex, //B\\n        Order memory toFulfill,\\n        bool isMarketOrder\\n    ) private returns (uint256) {\\n        console.log(\\\"in fulfill order\\\");\\n        uint8 _marketIndex = getMarketIndex(\\n            _primaryTokenIndex,\\n            _secondaryTokenIndex\\n        );\\n        //uint256 _qty_balance = quantity;\\n\\n        uint256 _currOrdersCount = ExchangeMarket[_marketIndex]\\n            .Orders[typeOfOrder]\\n            .ordersCount;\\n        console.log(\\\"_currOrdersCount\\\", _currOrdersCount);\\n        uint256 _countOrderFulfiled = 0;\\n        for (uint256 i = 0; i < _currOrdersCount; i++) {\\n            if (toFulfill.quantity == 0) break;\\n\\n            uint256 _orderIndex = ExchangeMarket[_marketIndex]\\n                .Orders[typeOfOrder]\\n                .ordersQueue[i];\\n\\n            uint256 _orderAmount = ExchangeMarket[_marketIndex]\\n                .Orders[typeOfOrder]\\n                .orders[_orderIndex]\\n                .quantity;\\n            address _orderOwner = ExchangeMarket[_marketIndex]\\n                .Orders[typeOfOrder]\\n                .orders[_orderIndex]\\n                .user;\\n            console.log(\\n                \\\"In fulfillOrder\\\",\\n                _orderIndex,\\n                _orderAmount,\\n                _orderOwner\\n            );\\n            if (\\n                typeOfOrder == 1 &&\\n                toFulfill.price <\\n                ExchangeMarket[_marketIndex]\\n                    .Orders[typeOfOrder]\\n                    .orders[_orderIndex]\\n                    .price &&\\n                !isMarketOrder\\n            ) break;\\n            else if (\\n                typeOfOrder == 0 &&\\n                toFulfill.price >\\n                ExchangeMarket[_marketIndex]\\n                    .Orders[typeOfOrder]\\n                    .orders[_orderIndex]\\n                    .price &&\\n                !isMarketOrder\\n            ) break;\\n\\n            if (toFulfill.quantity >= _orderAmount) {\\n                toFulfill.quantity -= _orderAmount;\\n\\n                ExchangeMarket[_marketIndex]\\n                    .Orders[typeOfOrder]\\n                    .orders[_orderIndex]\\n                    .quantity = 0;\\n                _countOrderFulfiled++;\\n                emit LogFulfillOrder(\\n                    typeOfOrder,\\n                    _primaryTokenIndex,\\n                    _secondaryTokenIndex,\\n                    toFulfill.price,\\n                    _orderAmount,\\n                    block.timestamp\\n                );\\n                if (typeOfOrder == 1) {\\n                    //price is fixed\\n                    tokenBalanceForAddress[_orderOwner][\\n                        _secondaryTokenIndex\\n                    ] += _orderAmount;\\n                    tokenBalanceForAddress[msg.sender][_primaryTokenIndex] +=\\n                        ExchangeMarket[_marketIndex]\\n                            .Orders[typeOfOrder]\\n                            .orders[_orderIndex]\\n                            .price *\\n                        _orderAmount;\\n                    tokenBalanceForAddress[msg.sender][\\n                        _secondaryTokenIndex\\n                    ] -= _orderAmount;\\n                } else {\\n                    tokenBalanceForAddress[_orderOwner][\\n                        _primaryTokenIndex\\n                    ] += _orderAmount;\\n                    tokenBalanceForAddress[msg.sender][_secondaryTokenIndex] +=\\n                        ExchangeMarket[_marketIndex]\\n                            .Orders[typeOfOrder]\\n                            .orders[_orderIndex]\\n                            .price *\\n                        _orderAmount;\\n                    tokenBalanceForAddress[msg.sender][\\n                        _primaryTokenIndex\\n                    ] -= _orderAmount;\\n                }\\n            } else {\\n                ExchangeMarket[_marketIndex]\\n                    .Orders[typeOfOrder]\\n                    .orders[_orderIndex]\\n                    .quantity -= toFulfill.quantity;\\n                emit LogFulfillOrder(\\n                    typeOfOrder,\\n                    _primaryTokenIndex,\\n                    _secondaryTokenIndex,\\n                    toFulfill.price,\\n                    _orderAmount,\\n                    block.timestamp\\n                );\\n\\n                if (typeOfOrder == 1) {\\n                    tokenBalanceForAddress[_orderOwner][\\n                        _secondaryTokenIndex\\n                    ] += toFulfill.quantity;\\n                    tokenBalanceForAddress[msg.sender][_primaryTokenIndex] +=\\n                        ExchangeMarket[_marketIndex]\\n                            .Orders[typeOfOrder]\\n                            .orders[_orderIndex]\\n                            .price *\\n                        toFulfill.quantity;\\n                    tokenBalanceForAddress[_orderOwner][\\n                        _secondaryTokenIndex\\n                    ] -= toFulfill.quantity;\\n                } else {\\n                    tokenBalanceForAddress[_orderOwner][\\n                        _primaryTokenIndex\\n                    ] += toFulfill.quantity;\\n                    tokenBalanceForAddress[msg.sender][_secondaryTokenIndex] +=\\n                        ExchangeMarket[_marketIndex]\\n                            .Orders[typeOfOrder]\\n                            .orders[_orderIndex]\\n                            .price *\\n                        toFulfill.quantity;\\n                    tokenBalanceForAddress[_orderOwner][\\n                        _primaryTokenIndex\\n                    ] -= toFulfill.quantity;\\n                }\\n\\n                toFulfill.quantity = 0;\\n            }\\n        }\\n\\n        console.log(\\\"Orders fulfilled \\\", _countOrderFulfiled);\\n\\n        // update sellOrderBook - ordersBook and ordersCount\\n        updateOrderBook(\\n            _currOrdersCount,\\n            _countOrderFulfiled,\\n            typeOfOrder,\\n            _marketIndex\\n        );\\n\\n        return toFulfill.quantity;\\n    }\\n\\n    function updateOrderBook(\\n        uint256 _currOrdersCount,\\n        uint256 _countOrderFulfiled,\\n        uint8 typeOfOrder,\\n        uint8 _marketIndex\\n    ) private {\\n        //change naming\\n        console.log(\\\"Updating order book\\\");\\n        uint256 _newOrdersCount = _currOrdersCount - _countOrderFulfiled;\\n\\n        uint256[] memory _newSellOrdersQueue = new uint256[](_newOrdersCount);\\n        for (uint256 i = 0; i < _newOrdersCount; i++) {\\n            _newSellOrdersQueue[i] = ExchangeMarket[_marketIndex]\\n                .Orders[typeOfOrder]\\n                .ordersQueue[i + _countOrderFulfiled];\\n            console.log(\\\"_newSellOrdersQueue[i]\\\", _newSellOrdersQueue[i]);\\n        }\\n\\n        ExchangeMarket[_marketIndex]\\n            .Orders[typeOfOrder]\\n            .ordersCount = _newOrdersCount;\\n        ExchangeMarket[_marketIndex]\\n            .Orders[typeOfOrder]\\n            .ordersQueue = _newSellOrdersQueue;\\n        ExchangeMarket[_marketIndex]\\n            .Orders[typeOfOrder]\\n            .orderIndex = _newOrdersCount;\\n\\n        //console.log(\\\"_newSellOrdersQueue \\\", _newSellOrdersQueue[0]);\\n    }\\n\\n    //User's ability to cancel orders that were placed\\n    function cancelOrder(\\n        uint8 typeOfOrder,\\n        string memory buyTokenSymbol,\\n        string memory sellTokenSymbol,\\n        uint256 orderIndex\\n    ) public {\\n        require(hasToken(buyTokenSymbol));\\n        require(hasToken(sellTokenSymbol));\\n\\n        uint8 _primaryTokenIndex;\\n        uint8 _secondaryTokenIndex;\\n        uint8 _marketIndex;\\n\\n        if (typeOfOrder == 0) {\\n            _primaryTokenIndex = getTokenIndex(buyTokenSymbol);\\n            _secondaryTokenIndex = getTokenIndex(sellTokenSymbol);\\n        } else {\\n            _primaryTokenIndex = getTokenIndex(sellTokenSymbol); //A\\n            _secondaryTokenIndex = getTokenIndex(buyTokenSymbol); //B\\n            // string memory temp = buySymbolName;\\n            // buySymbolName = sellSymbolName; //A\\n            // sellSymbolName = temp; //B\\n        }\\n\\n        require(\\n            ExchangeMarket[_marketIndex].Orders[typeOfOrder].ordersCount > 0\\n        );\\n\\n        // Check order is in OrderBook\\n        // Create new orderQueue\\n        bool _isOrderInBook = false;\\n        uint256 _newOrderQueueIndex = 0;\\n        uint256[] memory _newOrdersQueue = new uint256[](\\n            ExchangeMarket[_marketIndex].Orders[typeOfOrder].ordersCount - 1\\n        );\\n        uint256 _price;\\n        uint256 _quantity;\\n\\n        for (\\n            uint256 _orderQueueIndex = 0;\\n            _orderQueueIndex <\\n            ExchangeMarket[_marketIndex].Orders[typeOfOrder].ordersCount;\\n            _orderQueueIndex++\\n        ) {\\n            if (\\n                orderIndex ==\\n                ExchangeMarket[_marketIndex].Orders[typeOfOrder].ordersQueue[\\n                    _orderQueueIndex\\n                ]\\n            ) {\\n                _isOrderInBook = true;\\n                _price = ExchangeMarket[_marketIndex]\\n                    .Orders[typeOfOrder]\\n                    .orders[orderIndex]\\n                    .price;\\n                _quantity = ExchangeMarket[_marketIndex]\\n                    .Orders[typeOfOrder]\\n                    .orders[orderIndex]\\n                    .quantity;\\n            } else {\\n                _newOrdersQueue[_newOrderQueueIndex] = ExchangeMarket[\\n                    _marketIndex\\n                ].Orders[typeOfOrder].ordersQueue[_orderQueueIndex];\\n                _newOrderQueueIndex++;\\n            }\\n        }\\n        require(_isOrderInBook);\\n\\n        // Update OrderBook and OrderQueue\\n        ExchangeMarket[_marketIndex].Orders[typeOfOrder].ordersCount--;\\n        ExchangeMarket[_marketIndex]\\n            .Orders[typeOfOrder]\\n            .ordersQueue = _newOrdersQueue;\\n\\n        // refund ether balance back to user's account\\n        if (typeOfOrder == 0) {\\n            tokenBalanceForAddress[msg.sender][_secondaryTokenIndex] +=\\n                _price *\\n                _quantity;\\n        } else {\\n            tokenBalanceForAddress[msg.sender][_primaryTokenIndex] +=\\n                _price *\\n                _quantity;\\n        }\\n\\n        emit LogCancelBuyOrder(\\n            buyTokenSymbol,\\n            sellTokenSymbol,\\n            orderIndex,\\n            msg.sender,\\n            block.timestamp\\n        );\\n    }\\n\\n    /* HELPER FUNCTION */\\n\\n    function hasToken(string memory symbolName) public view returns (bool) {\\n        for (uint8 i = 1; i <= tokenIndex; i++) {\\n            if (\\n                keccak256(abi.encodePacked(symbolName)) ==\\n                keccak256(abi.encodePacked(tokenInfo[i].symbolName))\\n            ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /* GETTER FUNCTIONS */\\n\\n    function getOrderBook(\\n        uint8 buyTokenIndex,\\n        uint8 sellTokenIndex,\\n        uint8 type_of_order\\n    )\\n        public\\n        view\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        console.log(\\\"GetOrderbook \\\");\\n        console.log(\\\"type_of_order\\\", type_of_order);\\n        uint8 _marketIndex = getMarketIndex(buyTokenIndex, sellTokenIndex);\\n\\n        OrderBook storage order_book = ExchangeMarket[_marketIndex].Orders[\\n            type_of_order\\n        ];\\n\\n        console.log(_marketIndex);\\n\\n        uint256[] memory indexes = new uint256[](order_book.ordersCount);\\n        uint256[] memory prices = new uint256[](order_book.ordersCount);\\n        uint256[] memory quantity = new uint256[](order_book.ordersCount);\\n\\n        console.log(\\\"order_book.ordersCount\\\", order_book.ordersCount);\\n\\n        for (uint256 i = 1; i <= order_book.ordersCount; i++) {\\n            Order memory _order = order_book.orders[\\n                order_book.ordersQueue[i - 1]\\n            ];\\n            indexes[i - 1] = order_book.ordersQueue[i - 1];\\n            prices[i - 1] = _order.price;\\n            quantity[i - 1] = _order.quantity;\\n            console.log(\\n                \\\"entry orderbook\\\",\\n                indexes[i - 1],\\n                prices[i - 1],\\n                quantity[i - 1]\\n            );\\n        }\\n        //console.log(\\\"entry orderbook\\\", indexes[0], prices[0], quantity[0]);\\n\\n        return (indexes, prices, quantity);\\n    }\\n\\n    function getTokenIndex(string memory symbolName)\\n        public\\n        view\\n        returns (uint8)\\n    {\\n        for (uint8 i = 1; i <= tokenIndex; i++) {\\n            if (\\n                keccak256(bytes(symbolName)) ==\\n                keccak256(bytes(tokenInfo[i].symbolName))\\n            ) {\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function getMarketIndex(\\n        string memory buyTokenSymbol,\\n        string memory sellTokenSymbol\\n    ) public view returns (uint8) {\\n        for (uint8 i = 1; i <= marketIndex; i++) {\\n            if (\\n                keccak256(bytes(buyTokenSymbol)) ==\\n                keccak256(bytes(tokenInfo[buyToSell[i][0]].symbolName)) &&\\n                keccak256(bytes(sellTokenSymbol)) ==\\n                keccak256(bytes(tokenInfo[buyToSell[i][1]].symbolName))\\n            ) {\\n                console.log(\\\"Returning market index \\\", i);\\n                return i;\\n            }\\n        }\\n        console.log(\\\"Returning market index \\\", 0);\\n        return 0;\\n    }\\n\\n    function getMarketIndex(uint8 buyTokenIndex, uint8 sellTokenIndex)\\n        public\\n        view\\n        returns (uint8)\\n    {\\n        for (uint8 i = 1; i <= marketIndex; i++) {\\n            if (\\n                buyTokenIndex == buyToSell[i][0] &&\\n                sellTokenIndex == buyToSell[i][1]\\n            ) {\\n                console.log(\\\"Returning market index \\\", i);\\n                return i;\\n            }\\n        }\\n        console.log(\\\"Returning market index \\\", 0);\\n        return 0;\\n    }\\n\\n    function getTokenBalanceForUser(string memory symbolName)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return tokenBalanceForAddress[msg.sender][getTokenIndex(symbolName)];\\n    }\\n\\n    function getAllTokenBalanceForUser()\\n        public\\n        view\\n        returns (string[] memory, uint256[] memory)\\n    {\\n        string[] memory symbolNames = new string[](tokenIndex);\\n        uint256[] memory balances = new uint256[](tokenIndex);\\n        for (uint8 i = 1; i <= tokenIndex; i++) {\\n            console.log(\\n                \\\"balance \\\",\\n                getTokenBalanceForUser(tokenInfo[i].symbolName)\\n            );\\n            symbolNames[i - 1] = tokenInfo[i].symbolName;\\n            balances[i - 1] = getTokenBalanceForUser(tokenInfo[i].symbolName);\\n        }\\n        return (symbolNames, balances);\\n    }\\n\\n    function getAllTokens()\\n        public\\n        view\\n        returns (string[] memory, address[] memory)\\n    {\\n        string[] memory symbolNames = new string[](tokenIndex);\\n        address[] memory addresses = new address[](tokenIndex);\\n\\n        for (uint8 i = 1; i <= tokenIndex; i++) {\\n            symbolNames[i - 1] = tokenInfo[i].symbolName;\\n            addresses[i - 1] = tokenInfo[i].contractAddress;\\n        }\\n\\n        return (symbolNames, addresses);\\n    }\\n\\n    function getMarketIndex() public view returns (uint8) {\\n        return marketIndex;\\n    }\\n\\n    function getAllMarkets()\\n        public\\n        view\\n        returns (string[] memory, string[] memory)\\n    {\\n        string[] memory buySymbols = new string[](marketIndex);\\n        string[] memory sellSymbols = new string[](marketIndex);\\n        console.log(\\\"markets number \\\", marketIndex);\\n\\n        for (uint8 i = 1; i <= marketIndex; i++) {\\n            console.log(\\n                \\\"Market \\\",\\n                tokenInfo[2].symbolName,\\n                tokenInfo[1].symbolName\\n            );\\n            buySymbols[i - 1] = tokenInfo[buyToSell[i][0]].symbolName;\\n            sellSymbols[i - 1] = tokenInfo[buyToSell[i][1]].symbolName;\\n        }\\n\\n        return (buySymbols, sellSymbols);\\n    }\\n}\\n\",\"keccak256\":\"0xff189f49147c3421260b133c6ef69ccfa8568024c089531115ff062005168693\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063cb803ceb11610071578063cb803ceb14610335578063cedd00b114610353578063edb0e9b914610383578063f2fde38b1461039f578063f7499762146103bb57610121565b80638da5cb5b1461027c5780638ea008181461029a578063b0772d0b146102ca578063b0b22c2c146102e9578063c97a413a1461030557610121565b806361a6d43a116100f457806361a6d43a146101c15780636409d48d146101f3578063715018a61461021257806384cde3691461021c5780638883b10c1461024c57610121565b80632a5c792a1461012657806333ad57e41461014557806342fe6695146101755780635f96876714610191575b600080fd5b61012e6103d7565b60405161013c9291906148c2565b60405180910390f35b61015f600480360381019061015a9190614a78565b61064b565b60405161016c9190614ae3565b60405180910390f35b61018f600480360381019061018a9190614afe565b610851565b005b6101ab60048036038101906101a69190614afe565b610b1c565b6040516101b89190614b63565b60405180910390f35b6101db60048036038101906101d69190614baa565b610ba5565b6040516101ea93929190614cbb565b60405180910390f35b6101fb61101e565b604051610209929190614d07565b60405180910390f35b61021a6113bf565b005b61023660048036038101906102319190614d3e565b6113d3565b6040516102439190614b63565b60405180910390f35b61026660048036038101906102619190614afe565b611556565b6040516102739190614ae3565b60405180910390f35b6102846115be565b6040516102919190614d8d565b60405180910390f35b6102b460048036038101906102af9190614afe565b6115e7565b6040516102c19190614dc3565b60405180910390f35b6102d26116a1565b6040516102e0929190614dde565b60405180910390f35b61030360048036038101906102fe9190614e41565b611bbe565b005b61031f600480360381019061031a9190614a78565b611dd2565b60405161032c9190614ae3565b60405180910390f35b61033d611f94565b60405161034a9190614b63565b60405180910390f35b61036d60048036038101906103689190614e9d565b611fab565b60405161037a9190614b63565b60405180910390f35b61039d60048036038101906103989190614f41565b612190565b005b6103b960048036038101906103b49190615006565b6126e4565b005b6103d560048036038101906103d09190615033565b612767565b005b6060806000600560009054906101000a900460ff1660ff1667ffffffffffffffff81111561040857610407614917565b5b60405190808252806020026020018201604052801561043b57816020015b60608152602001906001900390816104265790505b5090506000600560009054906101000a900460ff1660ff1667ffffffffffffffff81111561046c5761046b614917565b5b60405190808252806020026020018201604052801561049a5781602001602082028036833780820191505090505b5090506000600190505b600560009054906101000a900460ff1660ff168160ff161161063e57600160008260ff1660ff16815260200190815260200160002060010180546104e790615101565b80601f016020809104026020016040519081016040528092919081815260200182805461051390615101565b80156105605780601f1061053557610100808354040283529160200191610560565b820191906000526020600020905b81548152906001019060200180831161054357829003601f168201915b5050505050836001836105739190615161565b60ff168151811061058757610586615196565b5b6020026020010181905250600160008260ff1660ff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826001836105dd9190615161565b60ff16815181106105f1576105f0615196565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080610636906151c5565b9150506104a4565b5081819350935050509091565b6000610656836115e7565b610695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068c9061524b565b60405180910390fd5b61069e83611556565b826106a885611556565b6106b2919061526b565b10156106f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ea906152eb565b60405180910390fd5b60006106fe84610b1c565b905082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360ff1660ff1681526020019081526020016000206000828254610766919061526b565b925050819055506108026040518060400160405280600d81526020017f746f6b656e2062616c616e636500000000000000000000000000000000000000815250600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460ff1660ff16815260200190815260200160002054612c65565b7f4dbc01516018d27f28f32ddd20595428f662140f1fff79b754484578ac27fc19843385426040516108379493929190615344565b60405180910390a161084884611556565b91505092915050565b610859612d01565b600560019054906101000a900460ff1660ff166001600560019054906101000a900460ff166108889190615390565b60ff1610156108cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c390615411565b60405180910390fd5b6000600190505b600560009054906101000a900460ff1660ff168160ff161015610a7d576109456040518060400160405280600e81526020017f416464696e67206d61726b657420000000000000000000000000000000000000815250600560009054906101000a900460ff1660ff168360ff16612d7f565b6005600181819054906101000a900460ff1680929190610964906151c5565b91906101000a81548160ff021916908360ff160217905550506000600267ffffffffffffffff81111561099a57610999614917565b5b6040519080825280602002602001820160405280156109c85781602001602082028036833780820191505090505b509050600560009054906101000a900460ff16816000815181106109ef576109ee615196565b5b602002602001019060ff16908160ff16815250508181600181518110610a1857610a17615196565b5b602002602001019060ff16908160ff16815250508060036000600560019054906101000a900460ff1660ff1660ff1681526020019081526020016000209080519060200190610a6892919061456f565b50508080610a75906151c5565b9150506108d3565b50610acf6040518060400160405280600e81526020017f546f74616c206d61726b65747320000000000000000000000000000000000000815250600560019054906101000a900460ff1660ff16612c65565b7f8877b3481be0c4a9d298c35f0e291fd2f61a153f7d22354a14c44c8266a5a754600560019054906101000a900460ff168242604051610b119392919061546c565b60405180910390a150565b600080600190505b600560009054906101000a900460ff1660ff168160ff1611610b9a57600160008260ff1660ff168152602001908152602001600020600101604051610b69919061554d565b6040518091039020838051906020012003610b875780915050610ba0565b8080610b92906151c5565b915050610b24565b50600090505b919050565b6060806060610be86040518060400160405280600d81526020017f4765744f72646572626f6f6b2000000000000000000000000000000000000000815250612e1e565b610c2a6040518060400160405280600d81526020017f747970655f6f665f6f72646572000000000000000000000000000000000000008152508560ff16612c65565b6000610c3687876113d3565b90506000600460008360ff1660ff16815260200190815260200160002060000160008760ff1660ff1681526020019081526020016000209050610c7b8260ff16612eb7565b6000816002015467ffffffffffffffff811115610c9b57610c9a614917565b5b604051908082528060200260200182016040528015610cc95781602001602082028036833780820191505090505b5090506000826002015467ffffffffffffffff811115610cec57610ceb614917565b5b604051908082528060200260200182016040528015610d1a5781602001602082028036833780820191505090505b5090506000836002015467ffffffffffffffff811115610d3d57610d3c614917565b5b604051908082528060200260200182016040528015610d6b5781602001602082028036833780820191505090505b509050610db16040518060400160405280601681526020017f6f726465725f626f6f6b2e6f7264657273436f756e74000000000000000000008152508560020154612c65565b6000600190505b8460020154811161100657600085600101600087600301600185610ddc9190615564565b81548110610ded57610dec615196565b5b906000526020600020015481526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905085600301600183610e989190615564565b81548110610ea957610ea8615196565b5b906000526020600020015485600184610ec29190615564565b81518110610ed357610ed2615196565b5b602002602001018181525050806020015184600184610ef29190615564565b81518110610f0357610f02615196565b5b602002602001018181525050806000015183600184610f229190615564565b81518110610f3357610f32615196565b5b602002602001018181525050610ff26040518060400160405280600f81526020017f656e747279206f72646572626f6f6b000000000000000000000000000000000081525086600185610f869190615564565b81518110610f9757610f96615196565b5b602002602001015186600186610fad9190615564565b81518110610fbe57610fbd615196565b5b602002602001015186600187610fd49190615564565b81518110610fe557610fe4615196565b5b6020026020010151612f50565b508080610ffe90615598565b915050610db8565b50828282975097509750505050505093509350939050565b6060806000600560009054906101000a900460ff1660ff1667ffffffffffffffff81111561104f5761104e614917565b5b60405190808252806020026020018201604052801561108257816020015b606081526020019060019003908161106d5790505b5090506000600560009054906101000a900460ff1660ff1667ffffffffffffffff8111156110b3576110b2614917565b5b6040519080825280602002602001820160405280156110e15781602001602082028036833780820191505090505b5090506000600190505b600560009054906101000a900460ff1660ff168160ff16116113b2576111f26040518060400160405280600881526020017f62616c616e6365200000000000000000000000000000000000000000000000008152506111ed600160008560ff1660ff168152602001908152602001600020600101805461116a90615101565b80601f016020809104026020016040519081016040528092919081815260200182805461119690615101565b80156111e35780601f106111b8576101008083540402835291602001916111e3565b820191906000526020600020905b8154815290600101906020018083116111c657829003601f168201915b5050505050611556565b612c65565b600160008260ff1660ff168152602001908152602001600020600101805461121990615101565b80601f016020809104026020016040519081016040528092919081815260200182805461124590615101565b80156112925780601f1061126757610100808354040283529160200191611292565b820191906000526020600020905b81548152906001019060200180831161127557829003601f168201915b5050505050836001836112a59190615161565b60ff16815181106112b9576112b8615196565b5b6020026020010181905250611371600160008360ff1660ff16815260200190815260200160002060010180546112ee90615101565b80601f016020809104026020016040519081016040528092919081815260200182805461131a90615101565b80156113675780601f1061133c57610100808354040283529160200191611367565b820191906000526020600020905b81548152906001019060200180831161134a57829003601f168201915b5050505050611556565b8260018361137f9190615161565b60ff168151811061139357611392615196565b5b60200260200101818152505080806113aa906151c5565b9150506110eb565b5081819350935050509091565b6113c7612d01565b6113d16000612ff2565b565b600080600190505b600560019054906101000a900460ff1660ff168160ff161161150a57600360008260ff1660ff16815260200190815260200160002060008154811061142357611422615196565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff168460ff161480156114a75750600360008260ff1660ff16815260200190815260200160002060018154811061147e5761147d615196565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff168360ff16145b156114f7576114ee6040518060400160405280601781526020017f52657475726e696e67206d61726b657420696e646578200000000000000000008152508260ff16612c65565b80915050611550565b8080611502906151c5565b9150506113db565b5061154b6040518060400160405280601781526020017f52657475726e696e67206d61726b657420696e646578200000000000000000008152506000612c65565b600090505b92915050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006115a284610b1c565b60ff1660ff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600190505b600560009054906101000a900460ff1660ff168160ff161161169657600160008260ff1660ff1681526020019081526020016000206001016040516020016116379190615683565b604051602081830303815290604052805190602001208360405160200161165e91906156cb565b604051602081830303815290604052805190602001200361168357600191505061169c565b808061168e906151c5565b9150506115ef565b50600090505b919050565b6060806000600560019054906101000a900460ff1660ff1667ffffffffffffffff8111156116d2576116d1614917565b5b60405190808252806020026020018201604052801561170557816020015b60608152602001906001900390816116f05790505b5090506000600560019054906101000a900460ff1660ff1667ffffffffffffffff81111561173657611735614917565b5b60405190808252806020026020018201604052801561176957816020015b60608152602001906001900390816117545790505b5090506117bd6040518060400160405280600f81526020017f6d61726b657473206e756d626572200000000000000000000000000000000000815250600560019054906101000a900460ff1660ff16612c65565b6000600190505b600560019054906101000a900460ff1660ff168160ff1611611bb1576119646040518060400160405280600781526020017f4d61726b6574200000000000000000000000000000000000000000000000000081525060016000600260ff168152602001908152602001600020600101805461183e90615101565b80601f016020809104026020016040519081016040528092919081815260200182805461186a90615101565b80156118b75780601f1061188c576101008083540402835291602001916118b7565b820191906000526020600020905b81548152906001019060200180831161189a57829003601f168201915b505050505060016000600160ff16815260200190815260200160002060010180546118e190615101565b80601f016020809104026020016040519081016040528092919081815260200182805461190d90615101565b801561195a5780601f1061192f5761010080835404028352916020019161195a565b820191906000526020600020905b81548152906001019060200180831161193d57829003601f168201915b50505050506130b6565b60016000600360008460ff1660ff16815260200190815260200160002060008154811061199457611993615196565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff1660ff16815260200190815260200160002060010180546119d690615101565b80601f0160208091040260200160405190810160405280929190818152602001828054611a0290615101565b8015611a4f5780601f10611a2457610100808354040283529160200191611a4f565b820191906000526020600020905b815481529060010190602001808311611a3257829003601f168201915b505050505083600183611a629190615161565b60ff1681518110611a7657611a75615196565b5b602002602001018190525060016000600360008460ff1660ff168152602001908152602001600020600181548110611ab157611ab0615196565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff1660ff1681526020019081526020016000206001018054611af390615101565b80601f0160208091040260200160405190810160405280929190818152602001828054611b1f90615101565b8015611b6c5780601f10611b4157610100808354040283529160200191611b6c565b820191906000526020600020905b815481529060010190602001808311611b4f57829003601f168201915b505050505082600183611b7f9190615161565b60ff1681518110611b9357611b92615196565b5b60200260200101819052508080611ba9906151c5565b9150506117c4565b5081819350935050509091565b611bc6612d01565b611bcf826115e7565b15611c0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c069061572e565b60405180910390fd5b600560009054906101000a900460ff1660ff166001600560009054906101000a900460ff16611c3e9190615390565b60ff161015611c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c799061579a565b60405180910390fd5b6005600081819054906101000a900460ff1680929190611ca1906151c5565b91906101000a81548160ff021916908360ff160217905550508160016000600560009054906101000a900460ff1660ff1660ff1681526020019081526020016000206001019081611cf29190615947565b508060016000600560009054906101000a900460ff1660ff1660ff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600560009054906101000a900460ff1660ff161115611d8257611d8182610851565b5b7f1723c709bc871c32c420d3c2d2837cdd4bef40c574088c1d055e1f4f609d2377600560009054906101000a900460ff16838342604051611dc69493929190615a19565b60405180910390a15050565b6000611ddd836115e7565b611de657600080fd5b611def83611556565b821115611dfb57600080fd5b6000611e0684610b1c565b905082600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008360ff1660ff1681526020019081526020016000206000828254611e6e9190615564565b925050819055506000600160008360ff1660ff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600115158173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876040518363ffffffff1660e01b8152600401611ef5929190615a65565b6020604051808303816000875af1158015611f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f389190615aa3565b151514611f4457600080fd5b7fc0a144e0d9af86fa328820e6f7f9e66f6e2a7248ff06a92aa13dc1f01e26934f85338642604051611f799493929190615344565b60405180910390a1611f8a85611556565b9250505092915050565b6000600560019054906101000a900460ff16905090565b600080600190505b600560019054906101000a900460ff1660ff168160ff16116121445760016000600360008460ff1660ff168152602001908152602001600020600081548110611fff57611ffe615196565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff1660ff168152602001908152602001600020600101604051612043919061554d565b604051809103902084805190602001201480156120e1575060016000600360008460ff1660ff16815260200190815260200160002060018154811061208b5761208a615196565b5b90600052602060002090602091828204019190069054906101000a900460ff1660ff1660ff1681526020019081526020016000206001016040516120cf919061554d565b60405180910390208380519060200120145b15612131576121286040518060400160405280601781526020017f52657475726e696e67206d61726b657420696e646578200000000000000000008152508260ff16612c65565b8091505061218a565b808061213c906151c5565b915050611fb3565b506121856040518060400160405280601781526020017f52657475726e696e67206d61726b657420696e646578200000000000000000008152506000612c65565b600090505b92915050565b6121ce6040518060400160405280600e81526020017f6372656174696e67206f72646572000000000000000000000000000000000000815250612e1e565b6121d7856115e7565b612216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220d9061524b565b60405180910390fd5b61221f846115e7565b61225e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122559061524b565b60405180910390fd5b6122a06040518060400160405280600e81526020017f6372656174696e67206f726465720000000000000000000000000000000000008152508760ff16612c65565b60008060008085905060008a60ff1603612385576122bd89610b1c565b93506122c888610b1c565b925084158015612339575085876122df9190615ad0565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008560ff1660ff1681526020019081526020016000205410155b806123415750845b612380576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237790615b5e565b60405180910390fd5b612452565b61238e88610b1c565b935061239989610b1c565b92508415801561240a575085876123b09190615ad0565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008660ff1660ff1681526020019081526020016000205410155b806124125750845b612451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244890615b5e565b60405180910390fd5b5b61245c84846113d3565b91506000808b60ff1614612471576000612474565b60015b90506124b86040518060400160405280600581526020017f696e6465780000000000000000000000000000000000000000000000000000008152508260ff16612c65565b6000600460008560ff1660ff16815260200190815260200160002060000160008360ff1660ff16815260200190815260200160002060020154111561253d5761253a81868660405180608001604052808c81526020018d81526020014281526020013373ffffffffffffffffffffffffffffffffffffffff168152508a613155565b91505b600082111561259557600060405180608001604052808481526020018a81526020014281526020013373ffffffffffffffffffffffffffffffffffffffff168152509050866125935761259286868e84613d1b565b5b505b60008b60ff160361261d5781886125ac9190615ad0565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008660ff1660ff16815260200190815260200160002060008282546126119190615564565b92505081905550612696565b81886126299190615ad0565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008760ff1660ff168152602001908152602001600020600082825461268e9190615564565b925050819055505b7f11340760e313c90226d3979be72d7e5c52ef1aa822d8e8acf10e1c0dc73c0a208a8a8a8533426040516126cf96959493929190615b7e565b60405180910390a15050505050505050505050565b6126ec612d01565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361275b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275290615c5f565b60405180910390fd5b61276481612ff2565b50565b612770836115e7565b61277957600080fd5b612782826115e7565b61278b57600080fd5b6000806000808760ff16036127b5576127a386610b1c565b92506127ae85610b1c565b91506127cc565b6127be85610b1c565b92506127c986610b1c565b91505b6000600460008360ff1660ff16815260200190815260200160002060000160008960ff1660ff168152602001908152602001600020600201541161280f57600080fd5b60008060006001600460008660ff1660ff16815260200190815260200160002060000160008c60ff1660ff168152602001908152602001600020600201546128579190615564565b67ffffffffffffffff8111156128705761286f614917565b5b60405190808252806020026020018201604052801561289e5781602001602082028036833780820191505090505b50905060008060005b600460008860ff1660ff16815260200190815260200160002060000160008e60ff1660ff16815260200190815260200160002060020154811015612a7557600460008860ff1660ff16815260200190815260200160002060000160008e60ff1660ff168152602001908152602001600020600301818154811061292d5761292c615196565b5b90600052602060002001548a036129e15760019550600460008860ff1660ff16815260200190815260200160002060000160008e60ff1660ff16815260200190815260200160002060010160008b8152602001908152602001600020600101549250600460008860ff1660ff16815260200190815260200160002060000160008e60ff1660ff16815260200190815260200160002060010160008b8152602001908152602001600020600001549150612a62565b600460008860ff1660ff16815260200190815260200160002060000160008e60ff1660ff1681526020019081526020016000206003018181548110612a2957612a28615196565b5b9060005260206000200154848681518110612a4757612a46615196565b5b6020026020010181815250508480612a5e90615598565b9550505b8080612a6d90615598565b9150506128a7565b5084612a8057600080fd5b600460008760ff1660ff16815260200190815260200160002060000160008d60ff1660ff1681526020019081526020016000206002016000815480929190612ac790615c7f565b919050555082600460008860ff1660ff16815260200190815260200160002060000160008e60ff1660ff1681526020019081526020016000206003019080519060200190612b16929190614616565b5060008c60ff1603612b9f578082612b2e9190615ad0565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960ff1660ff1681526020019081526020016000206000828254612b93919061526b565b92505081905550612c18565b8082612bab9190615ad0565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a60ff1660ff1681526020019081526020016000206000828254612c10919061526b565b925050819055505b7f9a61c2300d2dd6e5e6c4d4860206d72177034372cf558a91f14cce7c88fb38dc8b8b8b3342604051612c4f959493929190615ca8565b60405180910390a1505050505050505050505050565b612cfd8282604051602401612c7b929190615d09565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506141a7565b5050565b612d096141d0565b73ffffffffffffffffffffffffffffffffffffffff16612d276115be565b73ffffffffffffffffffffffffffffffffffffffff1614612d7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7490615d85565b60405180910390fd5b565b612e19838383604051602401612d9793929190615da5565b6040516020818303038152906040527fca47c4eb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506141a7565b505050565b612eb481604051602401612e329190615de3565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506141a7565b50565b612f4d81604051602401612ecb9190614ae3565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506141a7565b50565b612fec84848484604051602401612f6a9493929190615e05565b6040516020818303038152906040527fa7a87853000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506141a7565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6131508383836040516024016130ce93929190615e51565b6040516020818303038152906040527f2ced7cef000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506141a7565b505050565b60006131956040518060400160405280601081526020017f696e2066756c66696c6c206f7264657200000000000000000000000000000000815250612e1e565b60006131a186866113d3565b90506000600460008360ff1660ff16815260200190815260200160002060000160008960ff1660ff16815260200190815260200160002060020154905061321d6040518060400160405280601081526020017f5f637572724f7264657273436f756e740000000000000000000000000000000081525082612c65565b6000805b82811015613cbc57600087600001510315613cbc576000600460008660ff1660ff16815260200190815260200160002060000160008c60ff1660ff16815260200190815260200160002060030182815481106132805761327f615196565b5b906000526020600020015490506000600460008760ff1660ff16815260200190815260200160002060000160008d60ff1660ff16815260200190815260200160002060010160008381526020019081526020016000206000015490506000600460008860ff1660ff16815260200190815260200160002060000160008e60ff1660ff168152602001908152602001600020600101600084815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061338c6040518060400160405280600f81526020017f496e2066756c66696c6c4f7264657200000000000000000000000000000000008152508484846141d8565b60018d60ff161480156133ec5750600460008860ff1660ff16815260200190815260200160002060000160008e60ff1660ff1681526020019081526020016000206001016000848152602001908152602001600020600101548a60200151105b80156133f6575088155b1561340357505050613cbc565b60008d60ff161480156134635750600460008860ff1660ff16815260200190815260200160002060000160008e60ff1660ff1681526020019081526020016000206001016000848152602001908152602001600020600101548a60200151115b801561346d575088155b1561347a57505050613cbc565b818a600001511061388f57818a6000018181516134979190615564565b915081815250506000600460008960ff1660ff16815260200190815260200160002060000160008f60ff1660ff16815260200190815260200160002060010160008581526020019081526020016000206000018190555084806134f990615598565b9550507f8e0f1287f1f458f620409868b99eada1c8f01cf7a235aa33543d4c29b230bde08d8d8d8d60200151864260405161353996959493929190615e9d565b60405180910390a160018d60ff16036136ed5781600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d60ff1660ff16815260200190815260200160002060008282546135b2919061526b565b9250508190555081600460008960ff1660ff16815260200190815260200160002060000160008f60ff1660ff16815260200190815260200160002060010160008581526020019081526020016000206001015461360f9190615ad0565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e60ff1660ff1681526020019081526020016000206000828254613674919061526b565b9250508190555081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d60ff1660ff16815260200190815260200160002060008282546136e19190615564565b9250508190555061388a565b81600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e60ff1660ff1681526020019081526020016000206000828254613753919061526b565b9250508190555081600460008960ff1660ff16815260200190815260200160002060000160008f60ff1660ff1681526020019081526020016000206001016000858152602001908152602001600020600101546137b09190615ad0565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d60ff1660ff1681526020019081526020016000206000828254613815919061526b565b9250508190555081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e60ff1660ff16815260200190815260200160002060008282546138829190615564565b925050819055505b613ca6565b8960000151600460008960ff1660ff16815260200190815260200160002060000160008f60ff1660ff168152602001908152602001600020600101600085815260200190815260200160002060000160008282546138ed9190615564565b925050819055507f8e0f1287f1f458f620409868b99eada1c8f01cf7a235aa33543d4c29b230bde08d8d8d8d60200151864260405161393196959493929190615e9d565b60405180910390a160018d60ff1603613af1578960000151600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d60ff1660ff16815260200190815260200160002060008282546139ae919061526b565b925050819055508960000151600460008960ff1660ff16815260200190815260200160002060000160008f60ff1660ff168152602001908152602001600020600101600085815260200190815260200160002060010154613a0f9190615ad0565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e60ff1660ff1681526020019081526020016000206000828254613a74919061526b565b925050819055508960000151600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d60ff1660ff1681526020019081526020016000206000828254613ae59190615564565b92505081905550613c9a565b8960000151600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e60ff1660ff1681526020019081526020016000206000828254613b5b919061526b565b925050819055508960000151600460008960ff1660ff16815260200190815260200160002060000160008f60ff1660ff168152602001908152602001600020600101600085815260200190815260200160002060010154613bbc9190615ad0565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d60ff1660ff1681526020019081526020016000206000828254613c21919061526b565b925050819055508960000151600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e60ff1660ff1681526020019081526020016000206000828254613c929190615564565b925050819055505b60008a60000181815250505b5050508080613cb490615598565b915050613221565b50613cfc6040518060400160405280601181526020017f4f72646572732066756c66696c6c65642000000000000000000000000000000081525082612c65565b613d0882828b8661427a565b8560000151935050505095945050505050565b613d596040518060400160405280600c81526020017f496e20616464206f726465720000000000000000000000000000000000000000815250612e1e565b6000613d66858585610ba5565b509150506000613d7686866113d3565b90506000600460008360ff1660ff16815260200190815260200160002060000160008660ff1660ff16815260200190815260200160002060000160008154613dbd90615598565b919050819055905060008167ffffffffffffffff811115613de157613de0614917565b5b604051908082528060200260200182016040528015613e0f5781602001602082028036833780820191505090505b509050600080600460008660ff1660ff16815260200190815260200160002060000160008960ff1660ff1681526020019081526020016000206002015403613e7b578282600081518110613e6657613e65615196565b5b60200260200101818152505060019050613fd8565b6000805b600460008760ff1660ff16815260200190815260200160002060000160008a60ff1660ff16815260200190815260200160002060020154811015613faf5782158015613ee85750868181518110613ed957613ed8615196565b5b60200260200101518860200151115b15613f1e5784848380613efa90615598565b945081518110613f0d57613f0c615196565b5b602002602001018181525050600192505b600460008760ff1660ff16815260200190815260200160002060000160008a60ff1660ff1681526020019081526020016000206003018181548110613f6657613f65615196565b5b9060005260206000200154848380613f7d90615598565b945081518110613f9057613f8f615196565b5b6020026020010181815250508080613fa790615598565b915050613e7f565b5081613fd65783838281518110613fc957613fc8615196565b5b6020026020010181815250505b505b81600460008660ff1660ff16815260200190815260200160002060000160008960ff1660ff1681526020019081526020016000206003019080519060200190614022929190614616565b50600460008560ff1660ff16815260200190815260200160002060000160008860ff1660ff168152602001908152602001600020600201600081548092919061406a90615598565b9190505550604051806080016040528087600001518152602001876020015181526020014281526020013373ffffffffffffffffffffffffffffffffffffffff16815250600460008660ff1660ff16815260200190815260200160002060000160008960ff1660ff168152602001908152602001600020600101600085815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505061419c6040518060400160405280600e81526020017f6973206f72646572206164646564000000000000000000000000000000000000815250826144d3565b505050505050505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600033905090565b614274848484846040516024016141f29493929190615efe565b6040516020818303038152906040527fe21de278000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506141a7565b50505050565b6142b86040518060400160405280601381526020017f5570646174696e67206f7264657220626f6f6b00000000000000000000000000815250612e1e565b600083856142c69190615564565b905060008167ffffffffffffffff8111156142e4576142e3614917565b5b6040519080825280602002602001820160405280156143125781602001602082028036833780820191505090505b50905060005b8281101561440957600460008560ff1660ff16815260200190815260200160002060000160008660ff1660ff1681526020019081526020016000206003018682614362919061526b565b8154811061437357614372615196565b5b906000526020600020015482828151811061439157614390615196565b5b6020026020010181815250506143f66040518060400160405280601681526020017f5f6e657753656c6c4f726465727351756575655b695d000000000000000000008152508383815181106143e9576143e8615196565b5b6020026020010151612c65565b808061440190615598565b915050614318565b5081600460008560ff1660ff16815260200190815260200160002060000160008660ff1660ff1681526020019081526020016000206002018190555080600460008560ff1660ff16815260200190815260200160002060000160008660ff1660ff168152602001908152602001600020600301908051906020019061448f929190614616565b5081600460008560ff1660ff16815260200190815260200160002060000160008660ff1660ff16815260200190815260200160002060000181905550505050505050565b61456b82826040516024016144e9929190615f4a565b6040516020818303038152906040527fc3b55635000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506141a7565b5050565b82805482825590600052602060002090601f016020900481019282156146055791602002820160005b838211156145d657835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302614598565b80156146035782816101000a81549060ff02191690556001016020816000010492830192600103026145d6565b505b5090506146129190614663565b5090565b828054828255906000526020600020908101928215614652579160200282015b82811115614651578251825591602001919060010190614636565b5b50905061465f9190614663565b5090565b5b8082111561467c576000816000905550600101614664565b5090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156146e65780820151818401526020810190506146cb565b60008484015250505050565b6000601f19601f8301169050919050565b600061470e826146ac565b61471881856146b7565b93506147288185602086016146c8565b614731816146f2565b840191505092915050565b60006147488383614703565b905092915050565b6000602082019050919050565b600061476882614680565b614772818561468b565b9350836020820285016147848561469c565b8060005b858110156147c057848403895281516147a1858261473c565b94506147ac83614750565b925060208a01995050600181019050614788565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614829826147fe565b9050919050565b6148398161481e565b82525050565b600061484b8383614830565b60208301905092915050565b6000602082019050919050565b600061486f826147d2565b61487981856147dd565b9350614884836147ee565b8060005b838110156148b557815161489c888261483f565b97506148a783614857565b925050600181019050614888565b5085935050505092915050565b600060408201905081810360008301526148dc818561475d565b905081810360208301526148f08184614864565b90509392505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61494f826146f2565b810181811067ffffffffffffffff8211171561496e5761496d614917565b5b80604052505050565b60006149816148f9565b905061498d8282614946565b919050565b600067ffffffffffffffff8211156149ad576149ac614917565b5b6149b6826146f2565b9050602081019050919050565b82818337600083830152505050565b60006149e56149e084614992565b614977565b905082815260208101848484011115614a0157614a00614912565b5b614a0c8482856149c3565b509392505050565b600082601f830112614a2957614a2861490d565b5b8135614a398482602086016149d2565b91505092915050565b6000819050919050565b614a5581614a42565b8114614a6057600080fd5b50565b600081359050614a7281614a4c565b92915050565b60008060408385031215614a8f57614a8e614903565b5b600083013567ffffffffffffffff811115614aad57614aac614908565b5b614ab985828601614a14565b9250506020614aca85828601614a63565b9150509250929050565b614add81614a42565b82525050565b6000602082019050614af86000830184614ad4565b92915050565b600060208284031215614b1457614b13614903565b5b600082013567ffffffffffffffff811115614b3257614b31614908565b5b614b3e84828501614a14565b91505092915050565b600060ff82169050919050565b614b5d81614b47565b82525050565b6000602082019050614b786000830184614b54565b92915050565b614b8781614b47565b8114614b9257600080fd5b50565b600081359050614ba481614b7e565b92915050565b600080600060608486031215614bc357614bc2614903565b5b6000614bd186828701614b95565b9350506020614be286828701614b95565b9250506040614bf386828701614b95565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b614c3281614a42565b82525050565b6000614c448383614c29565b60208301905092915050565b6000602082019050919050565b6000614c6882614bfd565b614c728185614c08565b9350614c7d83614c19565b8060005b83811015614cae578151614c958882614c38565b9750614ca083614c50565b925050600181019050614c81565b5085935050505092915050565b60006060820190508181036000830152614cd58186614c5d565b90508181036020830152614ce98185614c5d565b90508181036040830152614cfd8184614c5d565b9050949350505050565b60006040820190508181036000830152614d21818561475d565b90508181036020830152614d358184614c5d565b90509392505050565b60008060408385031215614d5557614d54614903565b5b6000614d6385828601614b95565b9250506020614d7485828601614b95565b9150509250929050565b614d878161481e565b82525050565b6000602082019050614da26000830184614d7e565b92915050565b60008115159050919050565b614dbd81614da8565b82525050565b6000602082019050614dd86000830184614db4565b92915050565b60006040820190508181036000830152614df8818561475d565b90508181036020830152614e0c818461475d565b90509392505050565b614e1e8161481e565b8114614e2957600080fd5b50565b600081359050614e3b81614e15565b92915050565b60008060408385031215614e5857614e57614903565b5b600083013567ffffffffffffffff811115614e7657614e75614908565b5b614e8285828601614a14565b9250506020614e9385828601614e2c565b9150509250929050565b60008060408385031215614eb457614eb3614903565b5b600083013567ffffffffffffffff811115614ed257614ed1614908565b5b614ede85828601614a14565b925050602083013567ffffffffffffffff811115614eff57614efe614908565b5b614f0b85828601614a14565b9150509250929050565b614f1e81614da8565b8114614f2957600080fd5b50565b600081359050614f3b81614f15565b92915050565b60008060008060008060c08789031215614f5e57614f5d614903565b5b6000614f6c89828a01614b95565b965050602087013567ffffffffffffffff811115614f8d57614f8c614908565b5b614f9989828a01614a14565b955050604087013567ffffffffffffffff811115614fba57614fb9614908565b5b614fc689828a01614a14565b9450506060614fd789828a01614a63565b9350506080614fe889828a01614a63565b92505060a0614ff989828a01614f2c565b9150509295509295509295565b60006020828403121561501c5761501b614903565b5b600061502a84828501614e2c565b91505092915050565b6000806000806080858703121561504d5761504c614903565b5b600061505b87828801614b95565b945050602085013567ffffffffffffffff81111561507c5761507b614908565b5b61508887828801614a14565b935050604085013567ffffffffffffffff8111156150a9576150a8614908565b5b6150b587828801614a14565b92505060606150c687828801614a63565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061511957607f821691505b60208210810361512c5761512b6150d2565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061516c82614b47565b915061517783614b47565b9250828203905060ff8111156151905761518f615132565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006151d082614b47565b915060ff82036151e3576151e2615132565b5b600182019050919050565b600082825260208201905092915050565b7f546f6b656e206e6f742070726573656e74000000000000000000000000000000600082015250565b60006152356011836151ee565b9150615240826151ff565b602082019050919050565b6000602082019050818103600083015261526481615228565b9050919050565b600061527682614a42565b915061528183614a42565b925082820190508082111561529957615298615132565b5b92915050565b7f416d6f756e74206f766572666c6f770000000000000000000000000000000000600082015250565b60006152d5600f836151ee565b91506152e08261529f565b602082019050919050565b60006020820190508181036000830152615304816152c8565b9050919050565b6000615316826146ac565b61532081856151ee565b93506153308185602086016146c8565b615339816146f2565b840191505092915050565b6000608082019050818103600083015261535e818761530b565b905061536d6020830186614d7e565b61537a6040830185614ad4565b6153876060830184614ad4565b95945050505050565b600061539b82614b47565b91506153a683614b47565b9250828201905060ff8111156153bf576153be615132565b5b92915050565b7f4d61726b657420496e646578206f766572666c6f770000000000000000000000600082015250565b60006153fb6015836151ee565b9150615406826153c5565b602082019050919050565b6000602082019050818103600083015261542a816153ee565b9050919050565b6000819050919050565b600061545661545161544c84614b47565b615431565b614a42565b9050919050565b6154668161543b565b82525050565b6000606082019050615481600083018661545d565b8181036020830152615493818561530b565b90506154a26040830184614ad4565b949350505050565b600081905092915050565b60008190508160005260206000209050919050565b600081546154d781615101565b6154e181866154aa565b945060018216600081146154fc576001811461551157615544565b60ff1983168652811515820286019350615544565b61551a856154b5565b60005b8381101561553c5781548189015260018201915060208101905061551d565b838801955050505b50505092915050565b600061555982846154ca565b915081905092915050565b600061556f82614a42565b915061557a83614a42565b925082820390508181111561559257615591615132565b5b92915050565b60006155a382614a42565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036155d5576155d4615132565b5b600182019050919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461560d81615101565b61561781866155e0565b9450600182166000811461563257600181146156475761567a565b60ff198316865281151582028601935061567a565b615650856155eb565b60005b8381101561567257815481890152600182019150602081019050615653565b838801955050505b50505092915050565b600061568f8284615600565b915081905092915050565b60006156a5826146ac565b6156af81856155e0565b93506156bf8185602086016146c8565b80840191505092915050565b60006156d7828461569a565b915081905092915050565b7f546f6b656e20616c726561647920657869737473000000000000000000000000600082015250565b60006157186014836151ee565b9150615723826156e2565b602082019050919050565b600060208201905081810360008301526157478161570b565b9050919050565b7f546f6b656e20496e646578206f766572666c6f77000000000000000000000000600082015250565b60006157846014836151ee565b915061578f8261574e565b602082019050919050565b600060208201905081810360008301526157b381615777565b9050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026158077fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826157ca565b61581186836157ca565b95508019841693508086168417925050509392505050565b600061584461583f61583a84614a42565b615431565b614a42565b9050919050565b6000819050919050565b61585e83615829565b61587261586a8261584b565b8484546157d7565b825550505050565b600090565b61588761587a565b615892818484615855565b505050565b5b818110156158b6576158ab60008261587f565b600181019050615898565b5050565b601f8211156158fb576158cc816155eb565b6158d5846157ba565b810160208510156158e4578190505b6158f86158f0856157ba565b830182615897565b50505b505050565b600082821c905092915050565b600061591e60001984600802615900565b1980831691505092915050565b6000615937838361590d565b9150826002028217905092915050565b615950826146ac565b67ffffffffffffffff81111561596957615968614917565b5b6159738254615101565b61597e8282856158ba565b600060209050601f8311600181146159b1576000841561599f578287015190505b6159a9858261592b565b865550615a11565b601f1984166159bf866155eb565b60005b828110156159e7578489015182556001820191506020850194506020810190506159c2565b86831015615a045784890151615a00601f89168261590d565b8355505b6001600288020188555050505b505050505050565b6000608082019050615a2e600083018761545d565b8181036020830152615a40818661530b565b9050615a4f6040830185614d7e565b615a5c6060830184614ad4565b95945050505050565b6000604082019050615a7a6000830185614d7e565b615a876020830184614ad4565b9392505050565b600081519050615a9d81614f15565b92915050565b600060208284031215615ab957615ab8614903565b5b6000615ac784828501615a8e565b91505092915050565b6000615adb82614a42565b9150615ae683614a42565b9250828202615af481614a42565b91508282048414831517615b0b57615b0a615132565b5b5092915050565b7f4e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b6000615b486010836151ee565b9150615b5382615b12565b602082019050919050565b60006020820190508181036000830152615b7781615b3b565b9050919050565b600060c0820190508181036000830152615b98818961530b565b90508181036020830152615bac818861530b565b9050615bbb6040830187614ad4565b615bc86060830186614ad4565b615bd56080830185614d7e565b615be260a0830184614ad4565b979650505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000615c496026836151ee565b9150615c5482615bed565b604082019050919050565b60006020820190508181036000830152615c7881615c3c565b9050919050565b6000615c8a82614a42565b915060008203615c9d57615c9c615132565b5b600182039050919050565b600060a0820190508181036000830152615cc2818861530b565b90508181036020830152615cd6818761530b565b9050615ce56040830186614ad4565b615cf26060830185614d7e565b615cff6080830184614ad4565b9695505050505050565b60006040820190508181036000830152615d23818561530b565b9050615d326020830184614ad4565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000615d6f6020836151ee565b9150615d7a82615d39565b602082019050919050565b60006020820190508181036000830152615d9e81615d62565b9050919050565b60006060820190508181036000830152615dbf818661530b565b9050615dce6020830185614ad4565b615ddb6040830184614ad4565b949350505050565b60006020820190508181036000830152615dfd818461530b565b905092915050565b60006080820190508181036000830152615e1f818761530b565b9050615e2e6020830186614ad4565b615e3b6040830185614ad4565b615e486060830184614ad4565b95945050505050565b60006060820190508181036000830152615e6b818661530b565b90508181036020830152615e7f818561530b565b90508181036040830152615e93818461530b565b9050949350505050565b600060c082019050615eb26000830189614b54565b615ebf6020830188614b54565b615ecc6040830187614b54565b615ed96060830186614ad4565b615ee66080830185614ad4565b615ef360a0830184614ad4565b979650505050505050565b60006080820190508181036000830152615f18818761530b565b9050615f276020830186614ad4565b615f346040830185614ad4565b615f416060830184614d7e565b95945050505050565b60006040820190508181036000830152615f64818561530b565b9050615f736020830184614db4565b939250505056fea26469706673582212208c8cfb3665e382eb34bf382b5840a1c5510a360fc3ecc388b70424bbc8ef29fe64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Swap.sol:Swap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1016,
        "contract": "contracts/Swap.sol:Swap",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint8,t_struct(Token)983_storage)"
      },
      {
        "astId": 1022,
        "contract": "contracts/Swap.sol:Swap",
        "label": "tokenBalanceForAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 1027,
        "contract": "contracts/Swap.sol:Swap",
        "label": "buyToSell",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint8,t_array(t_uint8)dyn_storage)"
      },
      {
        "astId": 1032,
        "contract": "contracts/Swap.sol:Swap",
        "label": "ExchangeMarket",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint8,t_struct(Market)1011_storage)"
      },
      {
        "astId": 1034,
        "contract": "contracts/Swap.sol:Swap",
        "label": "tokenIndex",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 1036,
        "contract": "contracts/Swap.sol:Swap",
        "label": "marketIndex",
        "offset": 1,
        "slot": "5",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Order)992_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Swap.Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)992_storage"
      },
      "t_mapping(t_uint8,t_array(t_uint8)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint8[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint8)dyn_storage"
      },
      "t_mapping(t_uint8,t_struct(Market)1011_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct Swap.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)1011_storage"
      },
      "t_mapping(t_uint8,t_struct(OrderBook)1005_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct Swap.OrderBook)",
        "numberOfBytes": "32",
        "value": "t_struct(OrderBook)1005_storage"
      },
      "t_mapping(t_uint8,t_struct(Token)983_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct Swap.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)983_storage"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Market)1011_storage": {
        "encoding": "inplace",
        "label": "struct Swap.Market",
        "members": [
          {
            "astId": 1010,
            "contract": "contracts/Swap.sol:Swap",
            "label": "Orders",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint8,t_struct(OrderBook)1005_storage)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Order)992_storage": {
        "encoding": "inplace",
        "label": "struct Swap.Order",
        "members": [
          {
            "astId": 985,
            "contract": "contracts/Swap.sol:Swap",
            "label": "quantity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 987,
            "contract": "contracts/Swap.sol:Swap",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 989,
            "contract": "contracts/Swap.sol:Swap",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 991,
            "contract": "contracts/Swap.sol:Swap",
            "label": "user",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(OrderBook)1005_storage": {
        "encoding": "inplace",
        "label": "struct Swap.OrderBook",
        "members": [
          {
            "astId": 994,
            "contract": "contracts/Swap.sol:Swap",
            "label": "orderIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 999,
            "contract": "contracts/Swap.sol:Swap",
            "label": "orders",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(Order)992_storage)"
          },
          {
            "astId": 1001,
            "contract": "contracts/Swap.sol:Swap",
            "label": "ordersCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1004,
            "contract": "contracts/Swap.sol:Swap",
            "label": "ordersQueue",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Token)983_storage": {
        "encoding": "inplace",
        "label": "struct Swap.Token",
        "members": [
          {
            "astId": 980,
            "contract": "contracts/Swap.sol:Swap",
            "label": "contractAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 982,
            "contract": "contracts/Swap.sol:Swap",
            "label": "symbolName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}